{"date":"2025-05-16","repository":"dart-lang/language","id":314,"title":"Add data classes","state":"OPEN","comments":336,"participants":84,"reactions":2226,"createdAt":"2017-10-31T11:42:42.000Z","labels":["request","data-classes","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1482,"title":"Static Metaprogramming","state":"OPEN","comments":598,"participants":91,"reactions":1681,"createdAt":"2021-03-01T16:08:58.000Z","labels":["state-rejected","feature","static-metaprogramming"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":69,"title":"Optional Semicolons","state":"OPEN","comments":184,"participants":66,"reactions":1257,"createdAt":"2018-10-31T14:07:35.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":723,"title":"Static extension methods","state":"OPEN","comments":130,"participants":47,"reactions":1155,"createdAt":"2019-12-06T08:20:43.000Z","labels":["feature","static-extensions"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":357,"title":"Dot shorthands: Allow for shorter dot syntax to access enum values","state":"OPEN","comments":336,"participants":43,"reactions":1059,"createdAt":"2019-05-16T17:52:45.000Z","labels":["feature","dot-shorthands","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":83,"title":"Sum/union types and type matching","state":"OPEN","comments":142,"participants":48,"reactions":534,"createdAt":"2018-11-05T06:02:31.000Z","labels":["request","union-types"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":356,"title":"Abstract static methods","state":"OPEN","comments":71,"participants":27,"reactions":411,"createdAt":"2019-05-16T14:15:17.000Z","labels":["request","meta-classes"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1122,"title":"Support method/function overloads","state":"OPEN","comments":121,"participants":28,"reactions":344,"createdAt":"2016-05-18T23:39:18.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1048,"title":"Constant function literals","state":"OPEN","comments":72,"participants":40,"reactions":307,"createdAt":"2012-08-20T06:08:26.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":72,"title":"Terminating Tokens","state":"OPEN","comments":51,"participants":20,"reactions":271,"createdAt":"2018-10-31T19:22:18.000Z","labels":["feature","state-backlog"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":649,"title":"Import shorthand syntax","state":"OPEN","comments":79,"participants":28,"reactions":264,"createdAt":"2019-10-29T02:52:22.000Z","labels":["feature","small-feature","import-shorthand","unquoted-uris","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":333,"title":"It is necessary to implement threads","state":"OPEN","comments":187,"participants":41,"reactions":251,"createdAt":"2019-04-27T21:06:53.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2364,"title":"Primary constructor on classes","state":"OPEN","comments":116,"participants":4,"reactions":240,"createdAt":"2022-07-29T22:45:19.000Z","labels":["feature","data-classes","structs","primary-constructors","extension-types-later","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1076,"title":"Allow both optional positional and optional named arguments in the same function signature.","state":"OPEN","comments":53,"participants":32,"reactions":238,"createdAt":"2012-11-30T13:04:22.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":524,"title":"Feature: Statically checked declaration-site variance","state":"OPEN","comments":100,"participants":30,"reactions":236,"createdAt":"2019-08-14T14:07:15.000Z","labels":["feature","variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":399,"title":"Add \"Safe\" (nullable) cast operator `as?`","state":"OPEN","comments":20,"participants":12,"reactions":221,"createdAt":"2019-06-12T15:21:00.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1014,"title":"Feature Request: Variable Number of Arguments","state":"OPEN","comments":50,"participants":38,"reactions":205,"createdAt":"2014-01-23T02:08:33.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":336,"title":"Static nested classes","state":"OPEN","comments":41,"participants":21,"reactions":196,"createdAt":"2019-04-29T19:34:27.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4211,"title":"Proposal for a pipe-like operator to chain constructor/method invocations without nesting","state":"OPEN","comments":149,"participants":1,"reactions":189,"createdAt":"2024-12-18T23:53:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":136,"title":"The `final` keyword is too long","state":"OPEN","comments":88,"participants":42,"reactions":143,"createdAt":"2018-12-17T09:28:43.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4271,"title":"static enough metaprogramming","state":"OPEN","comments":95,"participants":1,"reactions":139,"createdAt":"2025-02-19T15:25:53.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":145,"title":"Users want to define union or union-like APIs","state":"OPEN","comments":26,"participants":16,"reactions":132,"createdAt":"2018-12-17T23:36:13.000Z","labels":["request","union-types"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3001,"title":"Parameter destructuring","state":"OPEN","comments":12,"participants":3,"reactions":111,"createdAt":"2023-04-17T00:03:07.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":870,"title":"Disallow returning futures from `async` functions.","state":"OPEN","comments":26,"participants":12,"reactions":104,"createdAt":"2020-03-05T10:20:59.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":251,"title":"Add possibility to consistently get object property name","state":"OPEN","comments":26,"participants":21,"reactions":103,"createdAt":"2017-10-31T18:28:10.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1246,"title":"Add a function pipe operator","state":"OPEN","comments":33,"participants":17,"reactions":100,"createdAt":"2014-02-17T21:21:47.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":320,"title":"Requst: Optional parentheses for one argument arrow function","state":"OPEN","comments":13,"participants":7,"reactions":98,"createdAt":"2019-04-18T15:28:42.000Z","labels":["feature","small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1047,"title":"Extensible pattern-matching","state":"OPEN","comments":22,"participants":13,"reactions":97,"createdAt":"2012-05-08T21:16:00.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":783,"title":"Typed Maps - like interfaces in TypeScript","state":"OPEN","comments":50,"participants":20,"reactions":94,"createdAt":"2020-01-16T19:49:57.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":620,"title":"Infer generic type parameters based on the declaring type","state":"OPEN","comments":31,"participants":12,"reactions":88,"createdAt":"2019-10-11T16:23:29.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":540,"title":"Mixin composition","state":"OPEN","comments":35,"participants":24,"reactions":86,"createdAt":"2013-04-02T07:18:56.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":252,"title":"Partial Classes and Methods feature request","state":"OPEN","comments":16,"participants":14,"reactions":86,"createdAt":"2019-03-03T12:49:56.000Z","labels":["request","augmentations"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":698,"title":"Enhanced Default Constructors","state":"OPEN","comments":17,"participants":8,"reactions":85,"createdAt":"2019-11-21T13:06:10.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1394,"title":"constructor initializer list — make expressions able to use earlier names in the list","state":"OPEN","comments":19,"participants":10,"reactions":83,"createdAt":"2018-09-09T14:14:15.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3021,"title":"More concise syntax for defining sealed families","state":"OPEN","comments":9,"participants":1,"reactions":81,"createdAt":"2023-04-27T13:16:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1518,"title":"Stable getters","state":"OPEN","comments":130,"participants":10,"reactions":81,"createdAt":"2021-03-13T11:40:44.000Z","labels":["feature","field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":112,"title":"Syntax catching multiple exceptions in a single on block","state":"OPEN","comments":9,"participants":10,"reactions":81,"createdAt":"2018-11-28T16:45:23.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":25,"title":"Prefix `await` is cumbersome to work with.","state":"OPEN","comments":16,"participants":11,"reactions":76,"createdAt":"2018-09-13T10:02:30.000Z","labels":["feature","small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2128,"title":"Record spreading","state":"OPEN","comments":9,"participants":5,"reactions":74,"createdAt":"2022-02-23T15:33:01.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1201,"title":"If-variables","state":"OPEN","comments":68,"participants":22,"reactions":74,"createdAt":"2020-09-02T22:41:21.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":125,"title":"Statically tracked shared immutable objects","state":"OPEN","comments":47,"participants":14,"reactions":73,"createdAt":"2018-12-05T00:25:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":736,"title":"Interface support for extensions","state":"OPEN","comments":15,"participants":10,"reactions":67,"createdAt":"2019-12-12T03:53:07.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":581,"title":"Add binary integer literals","state":"OPEN","comments":18,"participants":13,"reactions":67,"createdAt":"2012-05-02T19:07:14.000Z","labels":["feature","small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2090,"title":"Give `Type` a type argument such that `T is Type<T>`","state":"OPEN","comments":42,"participants":11,"reactions":66,"createdAt":"2022-02-02T21:43:28.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":647,"title":"Constructor specific generics","state":"OPEN","comments":12,"participants":8,"reactions":65,"createdAt":"2019-10-28T13:29:09.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3192,"title":"Remove dynamic type","state":"OPEN","comments":65,"participants":4,"reactions":62,"createdAt":"2023-07-04T15:20:38.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1512,"title":"Allow parameter defaults for null values","state":"OPEN","comments":19,"participants":14,"reactions":60,"createdAt":"2018-07-19T20:26:23.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2563,"title":"Allow inferring the name on object patterns ","state":"OPEN","comments":30,"participants":1,"reactions":59,"createdAt":"2022-10-07T17:49:49.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2254,"title":"export as","state":"OPEN","comments":13,"participants":1,"reactions":59,"createdAt":"2022-05-23T08:50:45.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3501,"title":"First-class, functional-style `Result<E, T>` types with built-in operators","state":"OPEN","comments":36,"participants":1,"reactions":58,"createdAt":"2023-12-08T08:47:54.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1610,"title":"Make `@override` a language feature","state":"OPEN","comments":17,"participants":9,"reactions":58,"createdAt":"2021-05-03T09:51:42.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3374,"title":"if expressions","state":"OPEN","comments":26,"participants":1,"reactions":57,"createdAt":"2023-09-29T14:10:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2005,"title":"Allow setting named private properties","state":"OPEN","comments":30,"participants":11,"reactions":57,"createdAt":"2021-12-02T19:43:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":177,"title":"Scoped Class Extensions","state":"OPEN","comments":19,"participants":7,"reactions":56,"createdAt":"2019-01-14T13:34:45.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":782,"title":"Asynchronous Constructors","state":"OPEN","comments":9,"participants":6,"reactions":55,"createdAt":"2020-01-16T12:03:25.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":213,"title":"Safe typing involving variance","state":"OPEN","comments":8,"participants":4,"reactions":54,"createdAt":"2019-02-09T14:12:14.000Z","labels":["request","variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2235,"title":"Dart conditionally imported library","state":"OPEN","comments":18,"participants":1,"reactions":52,"createdAt":"2022-05-12T14:48:31.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":265,"title":"Abbreviated function literals","state":"OPEN","comments":16,"participants":6,"reactions":48,"createdAt":"2019-03-13T09:25:32.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2232,"title":"Simplified parameters, nullable means optional","state":"OPEN","comments":31,"participants":1,"reactions":46,"createdAt":"2022-05-11T13:24:06.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":361,"title":"Proposal: operator !! (opposite of ??)","state":"OPEN","comments":18,"participants":11,"reactions":46,"createdAt":"2019-05-17T17:55:34.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":140,"title":"It is inconvenient that the default value of a formal parameter is constant","state":"OPEN","comments":16,"participants":6,"reactions":46,"createdAt":"2018-12-17T13:19:13.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":493,"title":"Ability to provide constructor that forwards all arguments","state":"OPEN","comments":10,"participants":6,"reactions":45,"createdAt":"2019-08-04T23:51:54.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1077,"title":"Meta: Small and useful features collection","state":"OPEN","comments":35,"participants":20,"reactions":44,"createdAt":"2020-07-08T14:52:50.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":8,"title":"Support concise function literals","state":"OPEN","comments":30,"participants":11,"reactions":44,"createdAt":"2018-08-02T09:15:38.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3788,"title":"Shorter constructor declaration syntax.","state":"OPEN","comments":10,"participants":1,"reactions":43,"createdAt":"2024-05-08T13:14:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1159,"title":"No Tail Call Optimisation","state":"OPEN","comments":16,"participants":8,"reactions":43,"createdAt":"2020-08-18T12:03:13.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":121,"title":"The `async*` function `yield` should work well with `await for`.","state":"OPEN","comments":2,"participants":4,"reactions":43,"createdAt":"2018-11-30T19:48:10.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1874,"title":"Functional/Expression macro","state":"OPEN","comments":7,"participants":6,"reactions":42,"createdAt":"2021-09-28T23:12:56.000Z","labels":["feature","static-metaprogramming"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2703,"title":"Let","state":"OPEN","comments":21,"participants":9,"reactions":40,"createdAt":"2022-12-09T01:58:54.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":285,"title":"Support for code regions","state":"OPEN","comments":9,"participants":9,"reactions":39,"createdAt":"2019-03-22T19:37:46.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":108,"title":"Implicit Constructor proposal","state":"OPEN","comments":9,"participants":7,"reactions":39,"createdAt":"2018-11-27T22:45:01.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":131,"title":"\"if not null\" operators","state":"OPEN","comments":5,"participants":5,"reactions":38,"createdAt":"2018-12-12T14:03:28.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1565,"title":"Code generation (metaprogramming) proposal v2","state":"OPEN","comments":72,"participants":10,"reactions":37,"createdAt":"2021-04-08T01:42:15.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1415,"title":"Dart treats a final nullable property as nullable even after checking that the property is not  null","state":"OPEN","comments":53,"participants":14,"reactions":37,"createdAt":"2021-01-23T06:59:10.000Z","labels":["request","field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1113,"title":"Nullable compound assignments are inconvenient.","state":"OPEN","comments":19,"participants":13,"reactions":37,"createdAt":"2020-07-23T10:45:17.000Z","labels":["request","nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":877,"title":"[Feature] Add support for an Undefined data type","state":"OPEN","comments":21,"participants":11,"reactions":37,"createdAt":"2020-03-07T22:44:23.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":836,"title":"NNBD support for generic functions where the result nullability depends on if an optional parameter is passed or not","state":"OPEN","comments":18,"participants":7,"reactions":37,"createdAt":"2020-02-11T23:24:00.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":559,"title":"Introduce ability to remove leading indents in a multiline string after a newline.","state":"OPEN","comments":3,"participants":2,"reactions":37,"createdAt":"2019-09-03T08:40:31.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3061,"title":"Switch expression doesn't actually seem to be an expression.","state":"OPEN","comments":15,"participants":4,"reactions":35,"createdAt":"2023-05-11T04:25:21.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1758,"title":"unsafe context","state":"OPEN","comments":19,"participants":9,"reactions":35,"createdAt":"2021-07-26T19:08:19.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2321,"title":"Awaiting records.","state":"OPEN","comments":15,"participants":2,"reactions":34,"createdAt":"2022-06-28T21:42:09.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1121,"title":"Optional auto-generation of operator== and hashCode on classes with const constructors","state":"OPEN","comments":40,"participants":10,"reactions":34,"createdAt":"2016-06-14T19:45:09.000Z","labels":["request","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4200,"title":"More capable `Type` objects","state":"OPEN","comments":144,"participants":9,"reactions":33,"createdAt":"2024-12-09T16:33:47.000Z","labels":["feature","meta-classes"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3616,"title":"Dot syntax for static access","state":"OPEN","comments":9,"participants":1,"reactions":33,"createdAt":"2024-02-17T03:17:52.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3083,"title":"Switch expression is not exhaustive on integers","state":"OPEN","comments":7,"participants":2,"reactions":33,"createdAt":"2023-05-13T10:34:29.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1548,"title":"Swift-like guard statement","state":"OPEN","comments":29,"participants":12,"reactions":33,"createdAt":"2021-03-26T03:13:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":271,"title":"Escaped reserved words","state":"OPEN","comments":15,"participants":10,"reactions":33,"createdAt":"2019-03-15T17:34:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":170,"title":"Type Patterns","state":"OPEN","comments":21,"participants":3,"reactions":33,"createdAt":"2019-01-10T12:45:22.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3608,"title":"Unions as parameters","state":"OPEN","comments":13,"participants":1,"reactions":32,"createdAt":"2024-02-05T20:00:59.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3457,"title":"Allow switch without scrutinee and patterns in cases","state":"OPEN","comments":15,"participants":2,"reactions":32,"createdAt":"2023-11-09T15:02:38.000Z","labels":["request","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2496,"title":"Optional Entries in Map Patterns","state":"OPEN","comments":11,"participants":3,"reactions":31,"createdAt":"2022-09-16T08:38:57.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2009,"title":"With expressions","state":"OPEN","comments":23,"participants":11,"reactions":31,"createdAt":"2021-12-03T02:25:22.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1660,"title":"Switch statements on ints should accept ranges","state":"OPEN","comments":9,"participants":5,"reactions":31,"createdAt":"2021-06-01T00:08:07.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2025,"title":"Control-flow in expressions","state":"OPEN","comments":35,"participants":13,"reactions":30,"createdAt":"2021-12-13T00:54:50.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1612,"title":"Allow some kind of structural typing","state":"OPEN","comments":27,"participants":10,"reactions":30,"createdAt":"2021-05-03T19:53:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1087,"title":"Infix function","state":"OPEN","comments":4,"participants":5,"reactions":30,"createdAt":"2020-07-13T10:33:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2478,"title":"Make `Function` generic, and `Function<Record, Type>` denote a function type.","state":"OPEN","comments":15,"participants":8,"reactions":29,"createdAt":"2022-09-13T08:29:32.000Z","labels":["records"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2306,"title":"Remove/redefine conditional expression syntax.","state":"OPEN","comments":8,"participants":8,"reactions":29,"createdAt":"2022-06-23T13:00:59.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1655,"title":"Adding higher-order type constructor to dart","state":"OPEN","comments":4,"participants":3,"reactions":29,"createdAt":"2021-05-30T18:39:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1224,"title":"Using `if (foo?.bar == somethingNotNull)` should promote `foo`","state":"OPEN","comments":32,"participants":10,"reactions":29,"createdAt":"2020-09-15T21:35:06.000Z","labels":["request","nnbd","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":835,"title":"Add access modifiers","state":"OPEN","comments":6,"participants":6,"reactions":29,"createdAt":"2020-02-11T20:58:07.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":459,"title":"Allow type-checking type variables","state":"OPEN","comments":13,"participants":7,"reactions":29,"createdAt":"2019-07-19T20:45:29.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3748,"title":"Add first class support for method forwarding","state":"OPEN","comments":9,"participants":2,"reactions":27,"createdAt":"2017-11-29T19:09:27.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1889,"title":"Add a compile-time constant for platform","state":"OPEN","comments":17,"participants":12,"reactions":27,"createdAt":"2021-10-07T04:52:17.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1803,"title":"Allow mixins to declare factory constructors","state":"OPEN","comments":11,"participants":7,"reactions":27,"createdAt":"2021-08-12T22:34:50.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1622,"title":"Should we have generic getters?","state":"OPEN","comments":11,"participants":6,"reactions":27,"createdAt":"2021-05-07T10:48:34.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1420,"title":"Declaration expressions and declaration promotion","state":"OPEN","comments":31,"participants":7,"reactions":27,"createdAt":"2021-01-27T11:29:33.000Z","labels":["feature","field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":283,"title":"Problem: Adding a 2nd (or later) type parameter to a class breaks clients","state":"OPEN","comments":14,"participants":5,"reactions":27,"createdAt":"2019-03-21T20:58:48.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1514,"title":"Shadowing a non-local variable","state":"OPEN","comments":83,"participants":16,"reactions":26,"createdAt":"2021-03-11T22:35:29.000Z","labels":["feature","field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":753,"title":"Feature: Sound use-site variance","state":"OPEN","comments":6,"participants":2,"reactions":26,"createdAt":"2019-12-19T10:33:47.000Z","labels":["feature","variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4084,"title":"Expressions that are \"as constant as possible\"","state":"OPEN","comments":20,"participants":8,"reactions":25,"createdAt":"2024-09-06T09:20:26.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2399,"title":"[breaking change] Remove implicit tearoff of `call` methods","state":"OPEN","comments":27,"participants":13,"reactions":25,"createdAt":"2022-08-10T15:13:07.000Z","labels":["breaking-change"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2051,"title":"Add a \"try-with-resources\" or \"using\" style syntax for automatic resource management","state":"OPEN","comments":14,"participants":9,"reactions":25,"createdAt":"2018-03-11T07:46:07.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1188,"title":"Proposal: context-gated field promotion with runtime checking","state":"OPEN","comments":23,"participants":7,"reactions":25,"createdAt":"2020-08-28T19:52:35.000Z","labels":["feature","field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":823,"title":"Constant constructor call should be legal in another constant constructor definition.","state":"OPEN","comments":37,"participants":13,"reactions":25,"createdAt":"2014-09-16T11:25:33.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":171,"title":"Improved loop constructs and scoping.","state":"OPEN","comments":6,"participants":7,"reactions":25,"createdAt":"2019-01-10T13:25:50.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":117,"title":"Make it easy/efficient to create immutable collections via literals","state":"OPEN","comments":5,"participants":3,"reactions":25,"createdAt":"2018-11-29T16:40:10.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2709,"title":"Multiple upper bounds","state":"OPEN","comments":55,"participants":13,"reactions":24,"createdAt":"2022-12-10T03:24:24.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2537,"title":"A \"guard-let\"-like statement form","state":"OPEN","comments":46,"participants":15,"reactions":24,"createdAt":"2022-09-29T23:53:39.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1987,"title":"Add support for \"js tagged string like\" feature","state":"OPEN","comments":5,"participants":5,"reactions":24,"createdAt":"2017-08-27T10:13:57.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3065,"title":"Switch expressions with some cases that need a body","state":"OPEN","comments":55,"participants":9,"reactions":23,"createdAt":"2023-05-11T15:04:51.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3059,"title":"If-case expressions","state":"OPEN","comments":11,"participants":7,"reactions":23,"createdAt":"2023-05-11T03:28:38.000Z","labels":["feature","patterns","feature-completeness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3025,"title":"Self type","state":"OPEN","comments":12,"participants":7,"reactions":23,"createdAt":"2023-04-27T21:38:00.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2780,"title":"Make `MyEnum.aValue.anInstanceVariable` constant","state":"OPEN","comments":9,"participants":6,"reactions":23,"createdAt":"2023-01-18T20:54:56.000Z","labels":["small-feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2477,"title":"Non-growable list literal syntax","state":"OPEN","comments":37,"participants":13,"reactions":23,"createdAt":"2022-09-12T14:48:45.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2313,"title":"Conditional instance members and constructors","state":"OPEN","comments":11,"participants":3,"reactions":23,"createdAt":"2022-06-24T18:35:33.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2222,"title":"User-Defined Constant Functions","state":"OPEN","comments":2,"participants":3,"reactions":23,"createdAt":"2022-04-29T17:30:14.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2074,"title":"Support for Swift style if-let and guard-let constructs.","state":"OPEN","comments":22,"participants":5,"reactions":23,"createdAt":"2022-01-20T00:44:59.000Z","labels":["field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1988,"title":"Tagged strings","state":"OPEN","comments":19,"participants":11,"reactions":23,"createdAt":"2021-11-23T23:04:53.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1136,"title":"Add variable observers willSet didSet","state":"OPEN","comments":1,"participants":2,"reactions":23,"createdAt":"2020-08-06T09:43:34.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":50,"title":"Enums are too heavy for large-scale use, but are the only feature affording easy completion.","state":"OPEN","comments":18,"participants":11,"reactions":23,"createdAt":"2018-10-17T08:12:48.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4275,"title":"Allow punctuation based alternatives to keywords?","state":"OPEN","comments":15,"participants":10,"reactions":22,"createdAt":"2025-02-27T10:27:11.000Z","labels":["feature","enhanced-syntax","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3842,"title":"No implicit `dynamic`","state":"OPEN","comments":8,"participants":4,"reactions":22,"createdAt":"2024-05-28T07:15:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2269,"title":"Provide explicit access to the default values of parameters","state":"OPEN","comments":21,"participants":9,"reactions":22,"createdAt":"2022-06-01T12:57:15.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1711,"title":"Allow static and instance members to have the same name.","state":"OPEN","comments":15,"participants":8,"reactions":22,"createdAt":"2021-06-28T06:12:25.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1709,"title":"Glob or RegExp import/export","state":"OPEN","comments":10,"participants":4,"reactions":22,"createdAt":"2021-06-26T10:58:22.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1264,"title":"Make '(' and ')' optional in statements, make ';' optional at the end of lines","state":"OPEN","comments":7,"participants":5,"reactions":22,"createdAt":"2020-10-22T19:14:38.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":831,"title":"Optionally named parameters","state":"OPEN","comments":21,"participants":6,"reactions":22,"createdAt":"2020-02-10T17:30:40.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":678,"title":"Partial classes - feature proposal","state":"OPEN","comments":7,"participants":4,"reactions":22,"createdAt":"2019-11-11T23:47:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":260,"title":"Anonymous methods","state":"OPEN","comments":32,"participants":7,"reactions":22,"createdAt":"2019-03-08T17:19:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4205,"title":"Inline catching","state":"OPEN","comments":13,"participants":6,"reactions":21,"createdAt":"2024-12-13T03:24:43.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3964,"title":"Partial Record destructuring","state":"OPEN","comments":12,"participants":6,"reactions":21,"createdAt":"2024-07-05T13:49:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3834,"title":"Parameter default scopes","state":"OPEN","comments":152,"participants":12,"reactions":21,"createdAt":"2024-05-24T09:44:49.000Z","labels":["feature","dot-shorthands","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3680,"title":"Late parameters, late-init-query operator, parameter element","state":"OPEN","comments":24,"participants":10,"reactions":21,"createdAt":"2024-03-29T10:45:29.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3117,"title":"Allow Multi-Statement Bodies in Switch Expressions","state":"OPEN","comments":13,"participants":5,"reactions":21,"createdAt":"2023-05-29T01:29:24.000Z","labels":["state-duplicate","feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2033,"title":"Add \"asyncOr\", similar to \"async\", for FutureOr","state":"OPEN","comments":31,"participants":5,"reactions":21,"createdAt":"2021-12-20T14:18:15.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":607,"title":"Support for defining a new operator","state":"OPEN","comments":2,"participants":2,"reactions":21,"createdAt":"2019-10-07T05:00:39.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":190,"title":"operators to replace \"== null\" and \"!= null\"","state":"OPEN","comments":31,"participants":14,"reactions":21,"createdAt":"2019-01-23T09:42:08.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3356,"title":"Allow constant factory constructors to return a (potentially) constant value.","state":"OPEN","comments":9,"participants":4,"reactions":20,"createdAt":"2023-09-18T09:12:28.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3062,"title":"Boolean pattern matches","state":"OPEN","comments":7,"participants":5,"reactions":20,"createdAt":"2023-05-11T04:34:16.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2393,"title":"Remove type literals from the language.","state":"OPEN","comments":2,"participants":3,"reactions":20,"createdAt":"2022-08-08T08:34:18.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2194,"title":"Dart typeclasses","state":"OPEN","comments":1,"participants":2,"reactions":20,"createdAt":"2022-04-07T11:55:02.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1684,"title":"Constant parameters","state":"OPEN","comments":8,"participants":6,"reactions":20,"createdAt":"2021-06-16T14:50:19.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1398,"title":"Infer Future<void> for await Future.delayed()","state":"OPEN","comments":5,"participants":5,"reactions":20,"createdAt":"2021-01-12T01:03:36.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1397,"title":"Type promotion for `this`","state":"OPEN","comments":19,"participants":5,"reactions":20,"createdAt":"2021-01-07T14:08:12.000Z","labels":["small-feature","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":360,"title":"Request: calling a function only when a parameter is not null.","state":"OPEN","comments":14,"participants":8,"reactions":20,"createdAt":"2019-05-17T17:55:08.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4343,"title":"Case expressions","state":"OPEN","comments":2,"participants":3,"reactions":19,"createdAt":"2025-04-30T15:29:42.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3322,"title":"Allow shadowing local final variables","state":"OPEN","comments":19,"participants":9,"reactions":19,"createdAt":"2023-09-04T16:42:26.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3132,"title":"Inferred record types + optional fields for record expressions?","state":"OPEN","comments":8,"participants":5,"reactions":19,"createdAt":"2023-06-06T16:09:51.000Z","labels":["feature","records"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2401,"title":"Deprecate `new` keyword WRT `new SomeClass`","state":"OPEN","comments":12,"participants":9,"reactions":19,"createdAt":"2022-08-10T19:27:05.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2316,"title":"Allow `collection if` in argument lists","state":"OPEN","comments":15,"participants":5,"reactions":19,"createdAt":"2022-06-27T17:00:20.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":886,"title":"Add syntax for character code constants.","state":"OPEN","comments":19,"participants":8,"reactions":19,"createdAt":"2012-08-08T12:55:59.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":395,"title":"Dart thinks getter and function return dynamic unless return type specified","state":"OPEN","comments":13,"participants":11,"reactions":19,"createdAt":"2019-06-07T15:25:39.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":359,"title":"Allow referencing type parameters in static fields","state":"OPEN","comments":19,"participants":10,"reactions":19,"createdAt":"2019-05-16T23:50:13.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":345,"title":"Consider adding RAII","state":"OPEN","comments":13,"participants":5,"reactions":19,"createdAt":"2019-05-08T17:43:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4057,"title":"Reusable Pattern Matching","state":"OPEN","comments":17,"participants":4,"reactions":18,"createdAt":"2024-08-25T16:16:11.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3312,"title":"Allow `default` in a switch expression (as an alias for `_`)","state":"OPEN","comments":16,"participants":8,"reactions":18,"createdAt":"2023-08-30T15:34:15.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3306,"title":"Support ??= as default value operator","state":"OPEN","comments":8,"participants":4,"reactions":18,"createdAt":"2023-08-28T14:47:32.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2517,"title":"Discontinue old-style typedef.","state":"OPEN","comments":4,"participants":4,"reactions":18,"createdAt":"2022-09-23T17:02:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1774,"title":"Variadic Generics","state":"OPEN","comments":15,"participants":7,"reactions":18,"createdAt":"2021-08-01T12:49:24.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1559,"title":"\"not\" instead of \"!\" for negation / add new keyword \"not\"","state":"OPEN","comments":6,"participants":6,"reactions":18,"createdAt":"2021-04-04T16:09:35.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1478,"title":"String interpolation elements","state":"OPEN","comments":5,"participants":1,"reactions":18,"createdAt":"2021-02-26T09:09:34.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1402,"title":"Allow trailing commas in constructor initializer lists and generic type lists","state":"OPEN","comments":5,"participants":4,"reactions":18,"createdAt":"2021-01-15T09:01:58.000Z","labels":["feature","enhanced-syntax"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":416,"title":"Proposal: guards","state":"OPEN","comments":13,"participants":8,"reactions":18,"createdAt":"2019-06-21T18:05:32.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4246,"title":"Enhanced Constructors","state":"OPEN","comments":3,"participants":3,"reactions":17,"createdAt":"2025-01-31T19:14:47.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4124,"title":"Allow the type of an object pattern to be inferred when specified as `_`","state":"OPEN","comments":47,"participants":9,"reactions":17,"createdAt":"2024-10-08T14:21:29.000Z","labels":["small-feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2567,"title":"Algebraic Effect handlers","state":"OPEN","comments":16,"participants":7,"reactions":17,"createdAt":"2022-10-10T03:47:43.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":137,"title":"Problem: It is impossible to implement a Kotlin like copy method in Dart if you have \"nullable\" variables","state":"OPEN","comments":13,"participants":9,"reactions":17,"createdAt":"2018-12-17T09:45:06.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":58,"title":"Abbreviated formal parameter lists using kwargs","state":"OPEN","comments":9,"participants":7,"reactions":17,"createdAt":"2018-10-24T09:21:19.000Z","labels":["feature","state-backlog"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":43,"title":"Pipeline-operator for inline invocation of static functions.","state":"OPEN","comments":7,"participants":6,"reactions":17,"createdAt":"2018-10-11T09:50:03.000Z","labels":["feature","state-backlog"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4321,"title":"Introduce throws keyword (like Swift) for marking throwable functions","state":"OPEN","comments":16,"participants":11,"reactions":16,"createdAt":"2025-04-09T00:04:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4154,"title":"Augmentations","state":"OPEN","comments":2,"participants":2,"reactions":16,"createdAt":"2024-11-06T15:56:08.000Z","labels":["feature","augmentations"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3296,"title":"Set patterns","state":"OPEN","comments":8,"participants":4,"reactions":16,"createdAt":"2023-08-21T08:43:01.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3102,"title":"Pattern-esque syntax for terser named arguments/record fields","state":"OPEN","comments":4,"participants":4,"reactions":16,"createdAt":"2023-05-23T01:28:42.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2291,"title":"Variable tear off using setters","state":"OPEN","comments":10,"participants":7,"reactions":16,"createdAt":"2022-06-12T12:18:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":884,"title":"Interface default methods","state":"OPEN","comments":20,"participants":8,"reactions":16,"createdAt":"2020-03-16T08:32:31.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3673,"title":"Allow pattern matching on error handling","state":"OPEN","comments":0,"participants":1,"reactions":15,"createdAt":"2024-03-26T12:45:34.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2776,"title":"const parameters / type parameters","state":"OPEN","comments":16,"participants":6,"reactions":15,"createdAt":"2023-01-17T09:54:35.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2124,"title":"Switch elements - switches in collections, like `if` and `for`","state":"OPEN","comments":7,"participants":4,"reactions":15,"createdAt":"2022-02-22T10:44:09.000Z","labels":["patterns","feature-completeness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1941,"title":"Are import shorthands worth the cost in readability/cognitive load?","state":"OPEN","comments":114,"participants":15,"reactions":15,"createdAt":"2021-10-26T16:46:49.000Z","labels":["import-shorthand","unquoted-uris","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1911,"title":"Reference parameters","state":"OPEN","comments":9,"participants":4,"reactions":15,"createdAt":"2021-10-18T11:58:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":729,"title":"unify the syntax of if-statements, collection ifs and the ternary operator","state":"OPEN","comments":13,"participants":5,"reactions":15,"createdAt":"2019-12-07T10:12:57.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":351,"title":"Language suggestion: partial application for functions","state":"OPEN","comments":5,"participants":5,"reactions":15,"createdAt":"2019-05-12T10:29:06.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":299,"title":"Infer final fields as const for const constructors","state":"OPEN","comments":26,"participants":5,"reactions":15,"createdAt":"2019-04-02T09:11:50.000Z","labels":["enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4317,"title":"Optionally imported libraries.","state":"OPEN","comments":7,"participants":5,"reactions":14,"createdAt":"2025-04-03T14:31:47.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4298,"title":"Easier loop for maps","state":"OPEN","comments":26,"participants":7,"reactions":14,"createdAt":"2025-03-19T10:56:59.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4030,"title":"Better error handling - add try expression or if exception operator","state":"OPEN","comments":21,"participants":4,"reactions":14,"createdAt":"2024-08-13T18:27:01.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3058,"title":"Rename for initializing formals (and similar parameters)","state":"OPEN","comments":5,"participants":5,"reactions":14,"createdAt":"2023-05-10T17:47:57.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2943,"title":"Allow using \"Never\" expressions in map litteral \"if/else\" clauses","state":"OPEN","comments":3,"participants":3,"reactions":14,"createdAt":"2023-03-23T14:23:24.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2850,"title":"add a cheaper way to get the current source location","state":"OPEN","comments":15,"participants":4,"reactions":14,"createdAt":"2023-02-16T01:34:16.000Z","labels":["feature","customer-google3"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2774,"title":"Destructuring assignment in initializer lists.","state":"OPEN","comments":1,"participants":2,"reactions":14,"createdAt":"2023-01-15T22:18:31.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2656,"title":"A null-aware exception catching expression.","state":"OPEN","comments":7,"participants":4,"reactions":14,"createdAt":"2022-11-24T13:37:57.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2305,"title":"Loop counters","state":"OPEN","comments":2,"participants":3,"reactions":14,"createdAt":"2022-06-23T07:33:40.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2026,"title":"async by default","state":"OPEN","comments":34,"participants":7,"reactions":14,"createdAt":"2021-12-13T03:16:39.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1899,"title":"Allow constructors to restrict type arguments to class.","state":"OPEN","comments":4,"participants":4,"reactions":14,"createdAt":"2021-10-11T13:07:32.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":122,"title":"Dart should support `&&=` and `||=` operators.","state":"OPEN","comments":4,"participants":4,"reactions":14,"createdAt":"2018-12-03T13:14:09.000Z","labels":["feature","small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4141,"title":"Case expressions and return patterns","state":"OPEN","comments":38,"participants":4,"reactions":13,"createdAt":"2024-10-24T14:19:37.000Z","labels":["feature","patterns","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4117,"title":"Variable declaration to be 'final' by default ","state":"OPEN","comments":17,"participants":7,"reactions":13,"createdAt":"2024-10-02T21:07:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3441,"title":"Should we deprecate and remove support for switch case labels?","state":"OPEN","comments":10,"participants":7,"reactions":13,"createdAt":"2023-11-01T23:42:15.000Z","labels":["question","breaking-change"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3399,"title":"const-by-default constructors","state":"OPEN","comments":5,"participants":5,"reactions":13,"createdAt":"2023-10-12T23:20:07.000Z","labels":["enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1210,"title":"Binding expressions","state":"OPEN","comments":85,"participants":7,"reactions":13,"createdAt":"2020-09-09T12:07:27.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1044,"title":"type parameter in operator overloading","state":"OPEN","comments":9,"participants":8,"reactions":13,"createdAt":"2020-06-23T10:05:41.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":519,"title":"Allow imports in part files","state":"OPEN","comments":4,"participants":5,"reactions":13,"createdAt":"2019-08-12T18:22:37.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":517,"title":"Zero-cost Static Wrapper Types","state":"OPEN","comments":4,"participants":2,"reactions":13,"createdAt":"2019-08-12T12:43:09.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":352,"title":"Language suggestion: make IF and TRY/CATCH expressions (like Kotlin)","state":"OPEN","comments":5,"participants":4,"reactions":13,"createdAt":"2019-05-15T03:18:32.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4373,"title":"Function mixins","state":"OPEN","comments":2,"participants":3,"reactions":12,"createdAt":"2025-05-12T20:17:37.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3972,"title":"Support for Rust like #[cfg()] attributes","state":"OPEN","comments":10,"participants":6,"reactions":12,"createdAt":"2024-07-09T19:16:00.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3825,"title":"Protected instance members","state":"OPEN","comments":14,"participants":4,"reactions":12,"createdAt":"2024-05-22T08:56:12.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3430,"title":"Safe list destructuring","state":"OPEN","comments":3,"participants":3,"reactions":12,"createdAt":"2023-10-25T01:44:53.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3337,"title":"Modeling a \"Result\" type is possible, but difficult","state":"OPEN","comments":6,"participants":6,"reactions":12,"createdAt":"2023-09-10T20:26:06.000Z","labels":["request","patterns","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3245,"title":"Record named field shorthand","state":"OPEN","comments":0,"participants":2,"reactions":12,"createdAt":"2023-07-30T18:42:22.000Z","labels":["feature","records"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2603,"title":"[inline classes] Support simple union types?","state":"OPEN","comments":10,"participants":4,"reactions":12,"createdAt":"2022-11-01T17:54:16.000Z","labels":["question","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2506,"title":"[extension-types] Automatically provide access to some members of the representation interface","state":"OPEN","comments":11,"participants":3,"reactions":12,"createdAt":"2022-09-21T13:37:50.000Z","labels":["feature","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1479,"title":"Generalized string interpolation","state":"OPEN","comments":22,"participants":7,"reactions":12,"createdAt":"2021-02-26T09:20:20.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":622,"title":"Provide access to previous constructor initializers from later ones","state":"OPEN","comments":2,"participants":2,"reactions":12,"createdAt":"2019-10-11T22:45:07.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":404,"title":"Allow null-aware invocations.","state":"OPEN","comments":2,"participants":3,"reactions":12,"createdAt":"2019-06-17T07:54:27.000Z","labels":["state-backlog","nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":102,"title":"allow more compact definition of generic classes with type parameters that extend other generic classes","state":"OPEN","comments":5,"participants":5,"reactions":12,"createdAt":"2018-11-16T16:07:07.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":15,"title":"Problem: Syntax for optional parameters and required named parameters is verbose and unfamiliar","state":"OPEN","comments":50,"participants":16,"reactions":12,"createdAt":"2018-08-16T08:12:28.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4128,"title":"Pattern matching operator","state":"OPEN","comments":2,"participants":3,"reactions":11,"createdAt":"2024-10-11T08:51:19.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3704,"title":"Implicit coercion through implicit constructors.","state":"OPEN","comments":0,"participants":1,"reactions":11,"createdAt":"2024-04-14T10:04:07.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3210,"title":"Allow functions to be used directly as metadata annotations","state":"OPEN","comments":5,"participants":6,"reactions":11,"createdAt":"2023-07-10T14:58:19.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3106,"title":"Allow explicitly exposing a final/base class implementation for testing","state":"OPEN","comments":33,"participants":8,"reactions":11,"createdAt":"2023-05-23T20:03:22.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2664,"title":"Allow patterns matching in conditional expression condition.","state":"OPEN","comments":3,"participants":3,"reactions":11,"createdAt":"2022-11-29T13:31:44.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2430,"title":"Add support for optional trailing commas in type argument and type parameter lists.","state":"OPEN","comments":19,"participants":5,"reactions":11,"createdAt":"2022-08-23T23:15:40.000Z","labels":["feature","enhanced-syntax"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2119,"title":"Improve support for nested exceptions with stacktraces","state":"OPEN","comments":3,"participants":3,"reactions":11,"createdAt":"2022-02-16T20:56:11.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2077,"title":"Adding more null aware operators: ?+ , ?- , ?/ , ?*","state":"OPEN","comments":1,"participants":2,"reactions":11,"createdAt":"2022-01-26T10:44:48.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1950,"title":"Light-weight concurrency","state":"OPEN","comments":1,"participants":1,"reactions":11,"createdAt":"2021-11-01T04:49:00.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1723,"title":"Rethinking if-else","state":"OPEN","comments":6,"participants":4,"reactions":11,"createdAt":"2021-07-03T21:57:01.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1661,"title":"Make \"unawaited futures\" a language feature.","state":"OPEN","comments":17,"participants":5,"reactions":11,"createdAt":"2021-06-02T13:12:20.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1499,"title":"Add declaration keyword and swap type and variable names","state":"OPEN","comments":2,"participants":3,"reactions":11,"createdAt":"2021-03-07T05:38:06.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1387,"title":"Optional Generics?","state":"OPEN","comments":7,"participants":6,"reactions":11,"createdAt":"2020-12-27T01:27:05.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":993,"title":"implicit-dynamic: false, anonymous functions, and explicitly dynamic types require gratuitous verbosity in code","state":"OPEN","comments":4,"participants":3,"reactions":11,"createdAt":"2020-05-28T20:09:05.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":704,"title":"Non-interface class declarations.","state":"OPEN","comments":11,"participants":6,"reactions":11,"createdAt":"2019-11-25T15:47:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":157,"title":"Problem: Wrapping functions and forwarding arguments is noisy","state":"OPEN","comments":13,"participants":7,"reactions":11,"createdAt":"2018-12-28T20:43:12.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4150,"title":"Method-to-function conversion","state":"OPEN","comments":9,"participants":5,"reactions":10,"createdAt":"2024-11-04T13:50:55.000Z","labels":["feature","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4087,"title":"Type parameters with default value for classes","state":"OPEN","comments":7,"participants":4,"reactions":10,"createdAt":"2024-09-06T13:47:37.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3298,"title":"Add value types & value semantics for deep immutability (w/ compile-time enforcement)","state":"OPEN","comments":1,"participants":1,"reactions":10,"createdAt":"2023-08-21T23:45:11.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3050,"title":"[Field Promotion] Promotion of fields on final classes","state":"OPEN","comments":4,"participants":5,"reactions":10,"createdAt":"2023-05-08T21:11:45.000Z","labels":["field-promotion","class-modifiers"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2574,"title":"Alternative for \"required\" keyword ","state":"OPEN","comments":12,"participants":7,"reactions":10,"createdAt":"2022-10-16T21:26:08.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2536,"title":"\"while-case\" and \"do-while-case\"","state":"OPEN","comments":4,"participants":3,"reactions":10,"createdAt":"2022-09-29T23:41:57.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2433,"title":"Allow extractor patterns to use full selector chains.","state":"OPEN","comments":9,"participants":5,"reactions":10,"createdAt":"2022-08-24T11:34:12.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2412,"title":"Parallel asynchronous context operator","state":"OPEN","comments":1,"participants":2,"reactions":10,"createdAt":"2022-08-18T11:52:12.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2348,"title":"Add a `parse` static member to each enumerated type","state":"OPEN","comments":16,"participants":7,"reactions":10,"createdAt":"2022-07-19T08:00:49.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2219,"title":"Introduce additional primitive members","state":"OPEN","comments":9,"participants":4,"reactions":10,"createdAt":"2022-04-28T07:55:52.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2166,"title":"Extend existing class to use mixin?","state":"OPEN","comments":13,"participants":7,"reactions":10,"createdAt":"2022-03-23T14:42:18.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2133,"title":"Platform (iOS, Android, etc.) should be a useable condition for conditional imports","state":"OPEN","comments":15,"participants":6,"reactions":10,"createdAt":"2022-03-01T02:16:34.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1825,"title":"Allow `finally` keyword on `if` constructions","state":"OPEN","comments":6,"participants":7,"reactions":10,"createdAt":"2021-08-29T18:38:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1813,"title":"Implicitly add missing parameters to anonymous functions","state":"OPEN","comments":22,"participants":8,"reactions":10,"createdAt":"2021-08-23T19:16:31.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1674,"title":"Allow lower bounds on type parameters of functions","state":"OPEN","comments":8,"participants":5,"reactions":10,"createdAt":"2021-06-09T10:35:17.000Z","labels":["variance","small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1639,"title":"In a function, non-nullable optional parameters with default value should allow to be called with nullable values","state":"OPEN","comments":22,"participants":7,"reactions":10,"createdAt":"2021-05-19T13:08:38.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1592,"title":"Evaluate to null if condition is met","state":"OPEN","comments":7,"participants":5,"reactions":10,"createdAt":"2021-04-19T01:07:52.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1536,"title":"[NNBD] Type promotion fails for variable uses in anonymous functions","state":"OPEN","comments":11,"participants":6,"reactions":10,"createdAt":"2021-03-17T03:46:19.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1154,"title":"Smart cast fails without explicit generics","state":"OPEN","comments":1,"participants":2,"reactions":10,"createdAt":"2020-08-15T16:24:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":541,"title":"Mixin Composition Syntax","state":"OPEN","comments":14,"participants":6,"reactions":10,"createdAt":"2019-08-23T08:15:50.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":107,"title":"Make it easy to use type B in place of type A when there is an obvious/explicit conversion from B -> A","state":"OPEN","comments":1,"participants":2,"reactions":10,"createdAt":"2018-11-27T22:35:10.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":23,"title":"Logical compound assignment operators &&= and ||=","state":"OPEN","comments":5,"participants":4,"reactions":10,"createdAt":"2018-09-07T17:03:35.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4324,"title":"Namespaces, nested static declarations and nested scope imports.","state":"OPEN","comments":5,"participants":5,"reactions":9,"createdAt":"2025-04-11T08:59:13.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4286,"title":"Generalize exhaustiveness checking for non-trivial generics","state":"OPEN","comments":6,"participants":4,"reactions":9,"createdAt":"2025-03-06T09:59:11.000Z","labels":["request","exhaustiveness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4280,"title":"Support inferring the return value of functions","state":"OPEN","comments":7,"participants":6,"reactions":9,"createdAt":"2025-03-03T10:05:09.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4144,"title":"Allow constructors with a dotted name to omit the class name","state":"OPEN","comments":5,"participants":4,"reactions":9,"createdAt":"2024-10-29T11:40:20.000Z","labels":["small-feature","enhanced-syntax","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4135,"title":"For brevity, allow redirecting factory constructors to omit the formal parameter list","state":"OPEN","comments":4,"participants":4,"reactions":9,"createdAt":"2024-10-22T14:35:43.000Z","labels":["small-feature","enhanced-syntax","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4021,"title":"Allow use switch expression to init a const variable","state":"OPEN","comments":2,"participants":3,"reactions":9,"createdAt":"2024-08-07T02:13:13.000Z","labels":["request","patterns","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3995,"title":"More strict handling of exceptions","state":"OPEN","comments":1,"participants":2,"reactions":9,"createdAt":"2024-07-26T08:40:39.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3818,"title":"Feature Request: Add comptime Functionality Similar to ZigLang to Dart","state":"OPEN","comments":5,"participants":4,"reactions":9,"createdAt":"2024-05-17T16:00:06.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3366,"title":"Range syntax","state":"OPEN","comments":16,"participants":6,"reactions":9,"createdAt":"2023-09-25T15:47:33.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3197,"title":"Better int type support in Dart, now that targeting wasm is (nearly) possible","state":"OPEN","comments":9,"participants":4,"reactions":9,"createdAt":"2023-07-06T09:02:51.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3037,"title":"Allow constant sets to have duplicate values","state":"OPEN","comments":2,"participants":2,"reactions":9,"createdAt":"2023-05-03T13:04:30.000Z","labels":["feature","feature-completeness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3004,"title":"Allow a `const` record entry to be assignable to a `const`","state":"OPEN","comments":5,"participants":6,"reactions":9,"createdAt":"2023-04-17T21:53:32.000Z","labels":["request","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2581,"title":"Allow run-time-only assertion checking in constant constructors","state":"OPEN","comments":29,"participants":8,"reactions":9,"createdAt":"2022-10-20T16:22:54.000Z","labels":["small-feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2456,"title":"Support operator (parameter) overloading","state":"OPEN","comments":12,"participants":5,"reactions":9,"createdAt":"2022-09-02T08:29:45.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2234,"title":"Using constructor and function parameter lists as implicit parameter groups","state":"OPEN","comments":13,"participants":6,"reactions":9,"createdAt":"2022-05-12T10:32:10.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2142,"title":"Support nullableCallable?() for nullable/optional callbacks consistently to nullableCallable!()","state":"OPEN","comments":4,"participants":3,"reactions":9,"createdAt":"2022-03-06T12:22:07.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1982,"title":"Deprecate and remove adjacent strings","state":"OPEN","comments":16,"participants":10,"reactions":9,"createdAt":"2021-11-22T22:40:20.000Z","labels":["technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1563,"title":"Adding EnumMaps into Dart","state":"OPEN","comments":13,"participants":5,"reactions":9,"createdAt":"2021-04-07T15:27:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1533,"title":"Consider making inference treat raw types in contexts as non-constraining.","state":"OPEN","comments":1,"participants":3,"reactions":9,"createdAt":"2021-03-20T00:42:41.000Z","labels":["type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1467,"title":"Protected extension types or proper \"Value types\"","state":"OPEN","comments":10,"participants":6,"reactions":9,"createdAt":"2021-02-20T10:12:01.000Z","labels":["feature","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1299,"title":"Completer.complete() signature is not null-safe-friendly","state":"OPEN","comments":25,"participants":8,"reactions":9,"createdAt":"2020-11-10T17:38:14.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1238,"title":"short form to declare a local variable with an initializer as nullable","state":"OPEN","comments":3,"participants":4,"reactions":9,"createdAt":"2020-09-25T17:29:46.000Z","labels":["feature","nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":889,"title":"Add Decimal type","state":"OPEN","comments":14,"participants":4,"reactions":9,"createdAt":"2020-03-19T12:40:03.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":329,"title":"StatefulWidget syntax in Flutter requires 2 classes","state":"OPEN","comments":38,"participants":11,"reactions":9,"createdAt":"2019-04-24T17:28:26.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":132,"title":"hope for do expression","state":"OPEN","comments":11,"participants":8,"reactions":9,"createdAt":"2018-12-13T04:41:44.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4351,"title":"Dot shorthands: Could `.new(...)` be simplified to `.(...)`?","state":"OPEN","comments":5,"participants":4,"reactions":8,"createdAt":"2025-05-02T20:39:48.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4252,"title":"Nullifying Conditional Operator","state":"OPEN","comments":29,"participants":5,"reactions":8,"createdAt":"2025-02-03T12:59:50.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4213,"title":"Generic and conditional constructors","state":"OPEN","comments":4,"participants":4,"reactions":8,"createdAt":"2024-12-20T15:58:17.000Z","labels":["feature","static-extensions"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4207,"title":"Test Blocks In Src","state":"OPEN","comments":3,"participants":2,"reactions":8,"createdAt":"2024-12-15T05:04:31.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4177,"title":"Soft covariance modifier","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2024-11-26T02:28:59.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3714,"title":"Allow recursive typedef","state":"OPEN","comments":7,"participants":4,"reactions":8,"createdAt":"2024-04-19T00:30:59.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3505,"title":"Type Promotion For If-Case Statements","state":"OPEN","comments":3,"participants":4,"reactions":8,"createdAt":"2023-12-08T23:50:39.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3487,"title":"Replace record fields (`$1`, `$2`, etc.) with named fields if type contains field names (eg. `(int a, int b)`)","state":"OPEN","comments":28,"participants":10,"reactions":8,"createdAt":"2023-11-29T11:46:12.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3449,"title":"Object Spread operator","state":"OPEN","comments":3,"participants":2,"reactions":8,"createdAt":"2023-11-07T19:29:54.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3381,"title":"Allow extension types to declare abstract instance members.","state":"OPEN","comments":8,"participants":5,"reactions":8,"createdAt":"2023-10-04T10:28:54.000Z","labels":["request","extension-types","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3332,"title":"Value fields","state":"OPEN","comments":22,"participants":6,"reactions":8,"createdAt":"2023-09-08T18:13:47.000Z","labels":["field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3287,"title":"Inferring required named parameters without making function types a pitfall","state":"OPEN","comments":8,"participants":5,"reactions":8,"createdAt":"2023-08-17T21:26:44.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3103,"title":"`base mixin` that implements a `sealed class` counts towards exhaustiveness. Maybe allow `sealed mixin`.","state":"OPEN","comments":8,"participants":4,"reactions":8,"createdAt":"2023-05-20T21:07:28.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2601,"title":"Disallow identity-escapes in string literals.","state":"OPEN","comments":2,"participants":2,"reactions":8,"createdAt":"2022-11-01T10:27:22.000Z","labels":["feature","breaking-change"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2576,"title":"Allow user-defined classes to use `++` and `--` syntax.","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2022-10-18T09:25:55.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2509,"title":"Clarify the treatment of named parameters whose name starts with `_`","state":"OPEN","comments":32,"participants":6,"reactions":8,"createdAt":"2022-09-22T10:00:14.000Z","labels":["technical-debt","primary-constructors"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2476,"title":"Make unit tests a first class citizen","state":"OPEN","comments":7,"participants":4,"reactions":8,"createdAt":"2022-09-11T02:27:05.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1870,"title":"Further extending the meaning of `?` to check for nulls","state":"OPEN","comments":5,"participants":4,"reactions":8,"createdAt":"2021-09-24T16:27:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1851,"title":"Items from const literals should be able to be const as well","state":"OPEN","comments":9,"participants":8,"reactions":8,"createdAt":"2021-09-10T07:05:52.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1759,"title":"`async*` methods should start synchronously when their streams are listened to.","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2018-07-11T10:13:57.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1708,"title":"Add show as to import stmt.","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2021-06-26T09:18:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1611,"title":"Allow classes to have `self` references similar to `super`.","state":"OPEN","comments":12,"participants":5,"reactions":8,"createdAt":"2021-05-03T10:41:17.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1547,"title":"Provide a safer-for-nullability version of `as`","state":"OPEN","comments":20,"participants":7,"reactions":8,"createdAt":"2021-03-25T19:23:56.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1187,"title":"Provide a \"forced promotion\" operator with runtime checking.","state":"OPEN","comments":32,"participants":10,"reactions":8,"createdAt":"2020-08-28T05:22:59.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":844,"title":"Sugar for simulated higher-kinded types through type defunctionalization.","state":"OPEN","comments":1,"participants":1,"reactions":8,"createdAt":"2020-02-18T21:44:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":663,"title":"Constant from extension method?","state":"OPEN","comments":6,"participants":5,"reactions":8,"createdAt":"2019-11-05T01:15:33.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":367,"title":"[Proposal] Create a Dart class convenience constructor for optional parameters.","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2019-05-21T20:53:22.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":229,"title":"Use-site Invariance","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2019-02-20T14:05:30.000Z","labels":["feature","variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":217,"title":"Proposal: allow field formal parameters in setters","state":"OPEN","comments":4,"participants":4,"reactions":8,"createdAt":"2019-02-11T14:43:06.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":205,"title":"Enhanced Object Literals","state":"OPEN","comments":5,"participants":4,"reactions":8,"createdAt":"2019-02-04T21:39:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":194,"title":"Lazy evaluation of function arguments","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2019-01-24T12:48:43.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4308,"title":"Dart Override-like Augments","state":"OPEN","comments":8,"participants":5,"reactions":7,"createdAt":"2025-03-31T14:22:20.000Z","labels":["feature","augmentations"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4281,"title":"Support cloning functions","state":"OPEN","comments":9,"participants":5,"reactions":7,"createdAt":"2025-03-03T14:16:12.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4277,"title":"Implement type classes","state":"OPEN","comments":0,"participants":1,"reactions":7,"createdAt":"2025-02-28T23:42:27.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4153,"title":"Allow factory constructors to specify a return type","state":"OPEN","comments":3,"participants":3,"reactions":7,"createdAt":"2024-11-05T10:24:59.000Z","labels":["feature","enhanced-const","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3780,"title":"`enum`s extending other types","state":"OPEN","comments":5,"participants":3,"reactions":7,"createdAt":"2024-05-04T21:16:29.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3444,"title":"Forwarding functions","state":"OPEN","comments":37,"participants":6,"reactions":7,"createdAt":"2023-11-03T21:17:58.000Z","labels":["request","feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3329,"title":"Don't use 'iff'","state":"OPEN","comments":1,"participants":2,"reactions":7,"createdAt":"2023-09-07T11:38:10.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3097,"title":"Can't `rethrow` in switch expression","state":"OPEN","comments":6,"participants":5,"reactions":7,"createdAt":"2023-05-22T15:11:49.000Z","labels":["request","feature","small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3043,"title":"Nested cascades.","state":"OPEN","comments":8,"participants":8,"reactions":7,"createdAt":"2023-05-04T22:09:38.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3002,"title":"Generalized generative constructor initializer code.","state":"OPEN","comments":9,"participants":5,"reactions":7,"createdAt":"2023-04-17T11:38:53.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2410,"title":"Do we need a 'process if present' construct?","state":"OPEN","comments":3,"participants":3,"reactions":7,"createdAt":"2022-08-16T16:10:51.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2308,"title":"Some class members may not be valid for some actual type arguments: Check that situation statically","state":"OPEN","comments":2,"participants":2,"reactions":7,"createdAt":"2022-06-23T14:49:39.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1880,"title":"Forwarding function expressions and declarations","state":"OPEN","comments":18,"participants":2,"reactions":7,"createdAt":"2021-09-30T11:34:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1627,"title":"Cannot hide individual extension methods.","state":"OPEN","comments":6,"participants":6,"reactions":7,"createdAt":"2021-05-11T09:32:13.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1488,"title":"Allow asserts in redirecting generative constructors.","state":"OPEN","comments":0,"participants":1,"reactions":7,"createdAt":"2021-03-03T13:05:02.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1441,"title":"await for ... on ... catch syntax","state":"OPEN","comments":4,"participants":3,"reactions":7,"createdAt":"2021-02-07T15:58:20.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1439,"title":"type inference needlessly guesses nullable type","state":"OPEN","comments":2,"participants":4,"reactions":7,"createdAt":"2021-02-07T07:28:11.000Z","labels":["nnbd","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1408,"title":"Some improvements picked up from Kotlin language","state":"OPEN","comments":4,"participants":3,"reactions":7,"createdAt":"2021-01-17T11:53:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1399,"title":"Promoting type variables.","state":"OPEN","comments":0,"participants":1,"reactions":7,"createdAt":"2021-01-13T11:34:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1377,"title":"Flow analysis - keep non-nullability on join","state":"OPEN","comments":4,"participants":4,"reactions":7,"createdAt":"2020-12-18T03:43:03.000Z","labels":["request","feature","nnbd","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1363,"title":"Provide a way to group or compose annotations","state":"OPEN","comments":1,"participants":2,"reactions":7,"createdAt":"2020-12-10T23:37:14.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1357,"title":"Explicit reflection support","state":"OPEN","comments":0,"participants":1,"reactions":7,"createdAt":"2020-12-08T06:45:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1123,"title":"Arguments shorthand","state":"OPEN","comments":16,"participants":8,"reactions":7,"createdAt":"2020-07-30T03:56:38.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1007,"title":"Expose interfaces for enums and enum items for generic programming","state":"OPEN","comments":10,"participants":5,"reactions":7,"createdAt":"2020-06-04T13:00:05.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":920,"title":"Non-local returns","state":"OPEN","comments":6,"participants":4,"reactions":7,"createdAt":"2020-04-08T18:43:36.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":820,"title":"if - assignment operator","state":"OPEN","comments":7,"participants":4,"reactions":7,"createdAt":"2020-02-06T13:54:26.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":625,"title":"Const asserts","state":"OPEN","comments":2,"participants":3,"reactions":7,"createdAt":"2019-10-15T18:03:39.000Z","labels":["enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":466,"title":"Compiler support for implicit caller name","state":"OPEN","comments":3,"participants":4,"reactions":7,"createdAt":"2019-07-22T10:31:08.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":462,"title":"Create Auto Properties in Dart","state":"OPEN","comments":9,"participants":5,"reactions":7,"createdAt":"2019-07-21T19:01:39.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":308,"title":"Static classes, enabling compile-time elimination of objects","state":"OPEN","comments":5,"participants":4,"reactions":7,"createdAt":"2019-04-10T13:15:44.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":148,"title":"Case functions","state":"OPEN","comments":15,"participants":9,"reactions":7,"createdAt":"2018-12-18T18:21:18.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4155,"title":"Enhanced parts","state":"OPEN","comments":3,"participants":3,"reactions":6,"createdAt":"2024-11-06T16:00:05.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3963,"title":"Let a wildcard as an actual type argument indicate a request for inference","state":"OPEN","comments":2,"participants":3,"reactions":6,"createdAt":"2024-07-05T13:32:28.000Z","labels":["feature","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3795,"title":"Strict bounds","state":"OPEN","comments":3,"participants":2,"reactions":6,"createdAt":"2024-05-13T09:58:08.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3786,"title":"Implicitly create static methods as wrappers for instance methods","state":"OPEN","comments":7,"participants":5,"reactions":6,"createdAt":"2024-05-08T03:31:19.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3722,"title":"const extensions / `constexpr` in Dart","state":"OPEN","comments":1,"participants":2,"reactions":6,"createdAt":"2024-04-24T11:40:05.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3471,"title":"Require the static type of all expressions to be a subtype of their context; push coercions down to satisfy this.","state":"OPEN","comments":5,"participants":4,"reactions":6,"createdAt":"2023-11-16T04:59:16.000Z","labels":["feature","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3222,"title":"Infer the return type of a cycle-free arrow getter","state":"OPEN","comments":12,"participants":4,"reactions":6,"createdAt":"2023-07-18T15:48:06.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3179,"title":"`try <pattern>`","state":"OPEN","comments":4,"participants":2,"reactions":6,"createdAt":"2023-06-30T00:33:36.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3172,"title":"Primary constructor type parameter syntax","state":"OPEN","comments":8,"participants":4,"reactions":6,"createdAt":"2023-06-28T01:19:38.000Z","labels":["primary-constructors","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2988,"title":"Implementing \"!\" bang operator override","state":"OPEN","comments":10,"participants":4,"reactions":6,"createdAt":"2023-04-09T09:03:35.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2977,"title":"When flow analysis can't figure out that a switch is exhaustive, user experience is poor","state":"OPEN","comments":13,"participants":5,"reactions":6,"createdAt":"2023-04-03T19:12:38.000Z","labels":["request","patterns","flow-analysis","exhaustiveness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2534,"title":"Allow multiple arguments to index operators","state":"OPEN","comments":6,"participants":3,"reactions":6,"createdAt":"2022-09-29T23:27:55.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2156,"title":"[proposal] Enable `default` outside switch case","state":"OPEN","comments":4,"participants":4,"reactions":6,"createdAt":"2022-03-13T02:10:11.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2053,"title":"Interpolation is letting a null string bypass null safety feature","state":"OPEN","comments":52,"participants":15,"reactions":6,"createdAt":"2022-01-07T22:22:04.000Z","labels":["state-backlog","nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1991,"title":"Allow if-scoped variable declarations to help address field promotion","state":"OPEN","comments":22,"participants":11,"reactions":6,"createdAt":"2021-11-24T23:59:10.000Z","labels":["field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1845,"title":"Flow analysis feature request: on join, promote to LUB","state":"OPEN","comments":1,"participants":2,"reactions":6,"createdAt":"2021-09-07T13:55:45.000Z","labels":["feature","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1539,"title":"switch is exhaustive and default is redundant","state":"OPEN","comments":5,"participants":4,"reactions":6,"createdAt":"2021-03-23T17:58:08.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1458,"title":"Review increasing number of code generation use cases to understand potential missing capabilities of the language","state":"OPEN","comments":12,"participants":5,"reactions":6,"createdAt":"2021-02-17T13:40:30.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1353,"title":"Property mixins","state":"OPEN","comments":8,"participants":4,"reactions":6,"createdAt":"2020-12-07T02:47:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1321,"title":"Proposal: implicit return should return the value of the last expression","state":"OPEN","comments":7,"participants":7,"reactions":6,"createdAt":"2020-11-19T06:49:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1293,"title":"Should tuples be equivalent to argument lists?","state":"OPEN","comments":4,"participants":3,"reactions":6,"createdAt":"2020-11-07T12:05:41.000Z","labels":["question","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1292,"title":"Should there be a way to update a tuple?","state":"OPEN","comments":27,"participants":11,"reactions":6,"createdAt":"2020-11-06T17:10:23.000Z","labels":["question","records"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1052,"title":"Add an expression-local declaration (let-expression).","state":"OPEN","comments":3,"participants":3,"reactions":6,"createdAt":"2015-12-16T15:02:46.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":926,"title":"Consider supporting type promotion for `this`.","state":"OPEN","comments":0,"participants":1,"reactions":6,"createdAt":"2020-04-15T03:23:04.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":631,"title":"Automatically generating missing methods","state":"OPEN","comments":18,"participants":4,"reactions":6,"createdAt":"2019-10-18T17:47:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":371,"title":"Link time sets and maps","state":"OPEN","comments":6,"participants":4,"reactions":6,"createdAt":"2019-05-23T09:55:39.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":369,"title":"Provide a way to gather static initializers","state":"OPEN","comments":33,"participants":10,"reactions":6,"createdAt":"2019-05-22T14:10:35.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":169,"title":"Type decomposition","state":"OPEN","comments":2,"participants":2,"reactions":6,"createdAt":"2019-01-10T08:27:42.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":16,"title":"Solution: Make a parameter optional by giving it a default value","state":"OPEN","comments":10,"participants":5,"reactions":6,"createdAt":"2018-08-16T08:22:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4364,"title":"Type promotion for variables typed as a sealed class based on control flow","state":"OPEN","comments":5,"participants":4,"reactions":5,"createdAt":"2025-05-08T20:59:59.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4331,"title":"Lazy initialization functionality of 'late' keyword should be split into a dedicated 'lazy' keyword","state":"OPEN","comments":6,"participants":4,"reactions":5,"createdAt":"2025-04-17T00:53:59.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4261,"title":"Potentially constant statements and bodies.","state":"OPEN","comments":0,"participants":1,"reactions":5,"createdAt":"2025-02-11T13:47:42.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4251,"title":"Allow private names as named record field and parameter names.","state":"OPEN","comments":1,"participants":2,"reactions":5,"createdAt":"2025-02-02T13:33:16.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4247,"title":"`[` `]` automatic parameter brackets","state":"OPEN","comments":3,"participants":2,"reactions":5,"createdAt":"2025-01-31T22:14:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4197,"title":"Be more strict on inferred types with no constraints?","state":"OPEN","comments":5,"participants":3,"reactions":5,"createdAt":"2024-12-06T09:45:49.000Z","labels":["question","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4159,"title":"Allow `Function` getters to be overriden as actual functions","state":"OPEN","comments":9,"participants":3,"reactions":5,"createdAt":"2024-11-12T12:39:01.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4139,"title":"Support `continue` inside collection `for` expressions","state":"OPEN","comments":12,"participants":6,"reactions":5,"createdAt":"2024-10-24T12:51:35.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4040,"title":"Allow refutable patterns in assignment patterns.","state":"OPEN","comments":2,"participants":3,"reactions":5,"createdAt":"2024-08-16T13:42:52.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3970,"title":"Infer the type of an optional parameter from the default value","state":"OPEN","comments":1,"participants":2,"reactions":5,"createdAt":"2024-07-09T14:37:43.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3679,"title":"CSS-like inheritance of certain properties?","state":"OPEN","comments":9,"participants":3,"reactions":5,"createdAt":"2024-03-27T15:29:05.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3628,"title":"Support Abstract Type Members","state":"OPEN","comments":1,"participants":2,"reactions":5,"createdAt":"2024-02-24T19:58:18.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3620,"title":"Parametric type parameters?","state":"OPEN","comments":9,"participants":7,"reactions":5,"createdAt":"2024-02-21T10:42:29.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3165,"title":"Better static checking of erroneous API results","state":"OPEN","comments":5,"participants":3,"reactions":5,"createdAt":"2023-06-25T18:33:15.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3114,"title":"Consider a shorthand for boolean fields","state":"OPEN","comments":3,"participants":5,"reactions":5,"createdAt":"2023-05-27T01:03:42.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3075,"title":"Static classes","state":"OPEN","comments":5,"participants":3,"reactions":5,"createdAt":"2023-05-15T14:40:37.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3067,"title":"Permits clause for sealed types","state":"OPEN","comments":3,"participants":3,"reactions":5,"createdAt":"2023-05-11T15:16:22.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2952,"title":"Nested typedefs","state":"OPEN","comments":15,"participants":12,"reactions":5,"createdAt":"2014-03-11T20:16:59.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2751,"title":"Allow `throw` in potentially constant expressions.","state":"OPEN","comments":4,"participants":2,"reactions":5,"createdAt":"2023-01-02T14:48:43.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2347,"title":"Simplifying `const factory` declarations","state":"OPEN","comments":1,"participants":2,"reactions":5,"createdAt":"2022-07-16T21:33:46.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2253,"title":"User defined type promotion","state":"OPEN","comments":7,"participants":4,"reactions":5,"createdAt":"2022-05-20T19:15:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2155,"title":"[Feature Request] - Contracts","state":"OPEN","comments":2,"participants":3,"reactions":5,"createdAt":"2022-03-13T08:34:16.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2129,"title":"Consider pushing implicit conversions down","state":"OPEN","comments":6,"participants":5,"reactions":5,"createdAt":"2022-02-23T19:29:04.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2047,"title":"Infer generics in `is` check for type promotion","state":"OPEN","comments":19,"participants":8,"reactions":5,"createdAt":"2018-07-28T04:18:03.000Z","labels":["small-feature","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1658,"title":"Promotion and `??`","state":"OPEN","comments":3,"participants":3,"reactions":5,"createdAt":"2021-05-31T15:54:00.000Z","labels":["question","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1633,"title":"Generator expressions / Iterable literals and Stream literals","state":"OPEN","comments":16,"participants":6,"reactions":5,"createdAt":"2021-05-16T00:42:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1608,"title":"Using \"continue\" without label in a switch should continue with the next case","state":"OPEN","comments":4,"participants":5,"reactions":5,"createdAt":"2021-05-03T07:00:36.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1605,"title":"Allow final fields in mixins that get filled in classes using the mixin with Constructor(this.field) notation","state":"OPEN","comments":13,"participants":7,"reactions":5,"createdAt":"2021-04-27T12:23:51.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1574,"title":"Problem converting List<dynamic> to nested lists ","state":"OPEN","comments":16,"participants":4,"reactions":5,"createdAt":"2021-04-10T23:04:03.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1390,"title":"Overriding fields to be final","state":"OPEN","comments":13,"participants":6,"reactions":5,"createdAt":"2020-12-31T02:35:06.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1066,"title":"Synatctic feature requests.","state":"OPEN","comments":2,"participants":1,"reactions":5,"createdAt":"2020-07-05T04:03:23.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1005,"title":"Make maps not always use `null` as default value.","state":"OPEN","comments":14,"participants":8,"reactions":5,"createdAt":"2020-06-04T10:00:15.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":985,"title":"String canonicalization","state":"OPEN","comments":14,"participants":7,"reactions":5,"createdAt":"2020-05-26T09:27:08.000Z","labels":["question","specification","technical-debt","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":979,"title":"Add parallel keyword identifier which is opposite to await","state":"OPEN","comments":9,"participants":4,"reactions":5,"createdAt":"2020-05-21T19:54:36.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":855,"title":"About the Dart lang assignment of class private member variables and method","state":"OPEN","comments":20,"participants":6,"reactions":5,"createdAt":"2020-02-19T08:22:37.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":785,"title":"Specify grammar rules around `?[`","state":"OPEN","comments":0,"participants":1,"reactions":5,"createdAt":"2020-01-17T18:38:12.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":67,"title":"It's inconvenient to have to define typedefs at top-level if you only need them locally.","state":"OPEN","comments":6,"participants":4,"reactions":5,"createdAt":"2018-10-31T13:49:33.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4361,"title":"Should an `is T` test make `T?` a type of interest?","state":"OPEN","comments":14,"participants":4,"reactions":4,"createdAt":"2025-05-07T18:41:23.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4334,"title":"Allow an extension to provide the missing part of a getter/setter pair","state":"OPEN","comments":15,"participants":3,"reactions":4,"createdAt":"2025-04-23T09:46:03.000Z","labels":["extension-methods","small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4291,"title":"Support overriding a non-generic method with a generic one","state":"OPEN","comments":3,"participants":2,"reactions":4,"createdAt":"2025-03-09T17:41:12.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4283,"title":"Disallow overriding of runtimeType","state":"OPEN","comments":15,"participants":5,"reactions":4,"createdAt":"2025-03-04T20:39:41.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4238,"title":"Enhancing Annotations and Macros","state":"OPEN","comments":17,"participants":2,"reactions":4,"createdAt":"2025-01-25T13:24:34.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4219,"title":"Optional positional type parameters","state":"OPEN","comments":3,"participants":2,"reactions":4,"createdAt":"2024-12-30T17:55:08.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4215,"title":"Type patterns","state":"OPEN","comments":4,"participants":2,"reactions":4,"createdAt":"2024-12-22T02:27:57.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4204,"title":"Marginally better LUB for different instantiations of the same interface.","state":"OPEN","comments":6,"participants":2,"reactions":4,"createdAt":"2024-12-12T14:18:56.000Z","labels":["feature","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4180,"title":"Downwards and upwards inference with object patterns","state":"OPEN","comments":3,"participants":3,"reactions":4,"createdAt":"2024-11-27T02:34:51.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4102,"title":"Custom generators (like `async`, `async*` and `sync*`)","state":"OPEN","comments":4,"participants":3,"reactions":4,"createdAt":"2024-09-25T04:07:50.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4041,"title":"Proposal: `base` class members","state":"OPEN","comments":5,"participants":3,"reactions":4,"createdAt":"2024-08-16T18:56:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3956,"title":"Unusable inference in list pattern with `dynamic` value.","state":"OPEN","comments":7,"participants":2,"reactions":4,"createdAt":"2024-07-03T15:20:46.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3651,"title":"Support debugging Dart projects with compilation errors","state":"OPEN","comments":3,"participants":2,"reactions":4,"createdAt":"2024-03-12T15:53:02.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3625,"title":"FutureOr, access value synchronously if possible.","state":"OPEN","comments":51,"participants":8,"reactions":4,"createdAt":"2024-02-23T16:45:58.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3614,"title":"[extension types] Let `T` be assignable to a fully transparent extension type with representation type `T`","state":"OPEN","comments":10,"participants":3,"reactions":4,"createdAt":"2024-02-14T10:49:56.000Z","labels":["small-feature","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3602,"title":"Records with (comparable) positional fields should implement Comparable","state":"OPEN","comments":6,"participants":5,"reactions":4,"createdAt":"2024-02-01T08:56:06.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3520,"title":"Partial evaluation in Dart","state":"OPEN","comments":11,"participants":6,"reactions":4,"createdAt":"2023-12-15T23:27:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3368,"title":"Runtime-evaluated pattern matching function signatures.","state":"OPEN","comments":4,"participants":3,"reactions":4,"createdAt":"2023-09-26T04:44:48.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3280,"title":"`Never()` factory constructor","state":"OPEN","comments":7,"participants":6,"reactions":4,"createdAt":"2023-08-16T01:59:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3228,"title":"Disallow \"identity escapes\" and \"escaped whitespace\" in string literals.","state":"OPEN","comments":1,"participants":2,"reactions":4,"createdAt":"2023-07-19T14:09:51.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3181,"title":"Generic-constrained/subtype guarded instance members.","state":"OPEN","comments":2,"participants":2,"reactions":4,"createdAt":"2023-06-30T10:27:07.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3175,"title":"Allow a destructuring context in matching patterns","state":"OPEN","comments":5,"participants":3,"reactions":4,"createdAt":"2023-06-29T00:22:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3112,"title":"Missing documentation for project root path imports","state":"OPEN","comments":0,"participants":1,"reactions":4,"createdAt":"2023-05-26T16:14:15.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3100,"title":"Change flow analysis to assume sound null safety once unsound null safety support is fully removed","state":"OPEN","comments":5,"participants":3,"reactions":4,"createdAt":"2023-05-22T18:38:55.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3096,"title":"Can class fields be assigned in pattern assignments?","state":"OPEN","comments":6,"participants":5,"reactions":4,"createdAt":"2023-05-22T08:10:50.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3093,"title":"Allow collection `while` ","state":"OPEN","comments":3,"participants":3,"reactions":4,"createdAt":"2023-05-21T19:24:55.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3092,"title":"[Pattern-matching] Allow :name syntax in switch statements","state":"OPEN","comments":10,"participants":4,"reactions":4,"createdAt":"2023-05-21T07:08:01.000Z","labels":["request","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3091,"title":"Record feature requests","state":"OPEN","comments":3,"participants":3,"reactions":4,"createdAt":"2023-05-20T20:53:30.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3064,"title":"Why does pattern matching have such strict restrictions on non-constant values?","state":"OPEN","comments":6,"participants":4,"reactions":4,"createdAt":"2023-05-11T05:06:53.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3049,"title":"Should it be an error to match a non-List to a List pattern?","state":"OPEN","comments":12,"participants":6,"reactions":4,"createdAt":"2023-05-08T18:06:05.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3024,"title":"Rust traits in Dart","state":"OPEN","comments":9,"participants":4,"reactions":4,"createdAt":"2023-04-27T19:10:10.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3020,"title":"void returns in switch expressions","state":"OPEN","comments":6,"participants":5,"reactions":4,"createdAt":"2023-04-26T10:25:58.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2938,"title":"RegExp could express its capture groups as a type argument","state":"OPEN","comments":5,"participants":4,"reactions":4,"createdAt":"2023-03-22T10:32:29.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2831,"title":"Pseudo-methods, ::before and ::after","state":"OPEN","comments":5,"participants":5,"reactions":4,"createdAt":"2023-02-09T11:18:59.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2708,"title":"Add octal literals","state":"OPEN","comments":23,"participants":5,"reactions":4,"createdAt":"2022-12-09T23:56:06.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2580,"title":"User-defined mutating operators.","state":"OPEN","comments":1,"participants":2,"reactions":4,"createdAt":"2022-10-20T09:29:37.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2373,"title":"allow const modifier in function parameter and return type for creating const Widget with the parameter","state":"OPEN","comments":6,"participants":4,"reactions":4,"createdAt":"2022-07-30T05:50:31.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2336,"title":"Don't implictly use the Never type as default generic type parameter","state":"OPEN","comments":5,"participants":3,"reactions":4,"createdAt":"2022-07-07T14:11:40.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1884,"title":"Variables initialized in a try-block are awkward to use going forward","state":"OPEN","comments":6,"participants":4,"reactions":4,"createdAt":"2021-10-04T17:02:26.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1781,"title":"Object spread like TypeScript has","state":"OPEN","comments":2,"participants":3,"reactions":4,"createdAt":"2021-08-06T08:11:48.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1529,"title":"Allow mixins as superclasses. Deprecate using classes as mixins.","state":"OPEN","comments":2,"participants":2,"reactions":4,"createdAt":"2021-03-17T09:07:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1314,"title":"Records: type naming and nesting?","state":"OPEN","comments":1,"participants":2,"reactions":4,"createdAt":"2020-11-16T06:00:48.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1295,"title":"Obtaining a tuple of actual function arguments","state":"OPEN","comments":3,"participants":3,"reactions":4,"createdAt":"2020-11-07T21:45:18.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1294,"title":"Allow compile-time argument validity checks when said arguments are compile-time constant","state":"OPEN","comments":3,"participants":3,"reactions":4,"createdAt":"2020-11-07T19:12:01.000Z","labels":["enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1255,"title":"[Request] One extension for several types","state":"OPEN","comments":2,"participants":3,"reactions":4,"createdAt":"2020-10-09T15:00:40.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1158,"title":"could you support attribute macro like rust?","state":"OPEN","comments":2,"participants":3,"reactions":4,"createdAt":"2020-08-13T06:08:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":945,"title":"Enable 'as' and 'is' syntax for types available only at runtime","state":"OPEN","comments":1,"participants":2,"reactions":4,"createdAt":"2020-04-29T18:08:46.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":939,"title":"Dart uses raw URIs for library identity.","state":"OPEN","comments":22,"participants":9,"reactions":4,"createdAt":"2020-04-24T07:20:18.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":895,"title":"Compile-Time Ephemerons","state":"OPEN","comments":33,"participants":8,"reactions":4,"createdAt":"2020-03-25T17:02:50.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":584,"title":"Document best practices for filing feature requests and other language repo interactions","state":"OPEN","comments":1,"participants":2,"reactions":4,"createdAt":"2019-09-19T00:59:03.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":577,"title":"NNBD, non-nullable named parameters with defaults, and wrapping.","state":"OPEN","comments":15,"participants":8,"reactions":4,"createdAt":"2019-09-13T21:05:21.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":542,"title":"Allow referring to assigned variable within its initializer.","state":"OPEN","comments":8,"participants":5,"reactions":4,"createdAt":"2019-08-23T23:20:48.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":450,"title":"State management without boilerplate by introducing new language features","state":"OPEN","comments":5,"participants":4,"reactions":4,"createdAt":"2019-07-14T22:11:40.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":297,"title":"Compute a sound type for \"contravariant members\"","state":"OPEN","comments":1,"participants":1,"reactions":4,"createdAt":"2019-04-03T13:01:43.000Z","labels":["feature","variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":267,"title":"Importing name spaces locally","state":"OPEN","comments":3,"participants":1,"reactions":4,"createdAt":"2019-03-13T19:05:19.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":57,"title":"Abbreviated formal parameter lists","state":"OPEN","comments":2,"participants":3,"reactions":4,"createdAt":"2018-10-24T09:13:42.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4353,"title":"Support Intersection Types in Dart (e.g., T extends A & B, typedef AB = A & B)","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2025-05-03T19:34:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4319,"title":"Use LUB for or pattern variables","state":"OPEN","comments":4,"participants":4,"reactions":3,"createdAt":"2025-04-05T04:33:15.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4314,"title":"Extension types should always be able to implement their representation type","state":"OPEN","comments":3,"participants":3,"reactions":3,"createdAt":"2025-04-02T18:32:09.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4296,"title":"Minimal viable metaprogramming","state":"OPEN","comments":26,"participants":5,"reactions":3,"createdAt":"2025-03-16T19:43:41.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4260,"title":"Loosen const requirements for asserts","state":"OPEN","comments":3,"participants":3,"reactions":3,"createdAt":"2025-02-11T08:57:23.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4242,"title":"Allow annotations to reference non-const objects / Meta Objects","state":"OPEN","comments":0,"participants":1,"reactions":3,"createdAt":"2025-01-30T16:38:22.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4202,"title":"Allow setters to declare a return type of `Never`","state":"OPEN","comments":7,"participants":4,"reactions":3,"createdAt":"2024-12-10T20:37:22.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4146,"title":"Allow `codeUnitAt` to be constant for constant strings","state":"OPEN","comments":14,"participants":5,"reactions":3,"createdAt":"2024-10-29T14:47:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4062,"title":"Make pseudo-privately named actual arguments an error?","state":"OPEN","comments":9,"participants":5,"reactions":3,"createdAt":"2024-08-29T11:58:16.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4020,"title":"Allow `with` as function name","state":"OPEN","comments":4,"participants":3,"reactions":3,"createdAt":"2024-08-07T15:52:04.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3962,"title":"Support paired-up private and public variables: \"Private var, public final\"","state":"OPEN","comments":3,"participants":3,"reactions":3,"createdAt":"2024-07-05T09:58:16.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3839,"title":"Allow extension type to implement Record and Function types","state":"OPEN","comments":3,"participants":2,"reactions":3,"createdAt":"2024-05-26T23:54:08.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3816,"title":"Private to `this`","state":"OPEN","comments":6,"participants":3,"reactions":3,"createdAt":"2024-05-17T15:27:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3808,"title":"Macros: It is inconvenient to have to use Identifiers for everything, including what's inside the Dart SDK","state":"OPEN","comments":14,"participants":6,"reactions":3,"createdAt":"2024-05-15T14:55:08.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3804,"title":"New Operator: ?.() conditional function call","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2024-05-15T00:50:49.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3794,"title":"[extension-types] Allow a redirecting factory constructor to redirect to a representation type constructor","state":"OPEN","comments":9,"participants":4,"reactions":3,"createdAt":"2024-05-10T15:43:30.000Z","labels":["small-feature","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3745,"title":"A post constructor call-back (finalizer) would be a nice addition","state":"OPEN","comments":13,"participants":3,"reactions":3,"createdAt":"2024-05-01T10:41:48.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3658,"title":"Assignment expressions in `if`-statements don't correctly promote nullable variables","state":"OPEN","comments":5,"participants":4,"reactions":3,"createdAt":"2024-03-18T06:57:56.000Z","labels":["request","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3603,"title":"[extension-types] Allow redirecting factories to redirect to the representation type?","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2024-02-01T09:25:44.000Z","labels":["small-feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3533,"title":"Provide a way to \"unzip\" nullability by destructring a nullable record of values into a non-nullable record of nullable values","state":"OPEN","comments":5,"participants":4,"reactions":3,"createdAt":"2023-12-29T01:24:35.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3340,"title":"Address encapsulation challenges in abstract classes","state":"OPEN","comments":7,"participants":5,"reactions":3,"createdAt":"2023-09-12T12:10:00.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3240,"title":"Class instance extension members","state":"OPEN","comments":5,"participants":3,"reactions":3,"createdAt":"2023-07-26T16:28:12.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3206,"title":"Rethink `required` to be optional for non-nullable named parameters without default values","state":"OPEN","comments":2,"participants":2,"reactions":3,"createdAt":"2023-07-07T21:52:38.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3190,"title":"Rest for pattern matching positional record fields","state":"OPEN","comments":3,"participants":3,"reactions":3,"createdAt":"2023-07-02T19:34:09.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3163,"title":"Promote associated variables when passing a tuple to a switch","state":"OPEN","comments":3,"participants":3,"reactions":3,"createdAt":"2023-06-23T13:08:02.000Z","labels":["feature","flow-analysis","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3150,"title":"Implicit parameters to help reduce boilerplate","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2023-06-15T10:52:50.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3135,"title":"Allow subclassing a sealed class outside the library with an abstract class","state":"OPEN","comments":31,"participants":8,"reactions":3,"createdAt":"2023-06-07T04:29:57.000Z","labels":["request","class-modifiers-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3113,"title":"Class modifiers in multi-library packages","state":"OPEN","comments":9,"participants":5,"reactions":3,"createdAt":"2023-05-26T23:19:31.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3000,"title":"Could augmentation libraries and metaprogramming be released separately?","state":"OPEN","comments":3,"participants":2,"reactions":3,"createdAt":"2023-04-13T14:03:16.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2901,"title":"Deprecate function formal parameters and function type aliases.","state":"OPEN","comments":4,"participants":3,"reactions":3,"createdAt":"2023-03-11T14:07:32.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2875,"title":"Automatic determination of parameters based on the base class","state":"OPEN","comments":1,"participants":3,"reactions":3,"createdAt":"2023-02-28T20:56:29.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2860,"title":"assignment_to_final_local interaction with try/catch","state":"OPEN","comments":5,"participants":5,"reactions":3,"createdAt":"2023-02-23T21:47:19.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2858,"title":"IIFE tracking issue.","state":"OPEN","comments":0,"participants":1,"reactions":3,"createdAt":"2023-02-22T19:21:41.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2793,"title":"`export ... from` syntax","state":"OPEN","comments":0,"participants":1,"reactions":3,"createdAt":"2023-01-26T06:50:37.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2762,"title":"Support await keyword in cascade notation","state":"OPEN","comments":2,"participants":3,"reactions":3,"createdAt":"2023-01-10T12:15:35.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2647,"title":"Open enums.","state":"OPEN","comments":6,"participants":7,"reactions":3,"createdAt":"2022-11-22T09:57:50.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2643,"title":"[Feature Request] Inherit all props from parent","state":"OPEN","comments":2,"participants":3,"reactions":3,"createdAt":"2022-11-20T02:18:53.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2532,"title":"Variadic Generics","state":"OPEN","comments":3,"participants":3,"reactions":3,"createdAt":"2022-09-29T12:46:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2522,"title":"Disallow `var` or `final` in front of initializing or super parameters.","state":"OPEN","comments":7,"participants":5,"reactions":3,"createdAt":"2022-09-26T10:16:13.000Z","labels":["feature","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2503,"title":"Can we promote through record fields?","state":"OPEN","comments":4,"participants":5,"reactions":3,"createdAt":"2022-09-20T09:34:33.000Z","labels":["question","records"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2374,"title":"access final enum members as const","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2022-07-30T22:21:18.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2225,"title":"Allow late final fields on const classes","state":"OPEN","comments":14,"participants":7,"reactions":3,"createdAt":"2022-05-04T17:46:23.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2173,"title":"Add infer keyword","state":"OPEN","comments":13,"participants":8,"reactions":3,"createdAt":"2022-03-28T15:18:13.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2032,"title":"Generic method parameters need to be more tightly typed","state":"OPEN","comments":3,"participants":4,"reactions":3,"createdAt":"2021-12-18T09:47:07.000Z","labels":["request","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1891,"title":"Question: Why allow empty statements?","state":"OPEN","comments":7,"participants":6,"reactions":3,"createdAt":"2021-10-08T12:50:50.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1834,"title":"Don't let a field shadow a super-class field","state":"OPEN","comments":5,"participants":3,"reactions":3,"createdAt":"2021-09-02T01:30:35.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1808,"title":"Feedback on library groups for packages libraries","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2021-08-17T20:55:40.000Z","labels":["package-libraries"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1652,"title":"Statement metadata","state":"OPEN","comments":14,"participants":9,"reactions":3,"createdAt":"2021-05-27T15:04:51.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1619,"title":"An unexpected type error caused by legal code that uses covariance, type inference.","state":"OPEN","comments":16,"participants":5,"reactions":3,"createdAt":"2021-05-07T03:29:11.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1601,"title":"Class and function scoped typedefs bound to class/function generics","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2021-04-26T15:26:43.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1534,"title":"Inferencing implicit instance getters","state":"OPEN","comments":4,"participants":3,"reactions":3,"createdAt":"2021-03-20T12:12:20.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1503,"title":"Support compile-time source & bytecode aspect-oriented programming, similar to AspectJ","state":"OPEN","comments":5,"participants":5,"reactions":3,"createdAt":"2021-03-06T17:36:49.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1423,"title":"Proposal: worker isolates for (immutable) classes","state":"OPEN","comments":2,"participants":2,"reactions":3,"createdAt":"2021-01-30T20:44:37.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1385,"title":"More specific type inference instead of dynamic","state":"OPEN","comments":0,"participants":1,"reactions":3,"createdAt":"2020-12-27T10:21:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1324,"title":"Null safety feedback: No warning for dynamic?","state":"OPEN","comments":9,"participants":7,"reactions":3,"createdAt":"2020-11-20T06:43:49.000Z","labels":["nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1296,"title":"Perform tighter static checks on potentially constant expressions","state":"OPEN","comments":19,"participants":6,"reactions":3,"createdAt":"2020-11-09T12:03:42.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1137,"title":"Problem: contravariant return types on instance members interact badly with covariant generics","state":"OPEN","comments":10,"participants":7,"reactions":3,"createdAt":"2020-08-06T21:54:32.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1075,"title":"Make deprecated APIs expire based on language version.","state":"OPEN","comments":8,"participants":3,"reactions":3,"createdAt":"2020-07-08T11:29:19.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1036,"title":"Allow Map literals to support MapEntry","state":"OPEN","comments":2,"participants":3,"reactions":3,"createdAt":"2020-06-17T14:26:40.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":966,"title":"Extensions can't shadow members, leading to unexpected behaviour changes","state":"OPEN","comments":8,"participants":6,"reactions":3,"createdAt":"2020-05-15T23:53:25.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":893,"title":"Support rest parameter syntax like Javascript.","state":"OPEN","comments":6,"participants":4,"reactions":3,"createdAt":"2020-03-24T04:41:48.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":834,"title":"No return statement should be compile time error.","state":"OPEN","comments":2,"participants":3,"reactions":3,"createdAt":"2020-02-11T20:56:49.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":758,"title":"Sealed functions","state":"OPEN","comments":4,"participants":2,"reactions":3,"createdAt":"2019-12-20T15:33:26.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":757,"title":"Support restriction of access to `this` object","state":"OPEN","comments":0,"participants":1,"reactions":3,"createdAt":"2019-12-20T13:02:39.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":742,"title":"Allow generic type names to be overloaded by type parameter arity","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2019-12-14T18:23:11.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":726,"title":"Support Synchronous evaluation of FutureOr","state":"OPEN","comments":4,"participants":3,"reactions":3,"createdAt":"2019-12-06T14:13:33.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":605,"title":"Type inference fails to infer named argument type from default value","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2019-10-02T17:42:48.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":502,"title":"Grammar anomaly with `var` and parameters","state":"OPEN","comments":4,"participants":3,"reactions":3,"createdAt":"2019-08-07T15:09:50.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":443,"title":"Statements inside if conditions","state":"OPEN","comments":6,"participants":4,"reactions":3,"createdAt":"2019-07-08T16:49:30.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":418,"title":"Keyword to easily forward function calls proxy/delegate, mirrors intermediate","state":"OPEN","comments":15,"participants":5,"reactions":3,"createdAt":"2019-06-23T22:59:08.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":415,"title":"Problem: unable to soundly guard parts of programs","state":"OPEN","comments":3,"participants":2,"reactions":3,"createdAt":"2019-06-21T16:49:41.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":372,"title":"Allow n suffix for BigInt to match JavaScript","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2019-05-23T16:05:06.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":368,"title":"Add modifier for static variables and methods to be inherited by all subclasses.","state":"OPEN","comments":0,"participants":1,"reactions":3,"createdAt":"2019-05-22T02:48:03.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":343,"title":"Allow more concise function literal argument","state":"OPEN","comments":4,"participants":5,"reactions":3,"createdAt":"2019-05-08T09:58:03.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":288,"title":"Operator =?? (opposite to ??=)","state":"OPEN","comments":2,"participants":4,"reactions":3,"createdAt":"2019-03-23T17:10:20.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":183,"title":"Enums, value classes and beyond","state":"OPEN","comments":2,"participants":3,"reactions":3,"createdAt":"2019-01-17T14:54:26.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":59,"title":"Abbreviated formal parameter lists using `forward`","state":"OPEN","comments":1,"participants":2,"reactions":3,"createdAt":"2018-10-24T09:55:45.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4368,"title":"Change flow anaylsis to only promote to proper subtypes","state":"OPEN","comments":3,"participants":2,"reactions":2,"createdAt":"2025-05-09T15:44:45.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4287,"title":"How do we handle flow analysis of dead code?","state":"OPEN","comments":6,"participants":4,"reactions":2,"createdAt":"2025-03-06T11:17:46.000Z","labels":["question","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4269,"title":"Stream's `timeout` doesn't interrupt asynchronous generator functions.","state":"OPEN","comments":7,"participants":4,"reactions":2,"createdAt":"2025-01-07T15:18:26.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4249,"title":"Need better exhaustiveness for record-typed type matching.","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2025-02-01T13:04:58.000Z","labels":["request","patterns","exhaustiveness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4203,"title":"Fragmented declarations ","state":"OPEN","comments":12,"participants":4,"reactions":2,"createdAt":"2024-12-11T22:20:12.000Z","labels":["augmentations"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4199,"title":"Exhaustive check on generic sealed class is considered not exhaustive","state":"OPEN","comments":3,"participants":4,"reactions":2,"createdAt":"2024-12-06T22:41:17.000Z","labels":["request","exhaustiveness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4190,"title":"Pattern matching not properly considering \"!= null\" in the exhaustive check","state":"OPEN","comments":3,"participants":3,"reactions":2,"createdAt":"2024-12-02T13:43:01.000Z","labels":["patterns","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4165,"title":"Type Promotion on Record Attributes","state":"OPEN","comments":2,"participants":3,"reactions":2,"createdAt":"2024-11-19T19:28:40.000Z","labels":["feature","field-promotion","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4137,"title":"API variables","state":"OPEN","comments":8,"participants":4,"reactions":2,"createdAt":"2024-10-23T13:56:34.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4098,"title":"Trying to get `this` type is incredibly unweildy. Ref: `Self` from Rust","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2024-09-22T06:35:00.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4014,"title":"Make duplication of superinterfaces a warning, not an error","state":"OPEN","comments":3,"participants":4,"reactions":2,"createdAt":"2024-08-06T08:28:01.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3989,"title":"[analyzer] Switch cases for destructured records do not promote types","state":"OPEN","comments":5,"participants":7,"reactions":2,"createdAt":"2024-07-15T17:19:47.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3930,"title":"Allow recursive extension type","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2024-06-24T01:54:46.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3838,"title":"`identical`-based promotion","state":"OPEN","comments":0,"participants":1,"reactions":2,"createdAt":"2024-05-25T11:50:16.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3826,"title":"Impact of adding private members","state":"OPEN","comments":14,"participants":5,"reactions":2,"createdAt":"2024-05-22T09:21:52.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3797,"title":"Allow subtype constraint generation to strip null off of `Null`, following a similar rule for `dynamic` and `void`","state":"OPEN","comments":0,"participants":1,"reactions":2,"createdAt":"2024-05-13T16:27:16.000Z","labels":["small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3781,"title":"Class methods - static methods with access to generic type parameters.","state":"OPEN","comments":15,"participants":3,"reactions":2,"createdAt":"2024-05-06T15:38:32.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3730,"title":"Null-aware collection-for","state":"OPEN","comments":7,"participants":5,"reactions":2,"createdAt":"2024-04-27T20:37:07.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3684,"title":"`switch` should be considered exhaustive when an object of type S with a type parameter T shares T with one of its fields with type U, which is a sealed class, and has T checked against all possible types for U","state":"OPEN","comments":4,"participants":3,"reactions":2,"createdAt":"2024-04-01T12:05:33.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3683,"title":"`switch` should understand that when a field of an object with a parameter type T that shares T with one of its fields and the field is exhaustively checked it may be promoted","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2024-04-01T11:52:40.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3666,"title":"Resolve to non-`null` version of extension when available and criteria are met","state":"OPEN","comments":5,"participants":3,"reactions":2,"createdAt":"2024-03-19T17:48:43.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3633,"title":"Pattern matching non-exhaustive error on sealed class and multiple type parameters","state":"OPEN","comments":5,"participants":4,"reactions":2,"createdAt":"2024-02-28T11:16:44.000Z","labels":["request","exhaustiveness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3607,"title":"[extension-types] Allow implicit return mechanisms to use an extension type as if it were the representation type","state":"OPEN","comments":3,"participants":2,"reactions":2,"createdAt":"2024-02-02T21:30:42.000Z","labels":["small-feature","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3572,"title":"Consider using bounds information when computing the greatest closure","state":"OPEN","comments":2,"participants":3,"reactions":2,"createdAt":"2024-01-18T01:06:58.000Z","labels":["type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3563,"title":"(3.14,) == (3.14,) constant?","state":"OPEN","comments":9,"participants":4,"reactions":2,"createdAt":"2024-01-16T11:31:05.000Z","labels":["question","enhanced-const","records"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3547,"title":"Preserve type refinements in closures created past last assignment","state":"OPEN","comments":0,"participants":1,"reactions":2,"createdAt":"2024-01-08T16:12:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3532,"title":"Questions about \"extension types\"","state":"OPEN","comments":3,"participants":2,"reactions":2,"createdAt":"2023-12-22T19:56:40.000Z","labels":["feature","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3510,"title":"\"Infer this type\" for explicit generic types. ","state":"OPEN","comments":3,"participants":4,"reactions":2,"createdAt":"2023-12-12T13:16:26.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3447,"title":"`@pragma` for dart analyzer to hint null type promotion.","state":"OPEN","comments":6,"participants":4,"reactions":2,"createdAt":"2023-11-07T12:26:10.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3422,"title":"The \"base\" keyword requiring subclasses to also use \"base/sealed/final\" is inconvenient for testing purposes","state":"OPEN","comments":11,"participants":4,"reactions":2,"createdAt":"2023-10-22T18:51:03.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3410,"title":"Stop allowing void-to-void data transfer?","state":"OPEN","comments":10,"participants":5,"reactions":2,"createdAt":"2023-10-18T08:29:49.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3325,"title":"Consider allowing static fields and top level variables in the same library to be considered stable and promotable (if they’re final)","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2023-09-06T18:18:19.000Z","labels":["feature","field-promotion","flow-analysis","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3324,"title":"Look up a type variable at a given superinterface","state":"OPEN","comments":8,"participants":3,"reactions":2,"createdAt":"2023-09-06T14:08:09.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3292,"title":"Pattern matching brittleness","state":"OPEN","comments":13,"participants":6,"reactions":2,"createdAt":"2023-08-18T20:56:40.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3282,"title":"Adjust the last case in UP to use classes rather than types","state":"OPEN","comments":4,"participants":3,"reactions":2,"createdAt":"2023-08-16T13:02:56.000Z","labels":["feature","technical-debt","least-upper-bound"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3246,"title":"Allow `return;` in function returning `FutureOr<void>`.","state":"OPEN","comments":8,"participants":4,"reactions":2,"createdAt":"2023-07-27T03:37:14.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3242,"title":"Allow this.{field} in the constructor parameters to refer to fields declared in a mixin.","state":"OPEN","comments":4,"participants":4,"reactions":2,"createdAt":"2023-07-27T08:10:20.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3203,"title":"Make sure type-special-casing for numbers is updated to account for extension types.","state":"OPEN","comments":5,"participants":2,"reactions":2,"createdAt":"2023-07-07T14:51:31.000Z","labels":["extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3154,"title":"Library versioning","state":"OPEN","comments":4,"participants":3,"reactions":2,"createdAt":"2023-06-16T22:56:58.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3099,"title":"Propagate promotions out of cast patterns","state":"OPEN","comments":4,"participants":3,"reactions":2,"createdAt":"2023-05-22T17:49:23.000Z","labels":["patterns","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2968,"title":"Make it possible to mark an enum as \"extensible\"","state":"OPEN","comments":4,"participants":4,"reactions":2,"createdAt":"2023-03-30T17:55:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2945,"title":"[spec] Library version comments are not being ignored by the compiler.","state":"OPEN","comments":10,"participants":4,"reactions":2,"createdAt":"2023-03-24T11:51:12.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2920,"title":"[Class Modifiers] Consider allowing type aliases to remove capabilities.","state":"OPEN","comments":2,"participants":4,"reactions":2,"createdAt":"2023-03-16T00:27:12.000Z","labels":["class-modifiers-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2900,"title":"Symmetric equality","state":"OPEN","comments":3,"participants":3,"reactions":2,"createdAt":"2023-03-11T01:29:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2667,"title":"Allow const constructors on classes that use mixins that define only const instance fields","state":"OPEN","comments":3,"participants":3,"reactions":2,"createdAt":"2022-11-29T23:28:43.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2586,"title":"Continue to label that is not for a loop","state":"OPEN","comments":14,"participants":10,"reactions":2,"createdAt":"2022-10-24T20:13:05.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2464,"title":"Proposal: Allow \"late final\" on const classes and enhanced enums","state":"OPEN","comments":6,"participants":4,"reactions":2,"createdAt":"2022-09-04T20:36:59.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2434,"title":"SDK library versioning by language version","state":"OPEN","comments":4,"participants":3,"reactions":2,"createdAt":"2022-08-24T16:29:36.000Z","labels":["feature","language-versioning"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2391,"title":"Add an await pattern?","state":"OPEN","comments":8,"participants":4,"reactions":2,"createdAt":"2022-08-06T01:29:13.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2344,"title":"[Feature Request] Add \"placeholders\"","state":"OPEN","comments":7,"participants":3,"reactions":2,"createdAt":"2022-07-13T08:26:01.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2259,"title":"More complicated context type for `??`","state":"OPEN","comments":2,"participants":2,"reactions":2,"createdAt":"2022-05-25T22:31:54.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2221,"title":"Type aliases and type variable binding in pattern matching.","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2022-04-28T11:17:51.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2171,"title":"Prohibit \"automatic-dynamic\" behaviour for generic types","state":"OPEN","comments":8,"participants":5,"reactions":2,"createdAt":"2022-03-28T15:06:20.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2104,"title":"Should we support user-defined destructuring behavior and custom extractor pattern logic?","state":"OPEN","comments":19,"participants":5,"reactions":2,"createdAt":"2022-02-08T23:43:31.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1985,"title":"Tagged Strings proposal: return type other than `Object?` for values param?","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2021-11-23T20:54:11.000Z","labels":["tagged-strings"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1955,"title":"Argument namespaces","state":"OPEN","comments":12,"participants":10,"reactions":2,"createdAt":"2021-11-02T21:44:09.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1878,"title":"Separate context types into hints and requirements for inference.","state":"OPEN","comments":2,"participants":3,"reactions":2,"createdAt":"2021-09-30T10:49:44.000Z","labels":["feature","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1725,"title":"the type to index a map should be the key type of map?","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2021-07-05T06:20:12.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1648,"title":"[extension-types, views] Allow variable show","state":"OPEN","comments":5,"participants":2,"reactions":2,"createdAt":"2021-05-25T12:28:44.000Z","labels":["extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1629,"title":"CancelableOperation and CancelableCompleter should cancel/kill delayed Futures","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2021-05-12T14:40:24.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1596,"title":"Allow non-nullable setter along with nullable getter","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2021-04-21T17:33:25.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1562,"title":"Smart casts, type inference and markers","state":"OPEN","comments":10,"participants":3,"reactions":2,"createdAt":"2021-04-06T11:08:35.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1557,"title":"Infer most specific generic type for methods","state":"OPEN","comments":10,"participants":4,"reactions":2,"createdAt":"2021-04-01T20:12:32.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1544,"title":"Static Reflection (from proposal for Data Classes) + Expression Trees = ❤","state":"OPEN","comments":0,"participants":1,"reactions":2,"createdAt":"2021-03-24T17:38:30.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1491,"title":"[extension-types] Boxing?","state":"OPEN","comments":0,"participants":2,"reactions":2,"createdAt":"2021-03-04T15:48:35.000Z","labels":["question","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1411,"title":"Deferred importing a library makes it a breaking change to add an extension to the library.","state":"OPEN","comments":2,"participants":3,"reactions":2,"createdAt":"2021-01-20T12:35:48.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1370,"title":"value-free return should be allowed in function which returns FutureOr<void>","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2020-12-16T01:12:46.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1345,"title":"Allow redirecting factory constructor to omit parameters","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2020-12-02T07:52:52.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1265,"title":"In type conversion, Dart lacks \"as?\" and \"as!\"","state":"OPEN","comments":8,"participants":3,"reactions":2,"createdAt":"2020-10-23T02:44:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1150,"title":"List element repetition.","state":"OPEN","comments":2,"participants":2,"reactions":2,"createdAt":"2020-08-15T08:45:48.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1140,"title":"Named mixins","state":"OPEN","comments":14,"participants":4,"reactions":2,"createdAt":"2020-08-09T23:25:07.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1022,"title":"NNBD - null values with dynamic isn't a problem?","state":"OPEN","comments":12,"participants":7,"reactions":2,"createdAt":"2020-06-11T15:44:19.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":964,"title":"Perform async constructor arguments in parallel","state":"OPEN","comments":15,"participants":6,"reactions":2,"createdAt":"2020-05-15T01:40:56.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":796,"title":"Stronger static typing for implicit casts and generics","state":"OPEN","comments":11,"participants":6,"reactions":2,"createdAt":"2020-01-24T23:08:40.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":780,"title":"Allow parenthesized element expressions.","state":"OPEN","comments":6,"participants":3,"reactions":2,"createdAt":"2020-01-15T11:57:57.000Z","labels":["request","small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":745,"title":"Can we expect 'switch' operator rework?","state":"OPEN","comments":1,"participants":3,"reactions":2,"createdAt":"2019-12-15T17:43:21.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":679,"title":"Should we add support for preview releases in language versioning?","state":"OPEN","comments":10,"participants":6,"reactions":2,"createdAt":"2019-11-12T00:03:26.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":662,"title":"Implicit templates for performance guarantees","state":"OPEN","comments":1,"participants":2,"reactions":2,"createdAt":"2019-11-03T22:59:47.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":580,"title":"Should use-site variance include covariance and contravariance?","state":"OPEN","comments":3,"participants":3,"reactions":2,"createdAt":"2019-09-17T22:52:06.000Z","labels":["variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":562,"title":"can add \"/\" alias instead of package:xxxmypackageName","state":"OPEN","comments":4,"participants":3,"reactions":2,"createdAt":"2019-09-05T09:23:21.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":469,"title":"(Proposal) Default constructor with arguments","state":"OPEN","comments":0,"participants":2,"reactions":2,"createdAt":"2019-07-23T13:09:45.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":426,"title":"Proposal: argument passed by reference","state":"OPEN","comments":5,"participants":4,"reactions":2,"createdAt":"2019-06-26T08:23:23.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":354,"title":"Problem: Generated code does not contain Language Version overrides","state":"OPEN","comments":25,"participants":6,"reactions":2,"createdAt":"2019-05-15T13:11:44.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":306,"title":"Allow objects to be eliminated","state":"OPEN","comments":27,"participants":8,"reactions":2,"createdAt":"2019-04-10T10:51:31.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":259,"title":"Work with an anonymous object","state":"OPEN","comments":0,"participants":1,"reactions":2,"createdAt":"2019-03-08T16:17:37.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4375,"title":"Allow asserts in forwarding generative constructors.","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2025-05-14T11:53:31.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4366,"title":"Inference of type bounds in as checks","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2025-05-09T08:31:13.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4360,"title":"Extension type: Confusing behavior when an extension type both `implements` the wrapped type and define members with the same name","state":"OPEN","comments":6,"participants":3,"reactions":1,"createdAt":"2025-05-05T13:21:01.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4349,"title":"Implicitly required formal named parameters","state":"OPEN","comments":4,"participants":3,"reactions":1,"createdAt":"2025-05-02T08:39:53.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4158,"title":"Allow variable binding on String patterns","state":"OPEN","comments":13,"participants":3,"reactions":1,"createdAt":"2024-11-10T16:19:08.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4112,"title":"Syntactic sugar for `typedef`","state":"OPEN","comments":8,"participants":5,"reactions":1,"createdAt":"2024-09-30T11:16:07.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4037,"title":"Allow accessing `Enum.values` inside extensions and mixins","state":"OPEN","comments":8,"participants":4,"reactions":1,"createdAt":"2024-08-15T11:50:08.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3988,"title":"Generalize mixin inference to other superinterfaces?","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2024-07-17T17:11:07.000Z","labels":["small-feature","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3969,"title":"[parts-with-imports] Consider dropping the library name from the library directive","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2024-07-08T23:15:11.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3866,"title":"Unexpecte behavior in Exhaustiveness Checking With sealed classes and generics","state":"OPEN","comments":5,"participants":4,"reactions":1,"createdAt":"2024-06-02T21:09:55.000Z","labels":["request","exhaustiveness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3815,"title":"Make each \"parameter\" of a catch clause optional","state":"OPEN","comments":10,"participants":7,"reactions":1,"createdAt":"2024-05-16T20:53:09.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3789,"title":"[static-metaprogramming] Make \"Refactor -> Rename...\" convenient for code generated by Macros ","state":"OPEN","comments":16,"participants":5,"reactions":1,"createdAt":"2024-05-09T17:08:32.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3782,"title":"allow to destructure record types with positional fields","state":"OPEN","comments":9,"participants":5,"reactions":1,"createdAt":"2024-05-03T15:12:14.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3774,"title":"For loop is under-specified. Doesn't address \"for(type x...\", \"for(final x...\", \"for(expr...\" or \"for(const x ...\".","state":"OPEN","comments":3,"participants":4,"reactions":1,"createdAt":"2014-02-12T08:48:59.000Z","labels":["specification","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3736,"title":"Allow interface as its own construct (short for `abstract interface class`)","state":"OPEN","comments":4,"participants":3,"reactions":1,"createdAt":"2024-04-29T19:38:52.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3690,"title":"Augmentations should specify allowed partial declarations.","state":"OPEN","comments":13,"participants":5,"reactions":1,"createdAt":"2024-04-02T11:13:53.000Z","labels":["augmentations"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3681,"title":"More user-definable unary operators?","state":"OPEN","comments":4,"participants":2,"reactions":1,"createdAt":"2024-03-29T15:48:56.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3659,"title":"Eliminate symbol literals with several identifiers?","state":"OPEN","comments":14,"participants":6,"reactions":1,"createdAt":"2024-03-18T10:49:36.000Z","labels":["technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3653,"title":"Proposal: add a context for RHS of equality operations.","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2024-03-12T23:29:27.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3627,"title":"When are stack traces set on `Error`s.","state":"OPEN","comments":0,"participants":1,"reactions":1,"createdAt":"2024-02-24T15:11:02.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3624,"title":"Do extension types support statically checked variance?","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2024-02-22T15:19:44.000Z","labels":["question","variance","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3606,"title":"Macros: ergonomics of type checking (StaticType) in the current API","state":"OPEN","comments":2,"participants":2,"reactions":1,"createdAt":"2024-02-02T18:35:14.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3557,"title":"Allow using `super.parameter` when using `: this(...)` constructor","state":"OPEN","comments":3,"participants":2,"reactions":1,"createdAt":"2024-01-13T17:35:16.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3548,"title":"Why are implicit tear-offs discouraged?","state":"OPEN","comments":2,"participants":2,"reactions":1,"createdAt":"2024-01-08T17:02:47.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3527,"title":"Receiver Type Inference","state":"OPEN","comments":0,"participants":1,"reactions":1,"createdAt":"2023-12-19T15:13:47.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3468,"title":"Spec disallows `double ~/ double` as constant expression, implementations allow.","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2023-11-14T12:27:27.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3401,"title":"const_constructor_param_type_mismatch generates poor errors:","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2023-10-15T00:20:25.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3349,"title":"Extension type dispatch.","state":"OPEN","comments":6,"participants":2,"reactions":1,"createdAt":"2023-09-15T13:25:33.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3331,"title":"Don't invent a default value when no well-defined value is available","state":"OPEN","comments":7,"participants":2,"reactions":1,"createdAt":"2023-09-08T11:24:29.000Z","labels":["question","specification","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3323,"title":"Call out predecessors by names in super, to unhide methods and enhance readability.","state":"OPEN","comments":3,"participants":3,"reactions":1,"createdAt":"2023-09-05T15:49:04.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3299,"title":"Consider allowing \"name-last\" syntax for primary constructors","state":"OPEN","comments":4,"participants":4,"reactions":1,"createdAt":"2023-08-22T03:53:01.000Z","labels":["primary-constructors","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3286,"title":"A function field should be able to extend a method","state":"OPEN","comments":8,"participants":5,"reactions":1,"createdAt":"2023-08-17T17:05:15.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3250,"title":"Allow to resolve the inheritance signature conflict in derived class","state":"OPEN","comments":4,"participants":2,"reactions":1,"createdAt":"2023-08-02T23:54:19.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3247,"title":"Constant map literals should allow overriding keys from spreads","state":"OPEN","comments":3,"participants":4,"reactions":1,"createdAt":"2023-07-28T02:45:01.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3215,"title":"Can we allow `mixin on <SealedClass>`?","state":"OPEN","comments":6,"participants":2,"reactions":1,"createdAt":"2023-07-13T18:17:00.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3171,"title":"Should we allow eliding `final` on field declarations in enums and inline classes?","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2023-06-28T01:12:12.000Z","labels":["primary-constructors","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3136,"title":"Let record types have a constructor.","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2023-06-07T16:47:53.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3125,"title":"Cross-library private access grants","state":"OPEN","comments":5,"participants":3,"reactions":1,"createdAt":"2023-06-01T22:51:45.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3121,"title":"Allow `sealed base class`, because it is useful","state":"OPEN","comments":20,"participants":7,"reactions":1,"createdAt":"2023-05-31T18:07:42.000Z","labels":["request","class-modifiers-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3076,"title":"[Dart 3] Can't infer types in some cases","state":"OPEN","comments":6,"participants":4,"reactions":1,"createdAt":"2023-05-14T21:02:05.000Z","labels":["type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3007,"title":"Function generic type parameters are really inconvenient to extend/cast","state":"OPEN","comments":7,"participants":2,"reactions":1,"createdAt":"2023-04-18T15:46:03.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2963,"title":"Non exhaustive switch with generics (Recoverable Errors)","state":"OPEN","comments":17,"participants":8,"reactions":1,"createdAt":"2023-03-30T12:32:29.000Z","labels":["request","exhaustiveness"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2913,"title":"Equality argument context type `_`?","state":"OPEN","comments":0,"participants":1,"reactions":1,"createdAt":"2023-03-14T17:52:38.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2907,"title":"Where is `void` allowed in pattern matching?","state":"OPEN","comments":9,"participants":5,"reactions":1,"createdAt":"2023-03-13T09:13:49.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2880,"title":"Recursion Schemes in Dart.","state":"OPEN","comments":2,"participants":2,"reactions":1,"createdAt":"2023-03-02T14:20:35.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2856,"title":"Consider keeping supertype in joins","state":"OPEN","comments":11,"participants":4,"reactions":1,"createdAt":"2023-02-21T18:22:26.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2828,"title":"rename `nonLabelledStatement`","state":"OPEN","comments":0,"participants":2,"reactions":1,"createdAt":"2023-02-07T14:54:58.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2824,"title":"Should the use of both show and hide on an import be a syntax error?","state":"OPEN","comments":4,"participants":4,"reactions":1,"createdAt":"2023-02-07T03:33:58.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2820,"title":"IIFE type inference","state":"OPEN","comments":9,"participants":4,"reactions":1,"createdAt":"2023-02-05T18:15:27.000Z","labels":["feature","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2807,"title":"Make compile-time environment be required for compilation. (No delayed `.fromEnvironment`)","state":"OPEN","comments":7,"participants":7,"reactions":1,"createdAt":"2023-02-01T15:27:38.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2759,"title":"Inconsistencies around the interface of Null.","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2023-01-06T02:22:24.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2742,"title":"Inline getters (and possibly setters)","state":"OPEN","comments":4,"participants":3,"reactions":1,"createdAt":"2022-12-26T10:40:18.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2731,"title":"Strawman union proposal question regarding intersection","state":"OPEN","comments":21,"participants":6,"reactions":1,"createdAt":"2022-12-19T04:20:31.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2721,"title":"Can we specify that `{}` has type `LinkedHashMap`?","state":"OPEN","comments":9,"participants":5,"reactions":1,"createdAt":"2022-12-14T20:54:33.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2717,"title":"Allow `const`-constructor-class field initializers to be potentially constant expressions.","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2022-12-13T00:57:16.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2695,"title":"Strawman Nominal Union types proposal: Can two unions be assigned to each other?","state":"OPEN","comments":3,"participants":2,"reactions":1,"createdAt":"2022-12-08T07:00:05.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2564,"title":"Document the reasons of putting types before variables","state":"OPEN","comments":7,"participants":5,"reactions":1,"createdAt":"2022-10-07T19:22:11.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2530,"title":"Definite assignment for const","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2022-09-29T04:50:30.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2510,"title":"Class extension members","state":"OPEN","comments":8,"participants":3,"reactions":1,"createdAt":"2022-09-22T13:33:23.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2500,"title":"Some released features still appear under the `future releases` folder","state":"OPEN","comments":0,"participants":1,"reactions":1,"createdAt":"2022-09-18T09:12:26.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2465,"title":"Make void optional","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2022-09-04T22:37:01.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2445,"title":"Consider changing context type for index expressions","state":"OPEN","comments":5,"participants":5,"reactions":1,"createdAt":"2022-08-31T16:38:39.000Z","labels":["type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2400,"title":"Should non-virtual methods be generalized to classes?","state":"OPEN","comments":15,"participants":5,"reactions":1,"createdAt":"2022-08-10T16:38:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2394,"title":"Proposal: consider code unreachable more consistently due to types `Never` and `Null`","state":"OPEN","comments":3,"participants":3,"reactions":1,"createdAt":"2022-08-08T14:14:12.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2358,"title":"Disallow `part of dotted.name;`.","state":"OPEN","comments":6,"participants":4,"reactions":1,"createdAt":"2022-07-28T11:16:04.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2349,"title":"Syntax sugar to generate instance method tear-offs without an instance as closures","state":"OPEN","comments":4,"participants":4,"reactions":1,"createdAt":"2022-07-20T04:09:31.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2322,"title":"Current \"covariance by default\" paradigm is not respected by the compiler","state":"OPEN","comments":5,"participants":4,"reactions":1,"createdAt":"2022-06-29T00:40:11.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2288,"title":"Library versioning: Adding restrictions in later versions.","state":"OPEN","comments":3,"participants":2,"reactions":1,"createdAt":"2022-06-09T13:14:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2256,"title":"Generative enums don't work if used alongside const constructors of classes","state":"OPEN","comments":5,"participants":3,"reactions":1,"createdAt":"2022-05-24T10:33:24.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2246,"title":"classes with structural identity","state":"OPEN","comments":15,"participants":4,"reactions":1,"createdAt":"2022-05-16T08:49:23.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2220,"title":"What would be the macro equivalent of build_runner's built.yaml?","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2022-04-28T10:51:58.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2216,"title":"FutureOr conditional expression typing issue","state":"OPEN","comments":7,"participants":8,"reactions":1,"createdAt":"2017-02-28T21:10:04.000Z","labels":["least-upper-bound"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2215,"title":"Super-parameters de-sugaring example contains super-parameters","state":"OPEN","comments":0,"participants":1,"reactions":1,"createdAt":"2022-04-25T15:43:47.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2197,"title":"Introduce `let` construct for local destructuring","state":"OPEN","comments":18,"participants":8,"reactions":1,"createdAt":"2022-04-11T10:17:44.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2170,"title":"Unexpected type inference failure with self-referential types.","state":"OPEN","comments":3,"participants":5,"reactions":1,"createdAt":"2022-03-28T11:18:54.000Z","labels":["request","type-inference"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2070,"title":"Should we change import uri grammar and specification to match the current implementation or at least make it clear that although it's syntactically valid it's not valid in the \"official\" implementation?","state":"OPEN","comments":3,"participants":2,"reactions":1,"createdAt":"2022-01-14T17:27:08.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2066,"title":"cascade set and reset operator","state":"OPEN","comments":21,"participants":7,"reactions":1,"createdAt":"2022-01-12T13:42:45.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2000,"title":"`const` Constructor parameters are never considered `const`","state":"OPEN","comments":15,"participants":6,"reactions":1,"createdAt":"2021-12-01T03:17:22.000Z","labels":["request","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1975,"title":"An alternative syntax for if-variables","state":"OPEN","comments":27,"participants":7,"reactions":1,"createdAt":"2021-11-19T04:22:13.000Z","labels":["field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1968,"title":"Behavior of implicit coercions is inconsistent in the presence of assignments to promoted variables","state":"OPEN","comments":1,"participants":1,"reactions":1,"createdAt":"2021-11-09T15:22:24.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1940,"title":"How do we expect tools to handle import shorthands?","state":"OPEN","comments":9,"participants":8,"reactions":1,"createdAt":"2021-10-26T16:34:55.000Z","labels":["import-shorthand","unquoted-uris","brevity"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1807,"title":"Concerns around grouping package libraries by name","state":"OPEN","comments":2,"participants":2,"reactions":1,"createdAt":"2021-08-17T14:55:03.000Z","labels":["package-libraries"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1757,"title":"Alternative for the Private Imports proposal","state":"OPEN","comments":4,"participants":4,"reactions":1,"createdAt":"2021-07-26T17:39:35.000Z","labels":["modules"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1722,"title":"Null safety flow analysis on nullable object fields","state":"OPEN","comments":3,"participants":4,"reactions":1,"createdAt":"2021-07-03T16:20:21.000Z","labels":["field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1707,"title":"Add interfaces support in addition to abstract classes","state":"OPEN","comments":3,"participants":3,"reactions":1,"createdAt":"2021-06-25T21:58:20.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1698,"title":"Modules: Testing code likely needs special powers","state":"OPEN","comments":8,"participants":4,"reactions":1,"createdAt":"2021-06-22T15:33:56.000Z","labels":["modules"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1673,"title":"Passing additional named parameters to a callback/interface is painful","state":"OPEN","comments":9,"participants":6,"reactions":1,"createdAt":"2021-06-09T08:50:51.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1665,"title":"Make it safer to \"enter\" a (plain) view or an extension type","state":"OPEN","comments":5,"participants":3,"reactions":1,"createdAt":"2021-06-04T22:43:34.000Z","labels":["extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1642,"title":"Auto-Free of Pointers and other natively allocated memory","state":"OPEN","comments":4,"participants":3,"reactions":1,"createdAt":"2021-05-20T14:18:02.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1590,"title":"Avoid single void argument","state":"OPEN","comments":3,"participants":3,"reactions":1,"createdAt":"2021-04-16T09:44:49.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1558,"title":"Allow using null-safety declaration (e.g., Type?) in 2.10 for easy migration","state":"OPEN","comments":5,"participants":3,"reactions":1,"createdAt":"2021-04-02T02:51:13.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1541,"title":"Allow the default value of a parameter to reference a final variable.","state":"OPEN","comments":3,"participants":2,"reactions":1,"createdAt":"2021-03-24T09:42:47.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1537,"title":"[NNBD] Type promotion fails in async functions","state":"OPEN","comments":4,"participants":3,"reactions":1,"createdAt":"2021-03-17T03:24:30.000Z","labels":["variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1505,"title":"'null' isn't promoted to 'Null'.","state":"OPEN","comments":7,"participants":4,"reactions":1,"createdAt":"2021-03-09T13:37:17.000Z","labels":["question","nnbd","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1427,"title":"Enable functions to store data between calls / know from where they were called","state":"OPEN","comments":17,"participants":5,"reactions":1,"createdAt":"2021-02-01T17:21:24.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1360,"title":"\"ghost\" imports and \"ghost\" annotations","state":"OPEN","comments":7,"participants":5,"reactions":1,"createdAt":"2020-12-09T05:18:02.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1251,"title":"non-reified generic classes","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2020-10-05T22:26:13.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1229,"title":"Context aware extension methods","state":"OPEN","comments":4,"participants":3,"reactions":1,"createdAt":"2020-09-21T13:10:20.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1189,"title":"A fast and safe List.cast","state":"OPEN","comments":30,"participants":9,"reactions":1,"createdAt":"2020-08-28T20:51:39.000Z","labels":["nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1160,"title":"Promote late variables to definitely assigned on a successful read.","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2020-08-19T08:42:47.000Z","labels":["feature","nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1153,"title":"how can I make a generic class with multiple choice of type ?","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2020-08-16T08:10:56.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1144,"title":"Library Supports Feature X","state":"OPEN","comments":7,"participants":5,"reactions":1,"createdAt":"2020-08-10T20:46:13.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1135,"title":"clarify the stance on optimisations that change \"exceptional behaviour\"","state":"OPEN","comments":9,"participants":6,"reactions":1,"createdAt":"2020-08-05T19:12:17.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1101,"title":"[nnbd] Late Keyword is Redundant for Local Non-nullable variables without Intializers","state":"OPEN","comments":4,"participants":3,"reactions":1,"createdAt":"2020-07-17T17:21:44.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1100,"title":"[nnbd] Late Keyword is Redundant for Top-level variables with Intializers","state":"OPEN","comments":0,"participants":1,"reactions":1,"createdAt":"2020-07-17T17:21:41.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1058,"title":"Proposal: Allow downgrading of the language version (below the min sdk) with a field in the pubspec","state":"OPEN","comments":26,"participants":6,"reactions":1,"createdAt":"2020-07-01T16:50:45.000Z","labels":["nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1038,"title":"Can we improve inference for types which are comparable to a supertype?","state":"OPEN","comments":0,"participants":1,"reactions":1,"createdAt":"2020-06-18T08:49:54.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1035,"title":"Inference cannot solve for `T?` == `dynamic`","state":"OPEN","comments":12,"participants":4,"reactions":1,"createdAt":"2020-06-17T10:23:19.000Z","labels":["nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1018,"title":"How should we hint/lint about \"unnecessary\" null checks during the migration period?","state":"OPEN","comments":9,"participants":7,"reactions":1,"createdAt":"2020-06-10T13:03:37.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":951,"title":"Allow optional defaults to be properties of mandatory positional parameters","state":"OPEN","comments":3,"participants":2,"reactions":1,"createdAt":"2020-05-04T14:54:34.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":883,"title":"Declare extensions methods directly in class.","state":"OPEN","comments":7,"participants":6,"reactions":1,"createdAt":"2020-03-16T08:20:54.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":873,"title":"Proposal: support unboxed type.","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2020-03-05T14:19:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":862,"title":"For loop specification needs total rewrite","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2020-03-02T08:34:29.000Z","labels":["bug","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":852,"title":"Null aware ternary operator","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2020-02-22T04:30:35.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":822,"title":"Short form field expressions","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2020-02-06T18:12:36.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":803,"title":"Discards - Dummy type/ field ","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2020-01-29T21:18:43.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":701,"title":"Static \"reflection\" capability: general parsed data from classes, methods or vars","state":"OPEN","comments":5,"participants":2,"reactions":1,"createdAt":"2019-11-21T21:05:28.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":690,"title":"Make .runtimeType aware of necessary superclasses","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2019-11-18T09:37:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":674,"title":"Assert functions","state":"OPEN","comments":0,"participants":1,"reactions":1,"createdAt":"2019-11-09T22:21:40.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":575,"title":"Default argument values should imply \"const\" context","state":"OPEN","comments":3,"participants":4,"reactions":1,"createdAt":"2019-01-17T07:03:49.000Z","labels":["enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":572,"title":"Unspecify behavior of unconnected external functions","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2019-09-12T00:38:47.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":430,"title":"Create cascade operator for immutable classes that return mutated copies","state":"OPEN","comments":6,"participants":3,"reactions":1,"createdAt":"2019-06-27T04:11:14.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":429,"title":"Lowering the requirements for default const parameters","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2019-06-26T22:18:24.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":396,"title":"What if postfix \"!\" operator was the \"implicit operator\"?","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2019-06-11T20:00:29.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":389,"title":"amend language specification to permit `case null`","state":"OPEN","comments":2,"participants":3,"reactions":1,"createdAt":"2019-06-04T13:33:27.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":339,"title":"Variable/Attribute alias","state":"OPEN","comments":4,"participants":4,"reactions":1,"createdAt":"2019-05-02T03:18:29.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":305,"title":"Variadic constructors","state":"OPEN","comments":12,"participants":5,"reactions":1,"createdAt":"2019-04-09T14:30:30.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":301,"title":"Allow creating setter-names with symbol literals.","state":"OPEN","comments":3,"participants":3,"reactions":1,"createdAt":"2019-04-05T11:57:24.000Z","labels":["feature","small-feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":275,"title":"Problem: Existing interfaces with generic types may be only partially supportable with nullable types","state":"OPEN","comments":1,"participants":2,"reactions":1,"createdAt":"2019-03-18T21:17:47.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":160,"title":"`final` local variables and static immutability are related via closures","state":"OPEN","comments":1,"participants":1,"reactions":1,"createdAt":"2019-01-04T01:21:00.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":106,"title":"Unable to specify interfaces or mixins as type arguments","state":"OPEN","comments":7,"participants":5,"reactions":1,"createdAt":"2018-11-26T08:46:43.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":95,"title":"Specify that constant expressions of type `Type` and constant type expressions are canonicalized","state":"OPEN","comments":5,"participants":2,"reactions":1,"createdAt":"2018-11-12T13:53:10.000Z","labels":["specification","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":62,"title":"Conditional statements","state":"OPEN","comments":15,"participants":10,"reactions":1,"createdAt":"2018-10-25T21:58:29.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":4101,"title":"Making `redeclare` a language feature?","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2024-09-23T19:05:45.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3283,"title":"Can extension types declare abstract members?","state":"OPEN","comments":5,"participants":4,"reactions":0,"createdAt":"2023-08-17T03:13:52.000Z","labels":["question","extension-types","extension-types-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3275,"title":"Unsoundness in exhaustiveness with on clauses","state":"OPEN","comments":8,"participants":3,"reactions":0,"createdAt":"2023-08-15T14:42:23.000Z","labels":["bug","patterns","class-modifiers"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3274,"title":"Unwanted Object-inference induced type errors #2","state":"OPEN","comments":7,"participants":3,"reactions":0,"createdAt":"2023-08-15T13:29:08.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3267,"title":"Add possibility to access Enum values by its Type","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2023-08-13T21:10:27.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3264,"title":"[specification] Commentary contains wrong statement about inheritance","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2023-08-11T16:01:13.000Z","labels":["bug","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3259,"title":"Primitive types are too large, signed, and lack precision guarantees","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2023-08-09T20:45:56.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3254,"title":"Let the fields that begin with the underscore, the class migration starts with the modulable keyword","state":"OPEN","comments":4,"participants":2,"reactions":0,"createdAt":"2023-08-03T23:59:02.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3239,"title":"Promoting variables of type T? to a nullable type","state":"OPEN","comments":5,"participants":2,"reactions":0,"createdAt":"2023-07-26T12:54:25.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3233,"title":"How could macros and linters share logic?","state":"OPEN","comments":7,"participants":2,"reactions":0,"createdAt":"2023-07-25T11:47:16.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3220,"title":"Inherent extensions","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2023-07-17T21:06:51.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3209,"title":"Make default values of parameters parts of function type","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2023-07-08T12:38:58.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3208,"title":"class tear-off with extra parameters","state":"OPEN","comments":3,"participants":2,"reactions":0,"createdAt":"2023-07-07T17:29:54.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3207,"title":"Introduce abstraction for specifying \"class-like\" structure","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2023-07-08T07:45:33.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3141,"title":"Non-virtual and re-declared virtual members.","state":"OPEN","comments":4,"participants":4,"reactions":0,"createdAt":"2023-06-09T17:28:52.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3139,"title":"Add `isAbc` getters for enums per enum value","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2023-06-08T12:48:23.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3129,"title":"Allow destructuring into class fields","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2023-06-02T21:22:53.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3124,"title":"Unbounded implementation specific behavior.","state":"OPEN","comments":7,"participants":3,"reactions":0,"createdAt":"2023-06-01T20:35:45.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3108,"title":"[Class Modifiers] Should base be removable within the same library?","state":"OPEN","comments":13,"participants":5,"reactions":0,"createdAt":"2023-05-24T21:22:29.000Z","labels":["class-modifiers-later"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3057,"title":"`??=` fails to promote variable whose type is a nullable type parameter","state":"OPEN","comments":4,"participants":3,"reactions":0,"createdAt":"2023-05-09T23:27:15.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3039,"title":"[grammar] `selector`/`typeArgument`-related ambiguity.","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2023-05-03T22:34:35.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":3017,"title":"Adapt a generic type based on a potentially null value","state":"OPEN","comments":3,"participants":2,"reactions":0,"createdAt":"2023-04-23T13:09:16.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2949,"title":"How can we avoid test expectations based on flawed assumptions about internal behaviors?","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2023-03-25T01:26:12.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2942,"title":"[Class modifiers] a couple of typos/issues in the specification ","state":"OPEN","comments":3,"participants":4,"reactions":0,"createdAt":"2023-03-23T13:01:47.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2936,"title":"[patterns] Make `fromEnvironment` in map pattern keys an error?","state":"OPEN","comments":13,"participants":8,"reactions":0,"createdAt":"2023-03-21T13:50:56.000Z","labels":["question","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2927,"title":"Nameless classes","state":"OPEN","comments":4,"participants":5,"reactions":0,"createdAt":"2023-03-17T11:46:38.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2924,"title":"(How) should unreachable switch cases be reported?","state":"OPEN","comments":8,"participants":5,"reactions":0,"createdAt":"2023-03-16T20:30:56.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2921,"title":"Wrong type parameter variance error when passing generic function type to superclass constructor in Dart","state":"OPEN","comments":4,"participants":3,"reactions":0,"createdAt":"2023-03-16T12:52:03.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2899,"title":"Provide better support for default function parameters","state":"OPEN","comments":6,"participants":2,"reactions":0,"createdAt":"2023-03-10T17:26:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2898,"title":"[void] Make `typeTest`s and `typeCast`s support full `type`s","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2023-03-10T15:19:46.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2885,"title":"When the same operator is used consecutively, support to append the operatior at the end","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2023-03-04T02:20:45.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2876,"title":"Backends will expose whether assertions are enabled via a constant. Question: should this be specified?","state":"OPEN","comments":8,"participants":8,"reactions":0,"createdAt":"2023-03-01T17:16:41.000Z","labels":["question","feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2872,"title":"Add more tests for CONST_CANONICAL_TYPE","state":"OPEN","comments":3,"participants":4,"reactions":0,"createdAt":"2023-02-28T00:15:13.000Z","labels":["nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2863,"title":"Type inference seems to prioritize outer type information over inner type information. Is this intended?","state":"OPEN","comments":3,"participants":4,"reactions":0,"createdAt":"2023-02-24T22:54:49.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2848,"title":"IIFE insufficient flow analysis ","state":"OPEN","comments":12,"participants":4,"reactions":0,"createdAt":"2023-02-15T15:14:46.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2814,"title":"Code validation for Future<void> method(){...}  against Future<void> method() async {...} ","state":"OPEN","comments":6,"participants":4,"reactions":0,"createdAt":"2023-02-03T09:17:40.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2735,"title":"Whitespace is underspecified in punctuation","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2022-12-19T23:49:49.000Z","labels":["question","specification","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2693,"title":"[Patterns] Should List and/or Map patterns be considered for exhaustiveness?","state":"OPEN","comments":14,"participants":8,"reactions":0,"createdAt":"2022-12-07T18:40:02.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2654,"title":"Prohibit `extends` on public abstract classes with private abstract members.","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2022-11-23T18:10:51.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2653,"title":"Leaking uninitialized late fields in APIs considered dangerous?","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2022-11-23T12:58:52.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2641,"title":"Patterns spec uses an ill-defined notion of structural equivalence of types.","state":"OPEN","comments":18,"participants":5,"reactions":0,"createdAt":"2022-11-16T23:37:23.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2625,"title":"Clarify static checks on superinvocations in mixins: not checked at mixin application, only at run time","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2022-11-11T08:55:45.000Z","labels":["specification","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2623,"title":"[Patterns] pattern context type schema for object pattern is underspecified","state":"OPEN","comments":9,"participants":5,"reactions":0,"createdAt":"2022-11-10T21:04:51.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2622,"title":"Type promotion in pattern `&&`","state":"OPEN","comments":9,"participants":4,"reactions":0,"createdAt":"2022-11-10T15:21:20.000Z","labels":["feature","patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2540,"title":"[Question] Using `==` directive vs. in constant Set literal","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2022-09-30T18:17:12.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2424,"title":"How does implicit variable typing interact with variable type inconsistencies?","state":"OPEN","comments":11,"participants":4,"reactions":0,"createdAt":"2022-08-22T14:26:42.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2405,"title":"Add multimap literal","state":"OPEN","comments":6,"participants":1,"reactions":0,"createdAt":"2022-08-15T03:12:23.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2353,"title":"Not accurate specification of `for` loop","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2022-07-21T08:24:58.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2329,"title":"Add more options for type parameters","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2022-07-05T10:30:05.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2315,"title":"Enhanced enum type parameters do not work well in functions with switch statements","state":"OPEN","comments":8,"participants":5,"reactions":0,"createdAt":"2022-06-25T11:14:37.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2287,"title":"Can part directives be improved","state":"OPEN","comments":3,"participants":4,"reactions":0,"createdAt":"2022-06-08T16:15:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2286,"title":"[specification] Implicitly induced private members from a different library","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2022-06-08T12:37:13.000Z","labels":["question","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2282,"title":"[Spec] <declaration> production seems to be missing some types of modifiers","state":"OPEN","comments":5,"participants":2,"reactions":0,"createdAt":"2022-06-07T14:47:56.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2271,"title":"Specify the context type for the index in an increment/decrement operation","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2022-06-02T17:12:57.000Z","labels":["question","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2267,"title":"[specification] Missing support for `new` in enum entry","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2022-05-31T16:49:12.000Z","labels":["bug","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2265,"title":"Should having a concrete private member which does not implement the super interface signature(s) be a static error?","state":"OPEN","comments":4,"participants":3,"reactions":0,"createdAt":"2022-05-28T00:39:45.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2263,"title":"Should combined member signature computation be defined WRT the current library?","state":"OPEN","comments":12,"participants":4,"reactions":0,"createdAt":"2022-05-28T00:07:36.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2258,"title":"Promotion based on a non-null test: Implementation more flexible than specification","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2022-05-25T17:05:18.000Z","labels":["question","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2245,"title":"Parameter Groups ","state":"OPEN","comments":6,"participants":3,"reactions":0,"createdAt":"2022-05-16T07:24:44.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2204,"title":"resolve return type value with nested generics","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2022-04-16T00:10:47.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2200,"title":"[specification] Mention type inference for redirecting factories","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2022-04-14T08:15:59.000Z","labels":["bug","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2167,"title":"Report compile-time error for `var` in initializing formal parameter?","state":"OPEN","comments":4,"participants":4,"reactions":0,"createdAt":"2022-03-25T13:22:02.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2147,"title":"Finalizer/NativeFinalizer token -> peer ?","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2022-03-08T15:29:49.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2122,"title":"Rust like Default Trait for Dart?","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2022-02-20T13:47:04.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2121,"title":"Dart's difficulty to analyze code flows within a method that needs to return a specific object.","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2022-02-18T20:56:29.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2078,"title":"Should declaration variance support an explicit \"covariant\" marker?","state":"OPEN","comments":11,"participants":7,"reactions":0,"createdAt":"2022-01-27T05:23:36.000Z","labels":["variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2054,"title":"[Analyzer] Type inference for lists in for loops","state":"OPEN","comments":6,"participants":5,"reactions":0,"createdAt":"2022-01-08T05:08:56.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2046,"title":"Callable extensions can be invoked but cannot be passed as parameters.","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2022-01-03T02:20:10.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":2036,"title":"Dart conditional operators short form","state":"OPEN","comments":3,"participants":2,"reactions":0,"createdAt":"2021-12-22T15:35:18.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1996,"title":"Should abstract Enum have `values`?","state":"OPEN","comments":7,"participants":3,"reactions":0,"createdAt":"2021-11-29T16:53:30.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1983,"title":"Comments on tagged strings","state":"OPEN","comments":14,"participants":5,"reactions":0,"createdAt":"2021-11-23T11:09:29.000Z","labels":["tagged-strings"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1976,"title":"Promotion of variables after assignment in try","state":"OPEN","comments":6,"participants":4,"reactions":0,"createdAt":"2021-11-19T08:12:30.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1959,"title":"Allow `== null` to promote to `Null`","state":"OPEN","comments":9,"participants":4,"reactions":0,"createdAt":"2021-11-03T13:55:09.000Z","labels":["flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1951,"title":"The `for(;;)` loop is underspecified","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2021-11-01T08:55:20.000Z","labels":["bug","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1949,"title":"Extension methods prefers global over member","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2021-10-31T20:53:20.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1916,"title":"How do we restrict core libraries for macros?","state":"OPEN","comments":5,"participants":5,"reactions":0,"createdAt":"2021-10-20T00:04:32.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1907,"title":"Clarification on spec's text around implicit call tear-off","state":"OPEN","comments":3,"participants":2,"reactions":0,"createdAt":"2021-10-15T17:04:21.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1905,"title":"Map from optional arguments","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2021-10-13T12:27:23.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1886,"title":"Multiple imports in one statement (like variable declarations)","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2021-10-05T14:03:22.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1873,"title":"Should a cascade after an expression treated as an explicit `call` tearoff be an error?","state":"OPEN","comments":18,"participants":4,"reactions":0,"createdAt":"2021-09-28T03:05:57.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1852,"title":"**UP** ignores certain function supertypes","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2021-09-10T11:00:59.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1849,"title":"Function or Class generic not being derrived from List<Generic> type value properly.","state":"OPEN","comments":4,"participants":2,"reactions":0,"createdAt":"2021-09-08T15:19:58.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1844,"title":"Flow analysis feature: Assignment Promotion","state":"OPEN","comments":7,"participants":4,"reactions":0,"createdAt":"2021-09-07T12:40:00.000Z","labels":["feature","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1824,"title":"I have this doubt.","state":"OPEN","comments":7,"participants":5,"reactions":0,"createdAt":"2021-08-28T16:48:36.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1819,"title":"Resolve dispatch on type names","state":"OPEN","comments":12,"participants":3,"reactions":0,"createdAt":"2021-08-26T17:38:17.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1809,"title":"Feedback on private imports","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2021-08-17T21:47:45.000Z","labels":["package-libraries"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1784,"title":"Bundle getters and setters in imports and exports","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2021-08-06T16:10:45.000Z","labels":["small-feature","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1783,"title":"Perform the post-land corrections in #1782","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2021-08-06T15:38:24.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1773,"title":"Dynamic property access","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2021-07-31T06:33:34.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1767,"title":"Comments on private imports.","state":"OPEN","comments":9,"participants":5,"reactions":0,"createdAt":"2021-07-28T15:11:43.000Z","labels":["modules"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1766,"title":"Can't promote to generic argument","state":"OPEN","comments":6,"participants":4,"reactions":0,"createdAt":"2021-07-27T22:55:39.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1756,"title":"Cannot pass Type to a Generic Class.","state":"OPEN","comments":2,"participants":4,"reactions":0,"createdAt":"2021-07-25T09:04:57.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1753,"title":"Will modules facilitate partial classes? ","state":"OPEN","comments":12,"participants":3,"reactions":0,"createdAt":"2021-07-23T03:51:52.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1751,"title":"Compile time error is missing (opted out of null safety) or confusing (opted in to null safety) for generic type inference","state":"OPEN","comments":9,"participants":4,"reactions":0,"createdAt":"2021-07-21T21:02:23.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1749,"title":"Questions and comments about the modules proposal","state":"OPEN","comments":19,"participants":6,"reactions":0,"createdAt":"2021-07-20T18:48:23.000Z","labels":["modules"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1748,"title":"`assert` code block","state":"OPEN","comments":4,"participants":2,"reactions":0,"createdAt":"2021-07-17T12:55:00.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1724,"title":"Add swap macro","state":"OPEN","comments":4,"participants":3,"reactions":0,"createdAt":"2021-07-03T22:02:55.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1668,"title":"String? test(int? foo) {} should be error?","state":"OPEN","comments":4,"participants":5,"reactions":0,"createdAt":"2021-06-08T01:43:04.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1651,"title":"Unclear whether `.call` can be implicitly torn off when supplying type arguments","state":"OPEN","comments":7,"participants":4,"reactions":0,"createdAt":"2021-05-26T21:42:41.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1625,"title":"async generator cause racing condition to future","state":"OPEN","comments":1,"participants":1,"reactions":0,"createdAt":"2021-05-10T01:25:57.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1606,"title":"Type promotion fails with null checks in Iterable.where()","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2021-04-29T03:07:53.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1597,"title":"Dart cannot be sure that the method argument is not null if the argument is used in a closure","state":"OPEN","comments":3,"participants":4,"reactions":0,"createdAt":"2021-04-08T10:40:11.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1582,"title":"Type promotion doesn't work when a closure is used","state":"OPEN","comments":1,"participants":0,"reactions":0,"createdAt":"2021-04-14T04:21:28.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1581,"title":"List runtime subtyping error","state":"OPEN","comments":4,"participants":4,"reactions":0,"createdAt":"2021-04-13T22:15:27.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1577,"title":"Consider an \"in function variable type\" to be safe if nullable variable is assigned before function declaration.","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2021-04-11T20:31:26.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1572,"title":"Can not implicitly convert non-nullable generic argument to nullable ones","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2021-04-10T01:25:11.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1546,"title":"Allow a parameter to be required or not based on a generic type","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2021-03-25T13:16:24.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1532,"title":"Working code produces errors just from copy and pasting.","state":"OPEN","comments":5,"participants":2,"reactions":0,"createdAt":"2021-03-19T23:21:51.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1531,"title":"Null-safety when using externally specified code","state":"OPEN","comments":18,"participants":4,"reactions":0,"createdAt":"2021-03-19T16:33:01.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1528,"title":"Deferred import without prefix.","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2021-03-17T07:11:16.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1500,"title":"Analysis identifies how to reach null","state":"OPEN","comments":5,"participants":6,"reactions":0,"createdAt":"2021-03-06T18:56:56.000Z","labels":["request","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1471,"title":"Are setter names in the scope of an imported or exported library?","state":"OPEN","comments":7,"participants":3,"reactions":0,"createdAt":"2021-02-24T02:51:32.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1440,"title":"await for ... and ... syntax","state":"OPEN","comments":5,"participants":2,"reactions":0,"createdAt":"2021-02-07T15:53:08.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1432,"title":"Add syntax for grapheme clusters literals.","state":"OPEN","comments":11,"participants":4,"reactions":0,"createdAt":"2021-02-03T01:43:02.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1431,"title":"Is equality for int and double specified, implementation defined, or undefined?","state":"OPEN","comments":10,"participants":5,"reactions":0,"createdAt":"2021-02-03T00:05:42.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1425,"title":"Allow instantiation of a Type object","state":"OPEN","comments":7,"participants":5,"reactions":0,"createdAt":"2021-02-01T12:00:48.000Z","labels":["request","meta-classes","type-variable-constraints"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1421,"title":"The triple-shift language experiment is spelled \"tripple-shift\"","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2021-01-29T21:19:36.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1406,"title":"Should constant matchers be value matchers","state":"OPEN","comments":5,"participants":3,"reactions":0,"createdAt":"2021-01-15T16:04:49.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1401,"title":"Provide an expression to maybe provide an optional parameter","state":"OPEN","comments":15,"participants":6,"reactions":0,"createdAt":"2021-01-13T23:19:23.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1395,"title":"Abstract members in mixin could be considered as originating in interface","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2021-01-05T10:57:39.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1359,"title":"I want to provide annotations in my builder package while allowing users to keep it a `dev_dependency`","state":"OPEN","comments":4,"participants":3,"reactions":0,"createdAt":"2020-12-09T04:54:01.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1347,"title":"Report an error for incompatible signatures of operator `[]` / `[]=`?","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2020-12-04T09:38:12.000Z","labels":["question","nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1337,"title":"Null-aware operator with cascade doesn't work with newlines?","state":"OPEN","comments":8,"participants":4,"reactions":0,"createdAt":"2020-11-25T15:42:52.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1333,"title":"Should tearing off a call method be null-aware?","state":"OPEN","comments":21,"participants":6,"reactions":0,"createdAt":"2020-11-23T12:01:26.000Z","labels":["question","nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1331,"title":"EBNF for <identifier>","state":"OPEN","comments":4,"participants":3,"reactions":0,"createdAt":"2020-11-22T17:36:26.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1319,"title":"Records: Should functional update be allowed to change the type?","state":"OPEN","comments":6,"participants":4,"reactions":0,"createdAt":"2020-11-17T11:52:30.000Z","labels":["question","records"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1313,"title":"Records, how to assign them to Objects of the same shape","state":"OPEN","comments":4,"participants":4,"reactions":0,"createdAt":"2020-11-14T17:16:53.000Z","labels":["patterns"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1311,"title":"Function internal parameter type override.","state":"OPEN","comments":15,"participants":4,"reactions":0,"createdAt":"2020-11-13T11:16:03.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1307,"title":"Nullable variable not consistently promoted","state":"OPEN","comments":6,"participants":3,"reactions":0,"createdAt":"2020-11-11T16:27:02.000Z","labels":["nnbd","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1302,"title":"consider support conditional compile","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2020-11-11T06:40:13.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1288,"title":"Should override errors for abstract mixed-in declarations be omitted?","state":"OPEN","comments":5,"participants":3,"reactions":0,"createdAt":"2020-11-05T15:52:30.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1282,"title":"Optional assignment operator on object instantiation","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2020-11-03T06:45:45.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1261,"title":"Need to clarify the algorithm for deciding whether a type alias refers to itself","state":"OPEN","comments":8,"participants":4,"reactions":0,"createdAt":"2020-10-15T19:43:15.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1247,"title":"Flow analysis does not specify treatment of local variables in function literal bodies","state":"OPEN","comments":12,"participants":3,"reactions":0,"createdAt":"2020-10-02T14:42:22.000Z","labels":["specification","flow-analysis","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1244,"title":"Expand \"is\" for Types","state":"OPEN","comments":4,"participants":3,"reactions":0,"createdAt":"2020-09-30T02:11:43.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1239,"title":"Decide what advice and hints/lints we want around `late final` fields","state":"OPEN","comments":10,"participants":6,"reactions":0,"createdAt":"2020-09-25T17:30:59.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1227,"title":"Let types declare default values, and make them available on type variables.","state":"OPEN","comments":6,"participants":4,"reactions":0,"createdAt":"2020-09-18T00:56:15.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1216,"title":"Inline prefix operators","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2020-09-11T07:55:25.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1212,"title":"clarify the stance on minification/obfuscation and non-symbolic stack traces","state":"OPEN","comments":12,"participants":7,"reactions":0,"createdAt":"2020-09-10T06:50:35.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1198,"title":"Specification: Integrate feature spec about numbers with null safety","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2020-09-02T16:06:38.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1197,"title":"Dart will support dynamic proxy?","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2020-09-02T11:51:12.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1191,"title":"Binding type cast and type check.","state":"OPEN","comments":4,"participants":4,"reactions":0,"createdAt":"2020-08-31T13:04:31.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1165,"title":"Switch Cases & Enum & Extension Query","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2020-08-20T07:52:05.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1157,"title":"Language specification: Integrate feature specification about external and abstract variables","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2020-08-18T09:15:09.000Z","labels":["specification","nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1149,"title":"deferred loading: allow references to deferred types","state":"OPEN","comments":4,"participants":3,"reactions":0,"createdAt":"2020-08-14T17:40:45.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1138,"title":"Flow analysis spec and implementation discrepancy around never assigned variables","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2020-08-08T05:20:35.000Z","labels":["specification","nnbd","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1129,"title":"Dart numbers, when compiled to JavaScript, are unsigned 32 bit","state":"OPEN","comments":2,"participants":1,"reactions":0,"createdAt":"2020-08-04T08:40:09.000Z","labels":["bug","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1111,"title":"Restrict public parameter to subtype of actual parameter.","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2020-07-22T12:55:12.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1090,"title":"extension methods can break inheritance and interface implementation","state":"OPEN","comments":5,"participants":3,"reactions":0,"createdAt":"2020-07-14T03:41:07.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1080,"title":"Should parameters default to named or positional with enhanced default constructors?","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2020-07-09T17:12:08.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1068,"title":"Allow using a class with an empty const constructor as a mixin","state":"OPEN","comments":7,"participants":6,"reactions":0,"createdAt":"2020-07-06T20:36:31.000Z","labels":["request","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1040,"title":"Complex arithmetic and scalar operator overloading","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2020-06-18T19:43:17.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1039,"title":"Null safety: null-aware operator for constructor or function call arguments","state":"OPEN","comments":10,"participants":8,"reactions":0,"createdAt":"2020-06-18T10:00:02.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":1023,"title":"Promote final variables that are assigned a non-nullable value","state":"OPEN","comments":4,"participants":3,"reactions":0,"createdAt":"2020-06-11T18:35:20.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":987,"title":"Dart doesn't allow final class","state":"OPEN","comments":3,"participants":4,"reactions":0,"createdAt":"2020-05-27T04:44:36.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":981,"title":"handle functions with empty scope as top-level/static","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2020-05-24T15:06:55.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":956,"title":"`for` statement flow analysis","state":"OPEN","comments":1,"participants":3,"reactions":0,"createdAt":"2020-05-08T11:23:10.000Z","labels":["specification","nnbd","flow-analysis"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":947,"title":"Null-safety specification: Change LaTeX to markdown?","state":"OPEN","comments":7,"participants":5,"reactions":0,"createdAt":"2020-04-30T12:12:05.000Z","labels":["question","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":937,"title":"As specified, type inference infers no constraint for Null <: Future<T>","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2018-05-03T22:58:26.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":931,"title":"Variable redefinition","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2020-04-17T07:50:52.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":890,"title":"Experiencing Immutability Whiplash","state":"OPEN","comments":5,"participants":3,"reactions":0,"createdAt":"2020-03-22T22:10:01.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":869,"title":"Implicit superinitializers shouldn't be added to external constructors","state":"OPEN","comments":1,"participants":3,"reactions":0,"createdAt":"2020-03-04T21:35:29.000Z","labels":["bug","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":865,"title":"Compile-time error when using assignment initializer with anonymous functions.","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2020-03-03T03:10:53.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":849,"title":"prohibit or at least warn about type parameter names shadowing existing type names","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2020-02-21T08:30:41.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":806,"title":"Is is permissible for an implementation to have a single Error class?","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2020-01-30T16:09:10.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":800,"title":"map a List of Streams of different types to Array of Arrays of corresponding types","state":"OPEN","comments":3,"participants":2,"reactions":0,"createdAt":"2020-01-29T13:10:45.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":795,"title":"Variables for import's and export's path","state":"OPEN","comments":9,"participants":4,"reactions":0,"createdAt":"2020-01-24T18:51:44.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":769,"title":"Clarify spec of constructors which are induced implicitly by mixin application","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2020-01-06T13:01:46.000Z","labels":["bug","specification","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":728,"title":"Specify inference changes for NNBD","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2019-12-06T17:56:33.000Z","labels":["nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":694,"title":"Shorthand for creating constant identifier var (like an enum with a single value)","state":"OPEN","comments":6,"participants":4,"reactions":0,"createdAt":"2019-11-18T23:18:15.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":687,"title":"Invocation of static getters/setters/methods is unspecified","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2019-11-15T09:41:34.000Z","labels":["bug","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":682,"title":"Specify that writes in `late` local variable initializers disable promotion","state":"OPEN","comments":3,"participants":2,"reactions":0,"createdAt":"2019-11-13T23:12:08.000Z","labels":["specification","nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":675,"title":"Implicitly import \"import.dart\"","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2019-11-09T06:03:47.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":669,"title":"Unused parameters interact poorly with inference_failure_on_untyped_parameter","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2019-11-05T23:13:05.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":658,"title":"Should inference take variance into account to resolve under-constrained inference problems?","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2019-10-31T21:45:55.000Z","labels":["variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":656,"title":"Disallow metadata on the type parameters of a function type?","state":"OPEN","comments":10,"participants":4,"reactions":0,"createdAt":"2019-10-31T15:50:54.000Z","labels":["question"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":651,"title":"Least upper bound can produce malbounded types.","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2019-10-29T20:56:40.000Z","labels":["bug","technical-debt"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":648,"title":"Define how variance and late fields in NNBD interact","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2019-10-28T23:51:29.000Z","labels":["variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":644,"title":"Throw expressions are annoying to use on the right of if-null expressions","state":"OPEN","comments":5,"participants":4,"reactions":0,"createdAt":"2019-10-25T15:24:02.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":639,"title":"Eliminate unnecessary constraint on metadata?","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2019-10-24T08:18:07.000Z","labels":["feature","specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":621,"title":"Should we allow built-in identifiers to be used as prefixes?","state":"OPEN","comments":5,"participants":5,"reactions":0,"createdAt":"2019-10-11T18:14:12.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":609,"title":"Cascade operator: The expression here has a type of 'void', and therefore can't be used.","state":"OPEN","comments":9,"participants":4,"reactions":0,"createdAt":"2019-10-07T10:55:45.000Z","labels":["bug"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":608,"title":"Don't allow cascades on expressions with infix operators.","state":"OPEN","comments":8,"participants":5,"reactions":0,"createdAt":"2018-06-28T10:48:28.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":606,"title":"An async function declared to return FutureOr<T> can't directly return a T","state":"OPEN","comments":11,"participants":5,"reactions":0,"createdAt":"2019-10-03T21:45:33.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":589,"title":"implementation_meta_issue template missing codemirror and highlight.js","state":"OPEN","comments":7,"participants":4,"reactions":0,"createdAt":"2019-09-20T16:25:44.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":576,"title":"Proposal to add `throwIf` and `throwIfNot` like assert","state":"OPEN","comments":5,"participants":4,"reactions":0,"createdAt":"2019-09-13T15:28:36.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":571,"title":"Specify behavior of external constructors with initializing formals","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2019-09-12T00:06:28.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":564,"title":"Should use-site variance be allowed almost everywhere with legacy type variables?","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2019-09-06T12:55:56.000Z","labels":["question","variance"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":555,"title":"pls add syntactic sugars of List and Map","state":"OPEN","comments":7,"participants":3,"reactions":0,"createdAt":"2019-08-31T00:14:26.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":552,"title":"Error preventive measure for calling async function","state":"OPEN","comments":4,"participants":4,"reactions":0,"createdAt":"2019-08-29T07:10:27.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":525,"title":"Least upper bound bug? Analyzer and CFE infer \"Function\"","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2019-08-14T15:26:55.000Z","labels":["feature","least-upper-bound"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":504,"title":"Clarify specification of errors around exports of clashing names","state":"OPEN","comments":8,"participants":3,"reactions":0,"createdAt":"2019-08-07T23:50:16.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":480,"title":"Consider null-shorting a broader set of syntactic forms","state":"OPEN","comments":8,"participants":4,"reactions":0,"createdAt":"2019-07-31T09:56:03.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":477,"title":"Allow `covariant` to be used for arbitrary function types?","state":"OPEN","comments":5,"participants":3,"reactions":0,"createdAt":"2019-07-29T23:45:08.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":439,"title":"Add * operator to elements in a list","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2019-07-05T02:44:39.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":436,"title":"Should `Null` constrain inference?","state":"OPEN","comments":6,"participants":3,"reactions":0,"createdAt":"2019-07-01T23:12:42.000Z","labels":["nnbd"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":414,"title":"An object wrapping/mutating/decorating shortcut related to #40","state":"OPEN","comments":4,"participants":2,"reactions":0,"createdAt":"2019-06-21T16:14:27.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":411,"title":"Language features for FFI","state":"OPEN","comments":2,"participants":3,"reactions":0,"createdAt":"2019-06-20T11:46:05.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":383,"title":"No static error when iterating over a generic type, T.","state":"OPEN","comments":5,"participants":5,"reactions":0,"createdAt":"2019-05-31T15:28:42.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":362,"title":"Functions downcast","state":"OPEN","comments":4,"participants":2,"reactions":0,"createdAt":"2019-05-20T07:21:34.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":342,"title":"Function literal syntax improvements akin to Kotlin","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2019-05-05T08:39:34.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":328,"title":"Allow variables named `this`","state":"OPEN","comments":8,"participants":2,"reactions":0,"createdAt":"2019-04-24T14:00:43.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":322,"title":"Named functions","state":"OPEN","comments":3,"participants":3,"reactions":0,"createdAt":"2019-04-20T10:15:56.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":309,"title":"Implicit constructors in receiver/wrapper classes","state":"OPEN","comments":5,"participants":4,"reactions":0,"createdAt":"2019-04-10T15:26:08.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":295,"title":"Should we provide a dynamically checked function type?","state":"OPEN","comments":6,"participants":3,"reactions":0,"createdAt":"2019-04-03T09:00:39.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":286,"title":"Should language versioning require opting in to non-breaking changes?","state":"OPEN","comments":7,"participants":4,"reactions":0,"createdAt":"2019-03-22T23:22:28.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":274,"title":"Spec is unclear about scoping of variables declared in `for` loops","state":"OPEN","comments":3,"participants":4,"reactions":0,"createdAt":"2019-03-18T20:51:50.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":270,"title":"Make it possible to add new reserved words","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2019-03-15T17:32:27.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":266,"title":"Improve the support for managing name spaces locally","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2019-03-13T17:59:20.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":230,"title":"Omitting an argument name should not turn into a implicit dynamic with an argument named after a type","state":"OPEN","comments":5,"participants":4,"reactions":0,"createdAt":"2019-02-20T19:05:11.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":228,"title":"Eliminate excessive redundancy in the specification of semantically similar constructs","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2019-02-18T15:16:10.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":227,"title":"Make specification of desugaring well-defined.","state":"OPEN","comments":2,"participants":2,"reactions":0,"createdAt":"2019-02-18T12:33:51.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":193,"title":"What's the right syntax for an implicit cast/inline cast operator?","state":"OPEN","comments":10,"participants":5,"reactions":0,"createdAt":"2019-01-23T20:14:28.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":187,"title":"Allow non-const classes to be more efficient on const values","state":"OPEN","comments":3,"participants":4,"reactions":0,"createdAt":"2019-01-21T17:04:02.000Z","labels":["enhanced-const"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":178,"title":"Feature Request: implementation of crypto","state":"OPEN","comments":5,"participants":4,"reactions":0,"createdAt":"2019-01-15T13:49:11.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":176,"title":"Upper/lower bound computations in Dart give surprising results","state":"OPEN","comments":5,"participants":4,"reactions":0,"createdAt":"2019-01-11T22:24:18.000Z","labels":["state-backlog","least-upper-bound"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":150,"title":"Type inference defaulting to dynamic can cause hard to find issues","state":"OPEN","comments":6,"participants":5,"reactions":0,"createdAt":"2018-12-18T21:45:16.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":103,"title":"Support templated functions as function literals","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2018-11-19T12:59:14.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":101,"title":"Make adding a private field not a breaking change","state":"OPEN","comments":6,"participants":5,"reactions":0,"createdAt":"2018-11-14T21:40:19.000Z","labels":["request","state-backlog"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":92,"title":"Testing whether two `Type` instances reify the same type is expensive","state":"OPEN","comments":0,"participants":1,"reactions":0,"createdAt":"2018-11-12T11:31:32.000Z","labels":["request"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":52,"title":"Minimal non-integer-index Unicode grapheme cluster support.","state":"OPEN","comments":0,"participants":2,"reactions":0,"createdAt":"2018-10-17T12:30:54.000Z","labels":["feature"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":30,"title":"The spec should be clear about that mixins' interface can be implemented","state":"OPEN","comments":3,"participants":4,"reactions":0,"createdAt":"2018-09-26T16:26:28.000Z","labels":["specification"]}
{"date":"2025-05-16","repository":"dart-lang/language","id":28,"title":"Should mixin inference be performed on mixin superclass constraints?","state":"OPEN","comments":7,"participants":6,"reactions":0,"createdAt":"2018-09-15T01:21:56.000Z","labels":[]}
{"date":"2025-05-16","repository":"dart-lang/language","id":21,"title":"Additional static type checking","state":"OPEN","comments":1,"participants":2,"reactions":0,"createdAt":"2018-08-30T16:22:43.000Z","labels":["request"]}
