{"date":"2025-08-20","repository":"dart-lang/language","id":314,"title":"Add data classes","state":"OPEN","comments":387,"participants":90,"reactions":2265,"createdAt":"2017-10-31T11:42:42.000Z","labels":["request","data-classes","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":314,"title":"Add data classes","state":"OPEN","comments":387,"participants":90,"reactions":2265,"createdAt":"2017-10-31T11:42:42.000Z","labels":["request","data-classes","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":314,"title":"Add data classes","state":"OPEN","comments":387,"participants":90,"reactions":2265,"createdAt":"2017-10-31T11:42:42.000Z","labels":["request","data-classes","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":314,"title":"Add data classes","state":"OPEN","comments":387,"participants":90,"reactions":2265,"createdAt":"2017-10-31T11:42:42.000Z","labels":["request","data-classes","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1482,"title":"Static Metaprogramming","state":"OPEN","comments":598,"participants":91,"reactions":1691,"createdAt":"2021-03-01T16:08:58.000Z","labels":["state-rejected","feature","static-metaprogramming"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1482,"title":"Static Metaprogramming","state":"OPEN","comments":598,"participants":91,"reactions":1691,"createdAt":"2021-03-01T16:08:58.000Z","labels":["state-rejected","feature","static-metaprogramming"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1482,"title":"Static Metaprogramming","state":"OPEN","comments":598,"participants":91,"reactions":1691,"createdAt":"2021-03-01T16:08:58.000Z","labels":["state-rejected","feature","static-metaprogramming"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1482,"title":"Static Metaprogramming","state":"OPEN","comments":598,"participants":91,"reactions":1691,"createdAt":"2021-03-01T16:08:58.000Z","labels":["state-rejected","feature","static-metaprogramming"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":69,"title":"Optional Semicolons","state":"OPEN","comments":184,"participants":66,"reactions":1262,"createdAt":"2018-10-31T14:07:35.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":69,"title":"Optional Semicolons","state":"OPEN","comments":184,"participants":66,"reactions":1262,"createdAt":"2018-10-31T14:07:35.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":69,"title":"Optional Semicolons","state":"OPEN","comments":184,"participants":66,"reactions":1262,"createdAt":"2018-10-31T14:07:35.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":69,"title":"Optional Semicolons","state":"OPEN","comments":184,"participants":66,"reactions":1262,"createdAt":"2018-10-31T14:07:35.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":723,"title":"Static extension methods","state":"OPEN","comments":130,"participants":47,"reactions":1197,"createdAt":"2019-12-06T08:20:43.000Z","labels":["feature","static-extensions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":723,"title":"Static extension methods","state":"OPEN","comments":130,"participants":47,"reactions":1197,"createdAt":"2019-12-06T08:20:43.000Z","labels":["feature","static-extensions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":723,"title":"Static extension methods","state":"OPEN","comments":130,"participants":47,"reactions":1197,"createdAt":"2019-12-06T08:20:43.000Z","labels":["feature","static-extensions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":723,"title":"Static extension methods","state":"OPEN","comments":130,"participants":47,"reactions":1197,"createdAt":"2019-12-06T08:20:43.000Z","labels":["feature","static-extensions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":357,"title":"Dot shorthands: Allow for shorter dot syntax to access enum values","state":"OPEN","comments":342,"participants":43,"reactions":1097,"createdAt":"2019-05-16T17:52:45.000Z","labels":["feature","dot-shorthands","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":357,"title":"Dot shorthands: Allow for shorter dot syntax to access enum values","state":"OPEN","comments":342,"participants":43,"reactions":1097,"createdAt":"2019-05-16T17:52:45.000Z","labels":["feature","dot-shorthands","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":357,"title":"Dot shorthands: Allow for shorter dot syntax to access enum values","state":"OPEN","comments":342,"participants":43,"reactions":1097,"createdAt":"2019-05-16T17:52:45.000Z","labels":["feature","dot-shorthands","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":357,"title":"Dot shorthands: Allow for shorter dot syntax to access enum values","state":"OPEN","comments":342,"participants":43,"reactions":1097,"createdAt":"2019-05-16T17:52:45.000Z","labels":["feature","dot-shorthands","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":83,"title":"Sum/union types and type matching","state":"OPEN","comments":142,"participants":48,"reactions":551,"createdAt":"2018-11-05T06:02:31.000Z","labels":["request","union-types"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":83,"title":"Sum/union types and type matching","state":"OPEN","comments":142,"participants":48,"reactions":551,"createdAt":"2018-11-05T06:02:31.000Z","labels":["request","union-types"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":83,"title":"Sum/union types and type matching","state":"OPEN","comments":142,"participants":48,"reactions":551,"createdAt":"2018-11-05T06:02:31.000Z","labels":["request","union-types"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":83,"title":"Sum/union types and type matching","state":"OPEN","comments":142,"participants":48,"reactions":551,"createdAt":"2018-11-05T06:02:31.000Z","labels":["request","union-types"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":356,"title":"Abstract static methods","state":"OPEN","comments":71,"participants":27,"reactions":415,"createdAt":"2019-05-16T14:15:17.000Z","labels":["request","meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":356,"title":"Abstract static methods","state":"OPEN","comments":71,"participants":27,"reactions":415,"createdAt":"2019-05-16T14:15:17.000Z","labels":["request","meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":356,"title":"Abstract static methods","state":"OPEN","comments":71,"participants":27,"reactions":415,"createdAt":"2019-05-16T14:15:17.000Z","labels":["request","meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":356,"title":"Abstract static methods","state":"OPEN","comments":71,"participants":27,"reactions":415,"createdAt":"2019-05-16T14:15:17.000Z","labels":["request","meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1122,"title":"Support method/function overloads","state":"OPEN","comments":128,"participants":30,"reactions":357,"createdAt":"2016-05-18T23:39:18.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1122,"title":"Support method/function overloads","state":"OPEN","comments":128,"participants":30,"reactions":357,"createdAt":"2016-05-18T23:39:18.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1122,"title":"Support method/function overloads","state":"OPEN","comments":128,"participants":30,"reactions":357,"createdAt":"2016-05-18T23:39:18.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1122,"title":"Support method/function overloads","state":"OPEN","comments":128,"participants":30,"reactions":357,"createdAt":"2016-05-18T23:39:18.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1048,"title":"Constant function literals","state":"OPEN","comments":72,"participants":40,"reactions":310,"createdAt":"2012-08-20T06:08:26.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1048,"title":"Constant function literals","state":"OPEN","comments":72,"participants":40,"reactions":310,"createdAt":"2012-08-20T06:08:26.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1048,"title":"Constant function literals","state":"OPEN","comments":72,"participants":40,"reactions":310,"createdAt":"2012-08-20T06:08:26.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1048,"title":"Constant function literals","state":"OPEN","comments":72,"participants":40,"reactions":310,"createdAt":"2012-08-20T06:08:26.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":649,"title":"Import shorthand syntax","state":"OPEN","comments":79,"participants":28,"reactions":275,"createdAt":"2019-10-29T02:52:22.000Z","labels":["feature","small-feature","import-shorthand","unquoted-uris","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":649,"title":"Import shorthand syntax","state":"OPEN","comments":79,"participants":28,"reactions":275,"createdAt":"2019-10-29T02:52:22.000Z","labels":["feature","small-feature","import-shorthand","unquoted-uris","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":649,"title":"Import shorthand syntax","state":"OPEN","comments":79,"participants":28,"reactions":275,"createdAt":"2019-10-29T02:52:22.000Z","labels":["feature","small-feature","import-shorthand","unquoted-uris","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":649,"title":"Import shorthand syntax","state":"OPEN","comments":79,"participants":28,"reactions":275,"createdAt":"2019-10-29T02:52:22.000Z","labels":["feature","small-feature","import-shorthand","unquoted-uris","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":72,"title":"Terminating Tokens","state":"OPEN","comments":51,"participants":20,"reactions":273,"createdAt":"2018-10-31T19:22:18.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":72,"title":"Terminating Tokens","state":"OPEN","comments":51,"participants":20,"reactions":273,"createdAt":"2018-10-31T19:22:18.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":72,"title":"Terminating Tokens","state":"OPEN","comments":51,"participants":20,"reactions":273,"createdAt":"2018-10-31T19:22:18.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":72,"title":"Terminating Tokens","state":"OPEN","comments":51,"participants":20,"reactions":273,"createdAt":"2018-10-31T19:22:18.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2364,"title":"Primary constructor on classes","state":"OPEN","comments":136,"participants":4,"reactions":258,"createdAt":"2022-07-29T22:45:19.000Z","labels":["feature","data-classes","structs","primary-constructors","extension-types-later","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2364,"title":"Primary constructor on classes","state":"OPEN","comments":136,"participants":4,"reactions":258,"createdAt":"2022-07-29T22:45:19.000Z","labels":["feature","data-classes","structs","primary-constructors","extension-types-later","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2364,"title":"Primary constructor on classes","state":"OPEN","comments":136,"participants":4,"reactions":258,"createdAt":"2022-07-29T22:45:19.000Z","labels":["feature","data-classes","structs","primary-constructors","extension-types-later","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2364,"title":"Primary constructor on classes","state":"OPEN","comments":136,"participants":4,"reactions":258,"createdAt":"2022-07-29T22:45:19.000Z","labels":["feature","data-classes","structs","primary-constructors","extension-types-later","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":333,"title":"It is necessary to implement threads","state":"OPEN","comments":187,"participants":41,"reactions":255,"createdAt":"2019-04-27T21:06:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":333,"title":"It is necessary to implement threads","state":"OPEN","comments":187,"participants":41,"reactions":255,"createdAt":"2019-04-27T21:06:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":333,"title":"It is necessary to implement threads","state":"OPEN","comments":187,"participants":41,"reactions":255,"createdAt":"2019-04-27T21:06:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":333,"title":"It is necessary to implement threads","state":"OPEN","comments":187,"participants":41,"reactions":255,"createdAt":"2019-04-27T21:06:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":524,"title":"Feature: Statically checked declaration-site variance","state":"OPEN","comments":100,"participants":30,"reactions":248,"createdAt":"2019-08-14T14:07:15.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":524,"title":"Feature: Statically checked declaration-site variance","state":"OPEN","comments":100,"participants":30,"reactions":248,"createdAt":"2019-08-14T14:07:15.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":524,"title":"Feature: Statically checked declaration-site variance","state":"OPEN","comments":100,"participants":30,"reactions":248,"createdAt":"2019-08-14T14:07:15.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":524,"title":"Feature: Statically checked declaration-site variance","state":"OPEN","comments":100,"participants":30,"reactions":248,"createdAt":"2019-08-14T14:07:15.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1076,"title":"Allow both optional positional and optional named arguments in the same function signature.","state":"OPEN","comments":53,"participants":32,"reactions":241,"createdAt":"2012-11-30T13:04:22.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1076,"title":"Allow both optional positional and optional named arguments in the same function signature.","state":"OPEN","comments":53,"participants":32,"reactions":241,"createdAt":"2012-11-30T13:04:22.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1076,"title":"Allow both optional positional and optional named arguments in the same function signature.","state":"OPEN","comments":53,"participants":32,"reactions":241,"createdAt":"2012-11-30T13:04:22.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1076,"title":"Allow both optional positional and optional named arguments in the same function signature.","state":"OPEN","comments":53,"participants":32,"reactions":241,"createdAt":"2012-11-30T13:04:22.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":399,"title":"Add \"Safe\" (nullable) cast operator `as?`","state":"OPEN","comments":21,"participants":13,"reactions":225,"createdAt":"2019-06-12T15:21:00.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":399,"title":"Add \"Safe\" (nullable) cast operator `as?`","state":"OPEN","comments":21,"participants":13,"reactions":225,"createdAt":"2019-06-12T15:21:00.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":399,"title":"Add \"Safe\" (nullable) cast operator `as?`","state":"OPEN","comments":21,"participants":13,"reactions":225,"createdAt":"2019-06-12T15:21:00.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":399,"title":"Add \"Safe\" (nullable) cast operator `as?`","state":"OPEN","comments":21,"participants":13,"reactions":225,"createdAt":"2019-06-12T15:21:00.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1014,"title":"Feature Request: Variable Number of Arguments","state":"OPEN","comments":50,"participants":38,"reactions":208,"createdAt":"2014-01-23T02:08:33.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1014,"title":"Feature Request: Variable Number of Arguments","state":"OPEN","comments":50,"participants":38,"reactions":208,"createdAt":"2014-01-23T02:08:33.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1014,"title":"Feature Request: Variable Number of Arguments","state":"OPEN","comments":50,"participants":38,"reactions":208,"createdAt":"2014-01-23T02:08:33.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1014,"title":"Feature Request: Variable Number of Arguments","state":"OPEN","comments":50,"participants":38,"reactions":208,"createdAt":"2014-01-23T02:08:33.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":336,"title":"Static nested classes","state":"OPEN","comments":41,"participants":21,"reactions":203,"createdAt":"2019-04-29T19:34:27.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":336,"title":"Static nested classes","state":"OPEN","comments":41,"participants":21,"reactions":203,"createdAt":"2019-04-29T19:34:27.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":336,"title":"Static nested classes","state":"OPEN","comments":41,"participants":21,"reactions":203,"createdAt":"2019-04-29T19:34:27.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":336,"title":"Static nested classes","state":"OPEN","comments":41,"participants":21,"reactions":203,"createdAt":"2019-04-29T19:34:27.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4211,"title":"Proposal for a pipe-like operator to chain constructor/method invocations without nesting","state":"OPEN","comments":150,"participants":1,"reactions":201,"createdAt":"2024-12-18T23:53:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4211,"title":"Proposal for a pipe-like operator to chain constructor/method invocations without nesting","state":"OPEN","comments":150,"participants":1,"reactions":201,"createdAt":"2024-12-18T23:53:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4211,"title":"Proposal for a pipe-like operator to chain constructor/method invocations without nesting","state":"OPEN","comments":150,"participants":1,"reactions":201,"createdAt":"2024-12-18T23:53:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4211,"title":"Proposal for a pipe-like operator to chain constructor/method invocations without nesting","state":"OPEN","comments":150,"participants":1,"reactions":201,"createdAt":"2024-12-18T23:53:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4271,"title":"static enough metaprogramming","state":"OPEN","comments":99,"participants":1,"reactions":196,"createdAt":"2025-02-19T15:25:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4271,"title":"static enough metaprogramming","state":"OPEN","comments":99,"participants":1,"reactions":196,"createdAt":"2025-02-19T15:25:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4271,"title":"static enough metaprogramming","state":"OPEN","comments":99,"participants":1,"reactions":196,"createdAt":"2025-02-19T15:25:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4271,"title":"static enough metaprogramming","state":"OPEN","comments":99,"participants":1,"reactions":196,"createdAt":"2025-02-19T15:25:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":136,"title":"The `final` keyword is too long","state":"OPEN","comments":89,"participants":43,"reactions":144,"createdAt":"2018-12-17T09:28:43.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":136,"title":"The `final` keyword is too long","state":"OPEN","comments":89,"participants":43,"reactions":144,"createdAt":"2018-12-17T09:28:43.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":136,"title":"The `final` keyword is too long","state":"OPEN","comments":89,"participants":43,"reactions":144,"createdAt":"2018-12-17T09:28:43.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":136,"title":"The `final` keyword is too long","state":"OPEN","comments":89,"participants":43,"reactions":144,"createdAt":"2018-12-17T09:28:43.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":145,"title":"Users want to define union or union-like APIs","state":"OPEN","comments":27,"participants":17,"reactions":132,"createdAt":"2018-12-17T23:36:13.000Z","labels":["request","union-types"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":145,"title":"Users want to define union or union-like APIs","state":"OPEN","comments":27,"participants":17,"reactions":132,"createdAt":"2018-12-17T23:36:13.000Z","labels":["request","union-types"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":145,"title":"Users want to define union or union-like APIs","state":"OPEN","comments":27,"participants":17,"reactions":132,"createdAt":"2018-12-17T23:36:13.000Z","labels":["request","union-types"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":145,"title":"Users want to define union or union-like APIs","state":"OPEN","comments":27,"participants":17,"reactions":132,"createdAt":"2018-12-17T23:36:13.000Z","labels":["request","union-types"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3001,"title":"Parameter destructuring","state":"OPEN","comments":12,"participants":3,"reactions":120,"createdAt":"2023-04-17T00:03:07.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3001,"title":"Parameter destructuring","state":"OPEN","comments":12,"participants":3,"reactions":120,"createdAt":"2023-04-17T00:03:07.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3001,"title":"Parameter destructuring","state":"OPEN","comments":12,"participants":3,"reactions":120,"createdAt":"2023-04-17T00:03:07.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3001,"title":"Parameter destructuring","state":"OPEN","comments":12,"participants":3,"reactions":120,"createdAt":"2023-04-17T00:03:07.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":870,"title":"Disallow returning futures from `async` functions.","state":"OPEN","comments":26,"participants":12,"reactions":106,"createdAt":"2020-03-05T10:20:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":870,"title":"Disallow returning futures from `async` functions.","state":"OPEN","comments":26,"participants":12,"reactions":106,"createdAt":"2020-03-05T10:20:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":870,"title":"Disallow returning futures from `async` functions.","state":"OPEN","comments":26,"participants":12,"reactions":106,"createdAt":"2020-03-05T10:20:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":870,"title":"Disallow returning futures from `async` functions.","state":"OPEN","comments":26,"participants":12,"reactions":106,"createdAt":"2020-03-05T10:20:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":251,"title":"Add possibility to consistently get object property name","state":"OPEN","comments":26,"participants":21,"reactions":103,"createdAt":"2017-10-31T18:28:10.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":251,"title":"Add possibility to consistently get object property name","state":"OPEN","comments":26,"participants":21,"reactions":103,"createdAt":"2017-10-31T18:28:10.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":251,"title":"Add possibility to consistently get object property name","state":"OPEN","comments":26,"participants":21,"reactions":103,"createdAt":"2017-10-31T18:28:10.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":251,"title":"Add possibility to consistently get object property name","state":"OPEN","comments":26,"participants":21,"reactions":103,"createdAt":"2017-10-31T18:28:10.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1246,"title":"Add a function pipe operator","state":"OPEN","comments":39,"participants":20,"reactions":102,"createdAt":"2014-02-17T21:21:47.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1246,"title":"Add a function pipe operator","state":"OPEN","comments":39,"participants":20,"reactions":102,"createdAt":"2014-02-17T21:21:47.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1246,"title":"Add a function pipe operator","state":"OPEN","comments":39,"participants":20,"reactions":102,"createdAt":"2014-02-17T21:21:47.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1246,"title":"Add a function pipe operator","state":"OPEN","comments":39,"participants":20,"reactions":102,"createdAt":"2014-02-17T21:21:47.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3021,"title":"More concise syntax for defining sealed families","state":"OPEN","comments":12,"participants":1,"reactions":101,"createdAt":"2023-04-27T13:16:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3021,"title":"More concise syntax for defining sealed families","state":"OPEN","comments":12,"participants":1,"reactions":101,"createdAt":"2023-04-27T13:16:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3021,"title":"More concise syntax for defining sealed families","state":"OPEN","comments":12,"participants":1,"reactions":101,"createdAt":"2023-04-27T13:16:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3021,"title":"More concise syntax for defining sealed families","state":"OPEN","comments":12,"participants":1,"reactions":101,"createdAt":"2023-04-27T13:16:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":320,"title":"Requst: Optional parentheses for one argument arrow function","state":"OPEN","comments":13,"participants":7,"reactions":98,"createdAt":"2019-04-18T15:28:42.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":320,"title":"Requst: Optional parentheses for one argument arrow function","state":"OPEN","comments":13,"participants":7,"reactions":98,"createdAt":"2019-04-18T15:28:42.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":320,"title":"Requst: Optional parentheses for one argument arrow function","state":"OPEN","comments":13,"participants":7,"reactions":98,"createdAt":"2019-04-18T15:28:42.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":320,"title":"Requst: Optional parentheses for one argument arrow function","state":"OPEN","comments":13,"participants":7,"reactions":98,"createdAt":"2019-04-18T15:28:42.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1047,"title":"Extensible pattern-matching","state":"OPEN","comments":22,"participants":13,"reactions":97,"createdAt":"2012-05-08T21:16:00.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1047,"title":"Extensible pattern-matching","state":"OPEN","comments":22,"participants":13,"reactions":97,"createdAt":"2012-05-08T21:16:00.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1047,"title":"Extensible pattern-matching","state":"OPEN","comments":22,"participants":13,"reactions":97,"createdAt":"2012-05-08T21:16:00.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1047,"title":"Extensible pattern-matching","state":"OPEN","comments":22,"participants":13,"reactions":97,"createdAt":"2012-05-08T21:16:00.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":783,"title":"Typed Maps - like interfaces in TypeScript","state":"OPEN","comments":50,"participants":20,"reactions":94,"createdAt":"2020-01-16T19:49:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":783,"title":"Typed Maps - like interfaces in TypeScript","state":"OPEN","comments":50,"participants":20,"reactions":94,"createdAt":"2020-01-16T19:49:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":783,"title":"Typed Maps - like interfaces in TypeScript","state":"OPEN","comments":50,"participants":20,"reactions":94,"createdAt":"2020-01-16T19:49:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":783,"title":"Typed Maps - like interfaces in TypeScript","state":"OPEN","comments":50,"participants":20,"reactions":94,"createdAt":"2020-01-16T19:49:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":620,"title":"Infer generic type parameters based on the declaring type","state":"OPEN","comments":31,"participants":12,"reactions":89,"createdAt":"2019-10-11T16:23:29.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":620,"title":"Infer generic type parameters based on the declaring type","state":"OPEN","comments":31,"participants":12,"reactions":89,"createdAt":"2019-10-11T16:23:29.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":620,"title":"Infer generic type parameters based on the declaring type","state":"OPEN","comments":31,"participants":12,"reactions":89,"createdAt":"2019-10-11T16:23:29.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":620,"title":"Infer generic type parameters based on the declaring type","state":"OPEN","comments":31,"participants":12,"reactions":89,"createdAt":"2019-10-11T16:23:29.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":540,"title":"Mixin composition","state":"OPEN","comments":35,"participants":24,"reactions":87,"createdAt":"2013-04-02T07:18:56.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":540,"title":"Mixin composition","state":"OPEN","comments":35,"participants":24,"reactions":87,"createdAt":"2013-04-02T07:18:56.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":540,"title":"Mixin composition","state":"OPEN","comments":35,"participants":24,"reactions":87,"createdAt":"2013-04-02T07:18:56.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":540,"title":"Mixin composition","state":"OPEN","comments":35,"participants":24,"reactions":87,"createdAt":"2013-04-02T07:18:56.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":112,"title":"Syntax catching multiple exceptions in a single on block","state":"OPEN","comments":10,"participants":11,"reactions":87,"createdAt":"2018-11-28T16:45:23.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":112,"title":"Syntax catching multiple exceptions in a single on block","state":"OPEN","comments":10,"participants":11,"reactions":87,"createdAt":"2018-11-28T16:45:23.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":112,"title":"Syntax catching multiple exceptions in a single on block","state":"OPEN","comments":10,"participants":11,"reactions":87,"createdAt":"2018-11-28T16:45:23.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":112,"title":"Syntax catching multiple exceptions in a single on block","state":"OPEN","comments":10,"participants":11,"reactions":87,"createdAt":"2018-11-28T16:45:23.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":252,"title":"Partial Classes and Methods feature request","state":"OPEN","comments":16,"participants":14,"reactions":86,"createdAt":"2019-03-03T12:49:56.000Z","labels":["request","augmentations"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":252,"title":"Partial Classes and Methods feature request","state":"OPEN","comments":16,"participants":14,"reactions":86,"createdAt":"2019-03-03T12:49:56.000Z","labels":["request","augmentations"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":252,"title":"Partial Classes and Methods feature request","state":"OPEN","comments":16,"participants":14,"reactions":86,"createdAt":"2019-03-03T12:49:56.000Z","labels":["request","augmentations"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":252,"title":"Partial Classes and Methods feature request","state":"OPEN","comments":16,"participants":14,"reactions":86,"createdAt":"2019-03-03T12:49:56.000Z","labels":["request","augmentations"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1394,"title":"constructor initializer list — make expressions able to use earlier names in the list","state":"OPEN","comments":19,"participants":10,"reactions":85,"createdAt":"2018-09-09T14:14:15.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1394,"title":"constructor initializer list — make expressions able to use earlier names in the list","state":"OPEN","comments":19,"participants":10,"reactions":85,"createdAt":"2018-09-09T14:14:15.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1394,"title":"constructor initializer list — make expressions able to use earlier names in the list","state":"OPEN","comments":19,"participants":10,"reactions":85,"createdAt":"2018-09-09T14:14:15.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1394,"title":"constructor initializer list — make expressions able to use earlier names in the list","state":"OPEN","comments":19,"participants":10,"reactions":85,"createdAt":"2018-09-09T14:14:15.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":698,"title":"Enhanced Default Constructors","state":"OPEN","comments":17,"participants":8,"reactions":85,"createdAt":"2019-11-21T13:06:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":698,"title":"Enhanced Default Constructors","state":"OPEN","comments":17,"participants":8,"reactions":85,"createdAt":"2019-11-21T13:06:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":698,"title":"Enhanced Default Constructors","state":"OPEN","comments":17,"participants":8,"reactions":85,"createdAt":"2019-11-21T13:06:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":698,"title":"Enhanced Default Constructors","state":"OPEN","comments":17,"participants":8,"reactions":85,"createdAt":"2019-11-21T13:06:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1518,"title":"Stable getters","state":"OPEN","comments":130,"participants":10,"reactions":82,"createdAt":"2021-03-13T11:40:44.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1518,"title":"Stable getters","state":"OPEN","comments":130,"participants":10,"reactions":82,"createdAt":"2021-03-13T11:40:44.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1518,"title":"Stable getters","state":"OPEN","comments":130,"participants":10,"reactions":82,"createdAt":"2021-03-13T11:40:44.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1518,"title":"Stable getters","state":"OPEN","comments":130,"participants":10,"reactions":82,"createdAt":"2021-03-13T11:40:44.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":25,"title":"Prefix `await` is cumbersome to work with.","state":"OPEN","comments":17,"participants":12,"reactions":81,"createdAt":"2018-09-13T10:02:30.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":25,"title":"Prefix `await` is cumbersome to work with.","state":"OPEN","comments":17,"participants":12,"reactions":81,"createdAt":"2018-09-13T10:02:30.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":25,"title":"Prefix `await` is cumbersome to work with.","state":"OPEN","comments":17,"participants":12,"reactions":81,"createdAt":"2018-09-13T10:02:30.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":25,"title":"Prefix `await` is cumbersome to work with.","state":"OPEN","comments":17,"participants":12,"reactions":81,"createdAt":"2018-09-13T10:02:30.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2128,"title":"Record spreading","state":"OPEN","comments":9,"participants":6,"reactions":79,"createdAt":"2022-02-23T15:33:01.000Z","labels":["patterns","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2128,"title":"Record spreading","state":"OPEN","comments":9,"participants":6,"reactions":79,"createdAt":"2022-02-23T15:33:01.000Z","labels":["patterns","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2128,"title":"Record spreading","state":"OPEN","comments":9,"participants":6,"reactions":79,"createdAt":"2022-02-23T15:33:01.000Z","labels":["patterns","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2128,"title":"Record spreading","state":"OPEN","comments":9,"participants":6,"reactions":79,"createdAt":"2022-02-23T15:33:01.000Z","labels":["patterns","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1201,"title":"If-variables","state":"OPEN","comments":68,"participants":22,"reactions":74,"createdAt":"2020-09-02T22:41:21.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1201,"title":"If-variables","state":"OPEN","comments":68,"participants":22,"reactions":74,"createdAt":"2020-09-02T22:41:21.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1201,"title":"If-variables","state":"OPEN","comments":68,"participants":22,"reactions":74,"createdAt":"2020-09-02T22:41:21.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1201,"title":"If-variables","state":"OPEN","comments":68,"participants":22,"reactions":74,"createdAt":"2020-09-02T22:41:21.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3192,"title":"Remove dynamic type","state":"OPEN","comments":65,"participants":4,"reactions":73,"createdAt":"2023-07-04T15:20:38.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3192,"title":"Remove dynamic type","state":"OPEN","comments":65,"participants":4,"reactions":73,"createdAt":"2023-07-04T15:20:38.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3192,"title":"Remove dynamic type","state":"OPEN","comments":65,"participants":4,"reactions":73,"createdAt":"2023-07-04T15:20:38.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3192,"title":"Remove dynamic type","state":"OPEN","comments":65,"participants":4,"reactions":73,"createdAt":"2023-07-04T15:20:38.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":125,"title":"Statically tracked shared immutable objects","state":"OPEN","comments":47,"participants":14,"reactions":73,"createdAt":"2018-12-05T00:25:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":125,"title":"Statically tracked shared immutable objects","state":"OPEN","comments":47,"participants":14,"reactions":73,"createdAt":"2018-12-05T00:25:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":125,"title":"Statically tracked shared immutable objects","state":"OPEN","comments":47,"participants":14,"reactions":73,"createdAt":"2018-12-05T00:25:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":125,"title":"Statically tracked shared immutable objects","state":"OPEN","comments":47,"participants":14,"reactions":73,"createdAt":"2018-12-05T00:25:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":736,"title":"Interface support for extensions","state":"OPEN","comments":15,"participants":10,"reactions":68,"createdAt":"2019-12-12T03:53:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":736,"title":"Interface support for extensions","state":"OPEN","comments":15,"participants":10,"reactions":68,"createdAt":"2019-12-12T03:53:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":736,"title":"Interface support for extensions","state":"OPEN","comments":15,"participants":10,"reactions":68,"createdAt":"2019-12-12T03:53:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":736,"title":"Interface support for extensions","state":"OPEN","comments":15,"participants":10,"reactions":68,"createdAt":"2019-12-12T03:53:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":581,"title":"Add binary integer literals","state":"OPEN","comments":18,"participants":13,"reactions":67,"createdAt":"2012-05-02T19:07:14.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":581,"title":"Add binary integer literals","state":"OPEN","comments":18,"participants":13,"reactions":67,"createdAt":"2012-05-02T19:07:14.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":581,"title":"Add binary integer literals","state":"OPEN","comments":18,"participants":13,"reactions":67,"createdAt":"2012-05-02T19:07:14.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":581,"title":"Add binary integer literals","state":"OPEN","comments":18,"participants":13,"reactions":67,"createdAt":"2012-05-02T19:07:14.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2090,"title":"Give `Type` a type argument such that `T is Type<T>`","state":"OPEN","comments":42,"participants":11,"reactions":66,"createdAt":"2022-02-02T21:43:28.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2090,"title":"Give `Type` a type argument such that `T is Type<T>`","state":"OPEN","comments":42,"participants":11,"reactions":66,"createdAt":"2022-02-02T21:43:28.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2090,"title":"Give `Type` a type argument such that `T is Type<T>`","state":"OPEN","comments":42,"participants":11,"reactions":66,"createdAt":"2022-02-02T21:43:28.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2090,"title":"Give `Type` a type argument such that `T is Type<T>`","state":"OPEN","comments":42,"participants":11,"reactions":66,"createdAt":"2022-02-02T21:43:28.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":647,"title":"Constructor specific generics","state":"OPEN","comments":12,"participants":8,"reactions":66,"createdAt":"2019-10-28T13:29:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":647,"title":"Constructor specific generics","state":"OPEN","comments":12,"participants":8,"reactions":66,"createdAt":"2019-10-28T13:29:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":647,"title":"Constructor specific generics","state":"OPEN","comments":12,"participants":8,"reactions":66,"createdAt":"2019-10-28T13:29:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":647,"title":"Constructor specific generics","state":"OPEN","comments":12,"participants":8,"reactions":66,"createdAt":"2019-10-28T13:29:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2005,"title":"Allow setting named private properties","state":"OPEN","comments":30,"participants":11,"reactions":62,"createdAt":"2021-12-02T19:43:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2005,"title":"Allow setting named private properties","state":"OPEN","comments":30,"participants":11,"reactions":62,"createdAt":"2021-12-02T19:43:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2005,"title":"Allow setting named private properties","state":"OPEN","comments":30,"participants":11,"reactions":62,"createdAt":"2021-12-02T19:43:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2005,"title":"Allow setting named private properties","state":"OPEN","comments":30,"participants":11,"reactions":62,"createdAt":"2021-12-02T19:43:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3374,"title":"if expressions","state":"OPEN","comments":26,"participants":1,"reactions":61,"createdAt":"2023-09-29T14:10:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3374,"title":"if expressions","state":"OPEN","comments":26,"participants":1,"reactions":61,"createdAt":"2023-09-29T14:10:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3374,"title":"if expressions","state":"OPEN","comments":26,"participants":1,"reactions":61,"createdAt":"2023-09-29T14:10:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3374,"title":"if expressions","state":"OPEN","comments":26,"participants":1,"reactions":61,"createdAt":"2023-09-29T14:10:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2254,"title":"export as","state":"OPEN","comments":13,"participants":1,"reactions":61,"createdAt":"2022-05-23T08:50:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2254,"title":"export as","state":"OPEN","comments":13,"participants":1,"reactions":61,"createdAt":"2022-05-23T08:50:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2254,"title":"export as","state":"OPEN","comments":13,"participants":1,"reactions":61,"createdAt":"2022-05-23T08:50:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2254,"title":"export as","state":"OPEN","comments":13,"participants":1,"reactions":61,"createdAt":"2022-05-23T08:50:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3501,"title":"First-class, functional-style `Result<E, T>` types with built-in operators","state":"OPEN","comments":36,"participants":1,"reactions":60,"createdAt":"2023-12-08T08:47:54.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3501,"title":"First-class, functional-style `Result<E, T>` types with built-in operators","state":"OPEN","comments":36,"participants":1,"reactions":60,"createdAt":"2023-12-08T08:47:54.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3501,"title":"First-class, functional-style `Result<E, T>` types with built-in operators","state":"OPEN","comments":36,"participants":1,"reactions":60,"createdAt":"2023-12-08T08:47:54.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3501,"title":"First-class, functional-style `Result<E, T>` types with built-in operators","state":"OPEN","comments":36,"participants":1,"reactions":60,"createdAt":"2023-12-08T08:47:54.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1512,"title":"Allow parameter defaults for null values","state":"OPEN","comments":19,"participants":14,"reactions":60,"createdAt":"2018-07-19T20:26:23.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1512,"title":"Allow parameter defaults for null values","state":"OPEN","comments":19,"participants":14,"reactions":60,"createdAt":"2018-07-19T20:26:23.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1512,"title":"Allow parameter defaults for null values","state":"OPEN","comments":19,"participants":14,"reactions":60,"createdAt":"2018-07-19T20:26:23.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1512,"title":"Allow parameter defaults for null values","state":"OPEN","comments":19,"participants":14,"reactions":60,"createdAt":"2018-07-19T20:26:23.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2563,"title":"Allow inferring the name on object patterns ","state":"OPEN","comments":32,"participants":1,"reactions":59,"createdAt":"2022-10-07T17:49:49.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2563,"title":"Allow inferring the name on object patterns ","state":"OPEN","comments":32,"participants":1,"reactions":59,"createdAt":"2022-10-07T17:49:49.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2563,"title":"Allow inferring the name on object patterns ","state":"OPEN","comments":32,"participants":1,"reactions":59,"createdAt":"2022-10-07T17:49:49.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2563,"title":"Allow inferring the name on object patterns ","state":"OPEN","comments":32,"participants":1,"reactions":59,"createdAt":"2022-10-07T17:49:49.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1610,"title":"Make `@override` a language feature","state":"OPEN","comments":17,"participants":9,"reactions":59,"createdAt":"2021-05-03T09:51:42.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1610,"title":"Make `@override` a language feature","state":"OPEN","comments":17,"participants":9,"reactions":59,"createdAt":"2021-05-03T09:51:42.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1610,"title":"Make `@override` a language feature","state":"OPEN","comments":17,"participants":9,"reactions":59,"createdAt":"2021-05-03T09:51:42.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1610,"title":"Make `@override` a language feature","state":"OPEN","comments":17,"participants":9,"reactions":59,"createdAt":"2021-05-03T09:51:42.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":782,"title":"Asynchronous Constructors","state":"OPEN","comments":9,"participants":6,"reactions":58,"createdAt":"2020-01-16T12:03:25.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":782,"title":"Asynchronous Constructors","state":"OPEN","comments":9,"participants":6,"reactions":58,"createdAt":"2020-01-16T12:03:25.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":782,"title":"Asynchronous Constructors","state":"OPEN","comments":9,"participants":6,"reactions":58,"createdAt":"2020-01-16T12:03:25.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":782,"title":"Asynchronous Constructors","state":"OPEN","comments":9,"participants":6,"reactions":58,"createdAt":"2020-01-16T12:03:25.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":177,"title":"Scoped Class Extensions","state":"OPEN","comments":19,"participants":7,"reactions":56,"createdAt":"2019-01-14T13:34:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":177,"title":"Scoped Class Extensions","state":"OPEN","comments":19,"participants":7,"reactions":56,"createdAt":"2019-01-14T13:34:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":177,"title":"Scoped Class Extensions","state":"OPEN","comments":19,"participants":7,"reactions":56,"createdAt":"2019-01-14T13:34:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":177,"title":"Scoped Class Extensions","state":"OPEN","comments":19,"participants":7,"reactions":56,"createdAt":"2019-01-14T13:34:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":213,"title":"Safe typing involving variance","state":"OPEN","comments":8,"participants":4,"reactions":55,"createdAt":"2019-02-09T14:12:14.000Z","labels":["request","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":213,"title":"Safe typing involving variance","state":"OPEN","comments":8,"participants":4,"reactions":55,"createdAt":"2019-02-09T14:12:14.000Z","labels":["request","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":213,"title":"Safe typing involving variance","state":"OPEN","comments":8,"participants":4,"reactions":55,"createdAt":"2019-02-09T14:12:14.000Z","labels":["request","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":213,"title":"Safe typing involving variance","state":"OPEN","comments":8,"participants":4,"reactions":55,"createdAt":"2019-02-09T14:12:14.000Z","labels":["request","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2235,"title":"Dart conditionally imported library","state":"OPEN","comments":18,"participants":1,"reactions":53,"createdAt":"2022-05-12T14:48:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2235,"title":"Dart conditionally imported library","state":"OPEN","comments":18,"participants":1,"reactions":53,"createdAt":"2022-05-12T14:48:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2235,"title":"Dart conditionally imported library","state":"OPEN","comments":18,"participants":1,"reactions":53,"createdAt":"2022-05-12T14:48:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2235,"title":"Dart conditionally imported library","state":"OPEN","comments":18,"participants":1,"reactions":53,"createdAt":"2022-05-12T14:48:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":140,"title":"It is inconvenient that the default value of a formal parameter is constant","state":"OPEN","comments":24,"participants":9,"reactions":49,"createdAt":"2018-12-17T13:19:13.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":140,"title":"It is inconvenient that the default value of a formal parameter is constant","state":"OPEN","comments":24,"participants":9,"reactions":49,"createdAt":"2018-12-17T13:19:13.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":140,"title":"It is inconvenient that the default value of a formal parameter is constant","state":"OPEN","comments":24,"participants":9,"reactions":49,"createdAt":"2018-12-17T13:19:13.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":140,"title":"It is inconvenient that the default value of a formal parameter is constant","state":"OPEN","comments":24,"participants":9,"reactions":49,"createdAt":"2018-12-17T13:19:13.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":265,"title":"Abbreviated function literals","state":"OPEN","comments":16,"participants":6,"reactions":48,"createdAt":"2019-03-13T09:25:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":265,"title":"Abbreviated function literals","state":"OPEN","comments":16,"participants":6,"reactions":48,"createdAt":"2019-03-13T09:25:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":265,"title":"Abbreviated function literals","state":"OPEN","comments":16,"participants":6,"reactions":48,"createdAt":"2019-03-13T09:25:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":265,"title":"Abbreviated function literals","state":"OPEN","comments":16,"participants":6,"reactions":48,"createdAt":"2019-03-13T09:25:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2232,"title":"Simplified parameters, nullable means optional","state":"OPEN","comments":31,"participants":1,"reactions":46,"createdAt":"2022-05-11T13:24:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2232,"title":"Simplified parameters, nullable means optional","state":"OPEN","comments":31,"participants":1,"reactions":46,"createdAt":"2022-05-11T13:24:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2232,"title":"Simplified parameters, nullable means optional","state":"OPEN","comments":31,"participants":1,"reactions":46,"createdAt":"2022-05-11T13:24:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2232,"title":"Simplified parameters, nullable means optional","state":"OPEN","comments":31,"participants":1,"reactions":46,"createdAt":"2022-05-11T13:24:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":361,"title":"Proposal: operator !! (opposite of ??)","state":"OPEN","comments":18,"participants":11,"reactions":46,"createdAt":"2019-05-17T17:55:34.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":361,"title":"Proposal: operator !! (opposite of ??)","state":"OPEN","comments":18,"participants":11,"reactions":46,"createdAt":"2019-05-17T17:55:34.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":361,"title":"Proposal: operator !! (opposite of ??)","state":"OPEN","comments":18,"participants":11,"reactions":46,"createdAt":"2019-05-17T17:55:34.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":361,"title":"Proposal: operator !! (opposite of ??)","state":"OPEN","comments":18,"participants":11,"reactions":46,"createdAt":"2019-05-17T17:55:34.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3788,"title":"Shorter constructor declaration syntax.","state":"OPEN","comments":10,"participants":1,"reactions":45,"createdAt":"2024-05-08T13:14:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3788,"title":"Shorter constructor declaration syntax.","state":"OPEN","comments":10,"participants":1,"reactions":45,"createdAt":"2024-05-08T13:14:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3788,"title":"Shorter constructor declaration syntax.","state":"OPEN","comments":10,"participants":1,"reactions":45,"createdAt":"2024-05-08T13:14:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3788,"title":"Shorter constructor declaration syntax.","state":"OPEN","comments":10,"participants":1,"reactions":45,"createdAt":"2024-05-08T13:14:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1077,"title":"Meta: Small and useful features collection","state":"OPEN","comments":35,"participants":20,"reactions":45,"createdAt":"2020-07-08T14:52:50.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1077,"title":"Meta: Small and useful features collection","state":"OPEN","comments":35,"participants":20,"reactions":45,"createdAt":"2020-07-08T14:52:50.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1077,"title":"Meta: Small and useful features collection","state":"OPEN","comments":35,"participants":20,"reactions":45,"createdAt":"2020-07-08T14:52:50.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1077,"title":"Meta: Small and useful features collection","state":"OPEN","comments":35,"participants":20,"reactions":45,"createdAt":"2020-07-08T14:52:50.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":493,"title":"Ability to provide constructor that forwards all arguments","state":"OPEN","comments":10,"participants":6,"reactions":45,"createdAt":"2019-08-04T23:51:54.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":493,"title":"Ability to provide constructor that forwards all arguments","state":"OPEN","comments":10,"participants":6,"reactions":45,"createdAt":"2019-08-04T23:51:54.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":493,"title":"Ability to provide constructor that forwards all arguments","state":"OPEN","comments":10,"participants":6,"reactions":45,"createdAt":"2019-08-04T23:51:54.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":493,"title":"Ability to provide constructor that forwards all arguments","state":"OPEN","comments":10,"participants":6,"reactions":45,"createdAt":"2019-08-04T23:51:54.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":8,"title":"Support concise function literals","state":"OPEN","comments":30,"participants":11,"reactions":44,"createdAt":"2018-08-02T09:15:38.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":8,"title":"Support concise function literals","state":"OPEN","comments":30,"participants":11,"reactions":44,"createdAt":"2018-08-02T09:15:38.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":8,"title":"Support concise function literals","state":"OPEN","comments":30,"participants":11,"reactions":44,"createdAt":"2018-08-02T09:15:38.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":8,"title":"Support concise function literals","state":"OPEN","comments":30,"participants":11,"reactions":44,"createdAt":"2018-08-02T09:15:38.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1874,"title":"Functional/Expression macro","state":"OPEN","comments":7,"participants":6,"reactions":43,"createdAt":"2021-09-28T23:12:56.000Z","labels":["feature","static-metaprogramming"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1874,"title":"Functional/Expression macro","state":"OPEN","comments":7,"participants":6,"reactions":43,"createdAt":"2021-09-28T23:12:56.000Z","labels":["feature","static-metaprogramming"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1874,"title":"Functional/Expression macro","state":"OPEN","comments":7,"participants":6,"reactions":43,"createdAt":"2021-09-28T23:12:56.000Z","labels":["feature","static-metaprogramming"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1874,"title":"Functional/Expression macro","state":"OPEN","comments":7,"participants":6,"reactions":43,"createdAt":"2021-09-28T23:12:56.000Z","labels":["feature","static-metaprogramming"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1159,"title":"No Tail Call Optimisation","state":"OPEN","comments":16,"participants":8,"reactions":43,"createdAt":"2020-08-18T12:03:13.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1159,"title":"No Tail Call Optimisation","state":"OPEN","comments":16,"participants":8,"reactions":43,"createdAt":"2020-08-18T12:03:13.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1159,"title":"No Tail Call Optimisation","state":"OPEN","comments":16,"participants":8,"reactions":43,"createdAt":"2020-08-18T12:03:13.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1159,"title":"No Tail Call Optimisation","state":"OPEN","comments":16,"participants":8,"reactions":43,"createdAt":"2020-08-18T12:03:13.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":121,"title":"The `async*` function `yield` should work well with `await for`.","state":"OPEN","comments":2,"participants":4,"reactions":43,"createdAt":"2018-11-30T19:48:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":121,"title":"The `async*` function `yield` should work well with `await for`.","state":"OPEN","comments":2,"participants":4,"reactions":43,"createdAt":"2018-11-30T19:48:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":121,"title":"The `async*` function `yield` should work well with `await for`.","state":"OPEN","comments":2,"participants":4,"reactions":43,"createdAt":"2018-11-30T19:48:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":121,"title":"The `async*` function `yield` should work well with `await for`.","state":"OPEN","comments":2,"participants":4,"reactions":43,"createdAt":"2018-11-30T19:48:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1415,"title":"Dart treats a final nullable property as nullable even after checking that the property is not  null","state":"OPEN","comments":59,"participants":15,"reactions":42,"createdAt":"2021-01-23T06:59:10.000Z","labels":["request","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1415,"title":"Dart treats a final nullable property as nullable even after checking that the property is not  null","state":"OPEN","comments":59,"participants":15,"reactions":42,"createdAt":"2021-01-23T06:59:10.000Z","labels":["request","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1415,"title":"Dart treats a final nullable property as nullable even after checking that the property is not  null","state":"OPEN","comments":59,"participants":15,"reactions":42,"createdAt":"2021-01-23T06:59:10.000Z","labels":["request","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1415,"title":"Dart treats a final nullable property as nullable even after checking that the property is not  null","state":"OPEN","comments":59,"participants":15,"reactions":42,"createdAt":"2021-01-23T06:59:10.000Z","labels":["request","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":108,"title":"Implicit Constructor proposal","state":"OPEN","comments":9,"participants":7,"reactions":42,"createdAt":"2018-11-27T22:45:01.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":108,"title":"Implicit Constructor proposal","state":"OPEN","comments":9,"participants":7,"reactions":42,"createdAt":"2018-11-27T22:45:01.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":108,"title":"Implicit Constructor proposal","state":"OPEN","comments":9,"participants":7,"reactions":42,"createdAt":"2018-11-27T22:45:01.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":108,"title":"Implicit Constructor proposal","state":"OPEN","comments":9,"participants":7,"reactions":42,"createdAt":"2018-11-27T22:45:01.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2703,"title":"Let","state":"OPEN","comments":21,"participants":9,"reactions":41,"createdAt":"2022-12-09T01:58:54.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2703,"title":"Let","state":"OPEN","comments":21,"participants":9,"reactions":41,"createdAt":"2022-12-09T01:58:54.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2703,"title":"Let","state":"OPEN","comments":21,"participants":9,"reactions":41,"createdAt":"2022-12-09T01:58:54.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3608,"title":"Unions as parameters","state":"OPEN","comments":13,"participants":1,"reactions":40,"createdAt":"2024-02-05T20:00:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3608,"title":"Unions as parameters","state":"OPEN","comments":13,"participants":1,"reactions":40,"createdAt":"2024-02-05T20:00:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3608,"title":"Unions as parameters","state":"OPEN","comments":13,"participants":1,"reactions":40,"createdAt":"2024-02-05T20:00:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3608,"title":"Unions as parameters","state":"OPEN","comments":13,"participants":1,"reactions":40,"createdAt":"2024-02-05T20:00:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":877,"title":"[Feature] Add support for an Undefined data type","state":"OPEN","comments":21,"participants":11,"reactions":40,"createdAt":"2020-03-07T22:44:23.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":877,"title":"[Feature] Add support for an Undefined data type","state":"OPEN","comments":21,"participants":11,"reactions":40,"createdAt":"2020-03-07T22:44:23.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":877,"title":"[Feature] Add support for an Undefined data type","state":"OPEN","comments":21,"participants":11,"reactions":40,"createdAt":"2020-03-07T22:44:23.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":285,"title":"Support for code regions","state":"OPEN","comments":9,"participants":9,"reactions":39,"createdAt":"2019-03-22T19:37:46.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":285,"title":"Support for code regions","state":"OPEN","comments":9,"participants":9,"reactions":39,"createdAt":"2019-03-22T19:37:46.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":285,"title":"Support for code regions","state":"OPEN","comments":9,"participants":9,"reactions":39,"createdAt":"2019-03-22T19:37:46.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":559,"title":"Introduce ability to remove leading indents in a multiline string after a newline.","state":"OPEN","comments":3,"participants":2,"reactions":38,"createdAt":"2019-09-03T08:40:31.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":559,"title":"Introduce ability to remove leading indents in a multiline string after a newline.","state":"OPEN","comments":3,"participants":2,"reactions":38,"createdAt":"2019-09-03T08:40:31.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":559,"title":"Introduce ability to remove leading indents in a multiline string after a newline.","state":"OPEN","comments":3,"participants":2,"reactions":38,"createdAt":"2019-09-03T08:40:31.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":559,"title":"Introduce ability to remove leading indents in a multiline string after a newline.","state":"OPEN","comments":3,"participants":2,"reactions":38,"createdAt":"2019-09-03T08:40:31.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":131,"title":"\"if not null\" operators","state":"OPEN","comments":5,"participants":5,"reactions":38,"createdAt":"2018-12-12T14:03:28.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":131,"title":"\"if not null\" operators","state":"OPEN","comments":5,"participants":5,"reactions":38,"createdAt":"2018-12-12T14:03:28.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":131,"title":"\"if not null\" operators","state":"OPEN","comments":5,"participants":5,"reactions":38,"createdAt":"2018-12-12T14:03:28.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":131,"title":"\"if not null\" operators","state":"OPEN","comments":5,"participants":5,"reactions":38,"createdAt":"2018-12-12T14:03:28.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1565,"title":"Code generation (metaprogramming) proposal v2","state":"OPEN","comments":72,"participants":10,"reactions":37,"createdAt":"2021-04-08T01:42:15.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1565,"title":"Code generation (metaprogramming) proposal v2","state":"OPEN","comments":72,"participants":10,"reactions":37,"createdAt":"2021-04-08T01:42:15.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1565,"title":"Code generation (metaprogramming) proposal v2","state":"OPEN","comments":72,"participants":10,"reactions":37,"createdAt":"2021-04-08T01:42:15.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1565,"title":"Code generation (metaprogramming) proposal v2","state":"OPEN","comments":72,"participants":10,"reactions":37,"createdAt":"2021-04-08T01:42:15.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1113,"title":"Nullable compound assignments are inconvenient.","state":"OPEN","comments":19,"participants":13,"reactions":37,"createdAt":"2020-07-23T10:45:17.000Z","labels":["request","nnbd"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1113,"title":"Nullable compound assignments are inconvenient.","state":"OPEN","comments":19,"participants":13,"reactions":37,"createdAt":"2020-07-23T10:45:17.000Z","labels":["request","nnbd"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1113,"title":"Nullable compound assignments are inconvenient.","state":"OPEN","comments":19,"participants":13,"reactions":37,"createdAt":"2020-07-23T10:45:17.000Z","labels":["request","nnbd"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1113,"title":"Nullable compound assignments are inconvenient.","state":"OPEN","comments":19,"participants":13,"reactions":37,"createdAt":"2020-07-23T10:45:17.000Z","labels":["request","nnbd"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":836,"title":"NNBD support for generic functions where the result nullability depends on if an optional parameter is passed or not","state":"OPEN","comments":18,"participants":7,"reactions":37,"createdAt":"2020-02-11T23:24:00.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":836,"title":"NNBD support for generic functions where the result nullability depends on if an optional parameter is passed or not","state":"OPEN","comments":18,"participants":7,"reactions":37,"createdAt":"2020-02-11T23:24:00.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":836,"title":"NNBD support for generic functions where the result nullability depends on if an optional parameter is passed or not","state":"OPEN","comments":18,"participants":7,"reactions":37,"createdAt":"2020-02-11T23:24:00.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":836,"title":"NNBD support for generic functions where the result nullability depends on if an optional parameter is passed or not","state":"OPEN","comments":18,"participants":7,"reactions":37,"createdAt":"2020-02-11T23:24:00.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3083,"title":"Switch expression is not exhaustive on integers","state":"OPEN","comments":7,"participants":2,"reactions":36,"createdAt":"2023-05-13T10:34:29.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3083,"title":"Switch expression is not exhaustive on integers","state":"OPEN","comments":7,"participants":2,"reactions":36,"createdAt":"2023-05-13T10:34:29.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3083,"title":"Switch expression is not exhaustive on integers","state":"OPEN","comments":7,"participants":2,"reactions":36,"createdAt":"2023-05-13T10:34:29.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3083,"title":"Switch expression is not exhaustive on integers","state":"OPEN","comments":7,"participants":2,"reactions":36,"createdAt":"2023-05-13T10:34:29.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1758,"title":"unsafe context","state":"OPEN","comments":20,"participants":10,"reactions":36,"createdAt":"2021-07-26T19:08:19.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1758,"title":"unsafe context","state":"OPEN","comments":20,"participants":10,"reactions":36,"createdAt":"2021-07-26T19:08:19.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1758,"title":"unsafe context","state":"OPEN","comments":20,"participants":10,"reactions":36,"createdAt":"2021-07-26T19:08:19.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4200,"title":"More capable `Type` objects","state":"OPEN","comments":144,"participants":1,"reactions":35,"createdAt":"2024-12-09T16:33:47.000Z","labels":["feature","meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4200,"title":"More capable `Type` objects","state":"OPEN","comments":144,"participants":1,"reactions":35,"createdAt":"2024-12-09T16:33:47.000Z","labels":["feature","meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4200,"title":"More capable `Type` objects","state":"OPEN","comments":144,"participants":1,"reactions":35,"createdAt":"2024-12-09T16:33:47.000Z","labels":["feature","meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4200,"title":"More capable `Type` objects","state":"OPEN","comments":144,"participants":1,"reactions":35,"createdAt":"2024-12-09T16:33:47.000Z","labels":["feature","meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3061,"title":"Switch expression doesn't actually seem to be an expression.","state":"OPEN","comments":15,"participants":4,"reactions":35,"createdAt":"2023-05-11T04:25:21.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3061,"title":"Switch expression doesn't actually seem to be an expression.","state":"OPEN","comments":15,"participants":4,"reactions":35,"createdAt":"2023-05-11T04:25:21.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3061,"title":"Switch expression doesn't actually seem to be an expression.","state":"OPEN","comments":15,"participants":4,"reactions":35,"createdAt":"2023-05-11T04:25:21.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3061,"title":"Switch expression doesn't actually seem to be an expression.","state":"OPEN","comments":15,"participants":4,"reactions":35,"createdAt":"2023-05-11T04:25:21.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2321,"title":"Awaiting records.","state":"OPEN","comments":15,"participants":2,"reactions":35,"createdAt":"2022-06-28T21:42:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2321,"title":"Awaiting records.","state":"OPEN","comments":15,"participants":2,"reactions":35,"createdAt":"2022-06-28T21:42:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2321,"title":"Awaiting records.","state":"OPEN","comments":15,"participants":2,"reactions":35,"createdAt":"2022-06-28T21:42:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2321,"title":"Awaiting records.","state":"OPEN","comments":15,"participants":2,"reactions":35,"createdAt":"2022-06-28T21:42:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3616,"title":"Dot syntax for static access","state":"OPEN","comments":9,"participants":1,"reactions":34,"createdAt":"2024-02-17T03:17:52.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3616,"title":"Dot syntax for static access","state":"OPEN","comments":9,"participants":1,"reactions":34,"createdAt":"2024-02-17T03:17:52.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3616,"title":"Dot syntax for static access","state":"OPEN","comments":9,"participants":1,"reactions":34,"createdAt":"2024-02-17T03:17:52.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3616,"title":"Dot syntax for static access","state":"OPEN","comments":9,"participants":1,"reactions":34,"createdAt":"2024-02-17T03:17:52.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1548,"title":"Swift-like guard statement","state":"OPEN","comments":29,"participants":12,"reactions":34,"createdAt":"2021-03-26T03:13:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1548,"title":"Swift-like guard statement","state":"OPEN","comments":29,"participants":12,"reactions":34,"createdAt":"2021-03-26T03:13:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1548,"title":"Swift-like guard statement","state":"OPEN","comments":29,"participants":12,"reactions":34,"createdAt":"2021-03-26T03:13:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1548,"title":"Swift-like guard statement","state":"OPEN","comments":29,"participants":12,"reactions":34,"createdAt":"2021-03-26T03:13:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1121,"title":"Optional auto-generation of operator== and hashCode on classes with const constructors","state":"OPEN","comments":40,"participants":10,"reactions":34,"createdAt":"2016-06-14T19:45:09.000Z","labels":["request","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1121,"title":"Optional auto-generation of operator== and hashCode on classes with const constructors","state":"OPEN","comments":40,"participants":10,"reactions":34,"createdAt":"2016-06-14T19:45:09.000Z","labels":["request","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1121,"title":"Optional auto-generation of operator== and hashCode on classes with const constructors","state":"OPEN","comments":40,"participants":10,"reactions":34,"createdAt":"2016-06-14T19:45:09.000Z","labels":["request","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1121,"title":"Optional auto-generation of operator== and hashCode on classes with const constructors","state":"OPEN","comments":40,"participants":10,"reactions":34,"createdAt":"2016-06-14T19:45:09.000Z","labels":["request","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":271,"title":"Escaped reserved words","state":"OPEN","comments":15,"participants":10,"reactions":33,"createdAt":"2019-03-15T17:34:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":271,"title":"Escaped reserved words","state":"OPEN","comments":15,"participants":10,"reactions":33,"createdAt":"2019-03-15T17:34:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":271,"title":"Escaped reserved words","state":"OPEN","comments":15,"participants":10,"reactions":33,"createdAt":"2019-03-15T17:34:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":271,"title":"Escaped reserved words","state":"OPEN","comments":15,"participants":10,"reactions":33,"createdAt":"2019-03-15T17:34:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":170,"title":"Type Patterns","state":"OPEN","comments":21,"participants":3,"reactions":33,"createdAt":"2019-01-10T12:45:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":170,"title":"Type Patterns","state":"OPEN","comments":21,"participants":3,"reactions":33,"createdAt":"2019-01-10T12:45:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":170,"title":"Type Patterns","state":"OPEN","comments":21,"participants":3,"reactions":33,"createdAt":"2019-01-10T12:45:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":170,"title":"Type Patterns","state":"OPEN","comments":21,"participants":3,"reactions":33,"createdAt":"2019-01-10T12:45:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3457,"title":"Allow switch without scrutinee and patterns in cases","state":"OPEN","comments":15,"participants":2,"reactions":32,"createdAt":"2023-11-09T15:02:38.000Z","labels":["request","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3457,"title":"Allow switch without scrutinee and patterns in cases","state":"OPEN","comments":15,"participants":2,"reactions":32,"createdAt":"2023-11-09T15:02:38.000Z","labels":["request","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3457,"title":"Allow switch without scrutinee and patterns in cases","state":"OPEN","comments":15,"participants":2,"reactions":32,"createdAt":"2023-11-09T15:02:38.000Z","labels":["request","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3457,"title":"Allow switch without scrutinee and patterns in cases","state":"OPEN","comments":15,"participants":2,"reactions":32,"createdAt":"2023-11-09T15:02:38.000Z","labels":["request","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2496,"title":"Optional Entries in Map Patterns","state":"OPEN","comments":12,"participants":3,"reactions":32,"createdAt":"2022-09-16T08:38:57.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2496,"title":"Optional Entries in Map Patterns","state":"OPEN","comments":12,"participants":3,"reactions":32,"createdAt":"2022-09-16T08:38:57.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2496,"title":"Optional Entries in Map Patterns","state":"OPEN","comments":12,"participants":3,"reactions":32,"createdAt":"2022-09-16T08:38:57.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2496,"title":"Optional Entries in Map Patterns","state":"OPEN","comments":12,"participants":3,"reactions":32,"createdAt":"2022-09-16T08:38:57.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":835,"title":"Add access modifiers","state":"OPEN","comments":7,"participants":7,"reactions":32,"createdAt":"2020-02-11T20:58:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":835,"title":"Add access modifiers","state":"OPEN","comments":7,"participants":7,"reactions":32,"createdAt":"2020-02-11T20:58:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":835,"title":"Add access modifiers","state":"OPEN","comments":7,"participants":7,"reactions":32,"createdAt":"2020-02-11T20:58:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2009,"title":"With expressions","state":"OPEN","comments":23,"participants":11,"reactions":31,"createdAt":"2021-12-03T02:25:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2009,"title":"With expressions","state":"OPEN","comments":23,"participants":11,"reactions":31,"createdAt":"2021-12-03T02:25:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2009,"title":"With expressions","state":"OPEN","comments":23,"participants":11,"reactions":31,"createdAt":"2021-12-03T02:25:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2009,"title":"With expressions","state":"OPEN","comments":23,"participants":11,"reactions":31,"createdAt":"2021-12-03T02:25:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1660,"title":"Switch statements on ints should accept ranges","state":"OPEN","comments":9,"participants":5,"reactions":31,"createdAt":"2021-06-01T00:08:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1660,"title":"Switch statements on ints should accept ranges","state":"OPEN","comments":9,"participants":5,"reactions":31,"createdAt":"2021-06-01T00:08:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1660,"title":"Switch statements on ints should accept ranges","state":"OPEN","comments":9,"participants":5,"reactions":31,"createdAt":"2021-06-01T00:08:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1660,"title":"Switch statements on ints should accept ranges","state":"OPEN","comments":9,"participants":5,"reactions":31,"createdAt":"2021-06-01T00:08:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1420,"title":"Declaration expressions and declaration promotion","state":"OPEN","comments":31,"participants":7,"reactions":31,"createdAt":"2021-01-27T11:29:33.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1420,"title":"Declaration expressions and declaration promotion","state":"OPEN","comments":31,"participants":7,"reactions":31,"createdAt":"2021-01-27T11:29:33.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1420,"title":"Declaration expressions and declaration promotion","state":"OPEN","comments":31,"participants":7,"reactions":31,"createdAt":"2021-01-27T11:29:33.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2025,"title":"Control-flow in expressions","state":"OPEN","comments":35,"participants":13,"reactions":30,"createdAt":"2021-12-13T00:54:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2025,"title":"Control-flow in expressions","state":"OPEN","comments":35,"participants":13,"reactions":30,"createdAt":"2021-12-13T00:54:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2025,"title":"Control-flow in expressions","state":"OPEN","comments":35,"participants":13,"reactions":30,"createdAt":"2021-12-13T00:54:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2025,"title":"Control-flow in expressions","state":"OPEN","comments":35,"participants":13,"reactions":30,"createdAt":"2021-12-13T00:54:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1612,"title":"Allow some kind of structural typing","state":"OPEN","comments":27,"participants":10,"reactions":30,"createdAt":"2021-05-03T19:53:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1612,"title":"Allow some kind of structural typing","state":"OPEN","comments":27,"participants":10,"reactions":30,"createdAt":"2021-05-03T19:53:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1612,"title":"Allow some kind of structural typing","state":"OPEN","comments":27,"participants":10,"reactions":30,"createdAt":"2021-05-03T19:53:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1612,"title":"Allow some kind of structural typing","state":"OPEN","comments":27,"participants":10,"reactions":30,"createdAt":"2021-05-03T19:53:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1087,"title":"Infix function","state":"OPEN","comments":4,"participants":5,"reactions":30,"createdAt":"2020-07-13T10:33:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1087,"title":"Infix function","state":"OPEN","comments":4,"participants":5,"reactions":30,"createdAt":"2020-07-13T10:33:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1087,"title":"Infix function","state":"OPEN","comments":4,"participants":5,"reactions":30,"createdAt":"2020-07-13T10:33:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1087,"title":"Infix function","state":"OPEN","comments":4,"participants":5,"reactions":30,"createdAt":"2020-07-13T10:33:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":459,"title":"Allow type-checking type variables","state":"OPEN","comments":13,"participants":7,"reactions":30,"createdAt":"2019-07-19T20:45:29.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":459,"title":"Allow type-checking type variables","state":"OPEN","comments":13,"participants":7,"reactions":30,"createdAt":"2019-07-19T20:45:29.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":459,"title":"Allow type-checking type variables","state":"OPEN","comments":13,"participants":7,"reactions":30,"createdAt":"2019-07-19T20:45:29.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":459,"title":"Allow type-checking type variables","state":"OPEN","comments":13,"participants":7,"reactions":30,"createdAt":"2019-07-19T20:45:29.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3748,"title":"Add first class support for method forwarding","state":"OPEN","comments":9,"participants":2,"reactions":29,"createdAt":"2017-11-29T19:09:27.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3748,"title":"Add first class support for method forwarding","state":"OPEN","comments":9,"participants":2,"reactions":29,"createdAt":"2017-11-29T19:09:27.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3748,"title":"Add first class support for method forwarding","state":"OPEN","comments":9,"participants":2,"reactions":29,"createdAt":"2017-11-29T19:09:27.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3748,"title":"Add first class support for method forwarding","state":"OPEN","comments":9,"participants":2,"reactions":29,"createdAt":"2017-11-29T19:09:27.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2478,"title":"Make `Function` generic, and `Function<Record, Type>` denote a function type.","state":"OPEN","comments":15,"participants":8,"reactions":29,"createdAt":"2022-09-13T08:29:32.000Z","labels":["records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2478,"title":"Make `Function` generic, and `Function<Record, Type>` denote a function type.","state":"OPEN","comments":15,"participants":8,"reactions":29,"createdAt":"2022-09-13T08:29:32.000Z","labels":["records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2478,"title":"Make `Function` generic, and `Function<Record, Type>` denote a function type.","state":"OPEN","comments":15,"participants":8,"reactions":29,"createdAt":"2022-09-13T08:29:32.000Z","labels":["records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2306,"title":"Remove/redefine conditional expression syntax.","state":"OPEN","comments":8,"participants":8,"reactions":29,"createdAt":"2022-06-23T13:00:59.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2306,"title":"Remove/redefine conditional expression syntax.","state":"OPEN","comments":8,"participants":8,"reactions":29,"createdAt":"2022-06-23T13:00:59.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2306,"title":"Remove/redefine conditional expression syntax.","state":"OPEN","comments":8,"participants":8,"reactions":29,"createdAt":"2022-06-23T13:00:59.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1655,"title":"Adding higher-order type constructor to dart","state":"OPEN","comments":4,"participants":3,"reactions":29,"createdAt":"2021-05-30T18:39:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1655,"title":"Adding higher-order type constructor to dart","state":"OPEN","comments":4,"participants":3,"reactions":29,"createdAt":"2021-05-30T18:39:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1655,"title":"Adding higher-order type constructor to dart","state":"OPEN","comments":4,"participants":3,"reactions":29,"createdAt":"2021-05-30T18:39:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1224,"title":"Using `if (foo?.bar == somethingNotNull)` should promote `foo`","state":"OPEN","comments":32,"participants":10,"reactions":29,"createdAt":"2020-09-15T21:35:06.000Z","labels":["request","nnbd","flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1224,"title":"Using `if (foo?.bar == somethingNotNull)` should promote `foo`","state":"OPEN","comments":32,"participants":10,"reactions":29,"createdAt":"2020-09-15T21:35:06.000Z","labels":["request","nnbd","flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1224,"title":"Using `if (foo?.bar == somethingNotNull)` should promote `foo`","state":"OPEN","comments":32,"participants":10,"reactions":29,"createdAt":"2020-09-15T21:35:06.000Z","labels":["request","nnbd","flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1224,"title":"Using `if (foo?.bar == somethingNotNull)` should promote `foo`","state":"OPEN","comments":32,"participants":10,"reactions":29,"createdAt":"2020-09-15T21:35:06.000Z","labels":["request","nnbd","flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1889,"title":"Add a compile-time constant for platform","state":"OPEN","comments":17,"participants":12,"reactions":28,"createdAt":"2021-10-07T04:52:17.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1889,"title":"Add a compile-time constant for platform","state":"OPEN","comments":17,"participants":12,"reactions":28,"createdAt":"2021-10-07T04:52:17.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1889,"title":"Add a compile-time constant for platform","state":"OPEN","comments":17,"participants":12,"reactions":28,"createdAt":"2021-10-07T04:52:17.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1622,"title":"Should we have generic getters?","state":"OPEN","comments":11,"participants":6,"reactions":28,"createdAt":"2021-05-07T10:48:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1622,"title":"Should we have generic getters?","state":"OPEN","comments":11,"participants":6,"reactions":28,"createdAt":"2021-05-07T10:48:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1622,"title":"Should we have generic getters?","state":"OPEN","comments":11,"participants":6,"reactions":28,"createdAt":"2021-05-07T10:48:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":753,"title":"Feature: Sound use-site variance","state":"OPEN","comments":7,"participants":3,"reactions":28,"createdAt":"2019-12-19T10:33:47.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":753,"title":"Feature: Sound use-site variance","state":"OPEN","comments":7,"participants":3,"reactions":28,"createdAt":"2019-12-19T10:33:47.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":753,"title":"Feature: Sound use-site variance","state":"OPEN","comments":7,"participants":3,"reactions":28,"createdAt":"2019-12-19T10:33:47.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":753,"title":"Feature: Sound use-site variance","state":"OPEN","comments":7,"participants":3,"reactions":28,"createdAt":"2019-12-19T10:33:47.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1803,"title":"Allow mixins to declare factory constructors","state":"OPEN","comments":11,"participants":7,"reactions":27,"createdAt":"2021-08-12T22:34:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1803,"title":"Allow mixins to declare factory constructors","state":"OPEN","comments":11,"participants":7,"reactions":27,"createdAt":"2021-08-12T22:34:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1803,"title":"Allow mixins to declare factory constructors","state":"OPEN","comments":11,"participants":7,"reactions":27,"createdAt":"2021-08-12T22:34:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1803,"title":"Allow mixins to declare factory constructors","state":"OPEN","comments":11,"participants":7,"reactions":27,"createdAt":"2021-08-12T22:34:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1188,"title":"Proposal: context-gated field promotion with runtime checking","state":"OPEN","comments":23,"participants":7,"reactions":27,"createdAt":"2020-08-28T19:52:35.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1188,"title":"Proposal: context-gated field promotion with runtime checking","state":"OPEN","comments":23,"participants":7,"reactions":27,"createdAt":"2020-08-28T19:52:35.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1188,"title":"Proposal: context-gated field promotion with runtime checking","state":"OPEN","comments":23,"participants":7,"reactions":27,"createdAt":"2020-08-28T19:52:35.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":283,"title":"Problem: Adding a 2nd (or later) type parameter to a class breaks clients","state":"OPEN","comments":14,"participants":5,"reactions":27,"createdAt":"2019-03-21T20:58:48.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":283,"title":"Problem: Adding a 2nd (or later) type parameter to a class breaks clients","state":"OPEN","comments":14,"participants":5,"reactions":27,"createdAt":"2019-03-21T20:58:48.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":283,"title":"Problem: Adding a 2nd (or later) type parameter to a class breaks clients","state":"OPEN","comments":14,"participants":5,"reactions":27,"createdAt":"2019-03-21T20:58:48.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":283,"title":"Problem: Adding a 2nd (or later) type parameter to a class breaks clients","state":"OPEN","comments":14,"participants":5,"reactions":27,"createdAt":"2019-03-21T20:58:48.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2780,"title":"Make `MyEnum.aValue.anInstanceVariable` constant","state":"OPEN","comments":11,"participants":6,"reactions":26,"createdAt":"2023-01-18T20:54:56.000Z","labels":["small-feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2780,"title":"Make `MyEnum.aValue.anInstanceVariable` constant","state":"OPEN","comments":11,"participants":6,"reactions":26,"createdAt":"2023-01-18T20:54:56.000Z","labels":["small-feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2780,"title":"Make `MyEnum.aValue.anInstanceVariable` constant","state":"OPEN","comments":11,"participants":6,"reactions":26,"createdAt":"2023-01-18T20:54:56.000Z","labels":["small-feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2051,"title":"Add a \"try-with-resources\" or \"using\" style syntax for automatic resource management","state":"OPEN","comments":14,"participants":9,"reactions":26,"createdAt":"2018-03-11T07:46:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2051,"title":"Add a \"try-with-resources\" or \"using\" style syntax for automatic resource management","state":"OPEN","comments":14,"participants":9,"reactions":26,"createdAt":"2018-03-11T07:46:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2051,"title":"Add a \"try-with-resources\" or \"using\" style syntax for automatic resource management","state":"OPEN","comments":14,"participants":9,"reactions":26,"createdAt":"2018-03-11T07:46:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2051,"title":"Add a \"try-with-resources\" or \"using\" style syntax for automatic resource management","state":"OPEN","comments":14,"participants":9,"reactions":26,"createdAt":"2018-03-11T07:46:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1514,"title":"Shadowing a non-local variable","state":"OPEN","comments":83,"participants":16,"reactions":26,"createdAt":"2021-03-11T22:35:29.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1514,"title":"Shadowing a non-local variable","state":"OPEN","comments":83,"participants":16,"reactions":26,"createdAt":"2021-03-11T22:35:29.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1514,"title":"Shadowing a non-local variable","state":"OPEN","comments":83,"participants":16,"reactions":26,"createdAt":"2021-03-11T22:35:29.000Z","labels":["feature","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4462,"title":"Private Named Parameters","state":"OPEN","comments":13,"participants":6,"reactions":25,"createdAt":"2025-07-15T00:03:50.000Z","labels":["small-feature","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4462,"title":"Private Named Parameters","state":"OPEN","comments":13,"participants":6,"reactions":25,"createdAt":"2025-07-15T00:03:50.000Z","labels":["small-feature","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4462,"title":"Private Named Parameters","state":"OPEN","comments":13,"participants":6,"reactions":25,"createdAt":"2025-07-15T00:03:50.000Z","labels":["small-feature","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4404,"title":"Define local enums","state":"OPEN","comments":5,"participants":4,"reactions":25,"createdAt":"2025-06-10T12:26:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4404,"title":"Define local enums","state":"OPEN","comments":5,"participants":4,"reactions":25,"createdAt":"2025-06-10T12:26:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4404,"title":"Define local enums","state":"OPEN","comments":5,"participants":4,"reactions":25,"createdAt":"2025-06-10T12:26:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4343,"title":"Case expressions","state":"OPEN","comments":3,"participants":3,"reactions":25,"createdAt":"2025-04-30T15:29:42.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4343,"title":"Case expressions","state":"OPEN","comments":3,"participants":3,"reactions":25,"createdAt":"2025-04-30T15:29:42.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4343,"title":"Case expressions","state":"OPEN","comments":3,"participants":3,"reactions":25,"createdAt":"2025-04-30T15:29:42.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4084,"title":"Expressions that are \"as constant as possible\"","state":"OPEN","comments":20,"participants":8,"reactions":25,"createdAt":"2024-09-06T09:20:26.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4084,"title":"Expressions that are \"as constant as possible\"","state":"OPEN","comments":20,"participants":8,"reactions":25,"createdAt":"2024-09-06T09:20:26.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3059,"title":"If-case expressions","state":"OPEN","comments":11,"participants":7,"reactions":25,"createdAt":"2023-05-11T03:28:38.000Z","labels":["feature","patterns","feature-completeness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3059,"title":"If-case expressions","state":"OPEN","comments":11,"participants":7,"reactions":25,"createdAt":"2023-05-11T03:28:38.000Z","labels":["feature","patterns","feature-completeness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3059,"title":"If-case expressions","state":"OPEN","comments":11,"participants":7,"reactions":25,"createdAt":"2023-05-11T03:28:38.000Z","labels":["feature","patterns","feature-completeness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3025,"title":"Self type","state":"OPEN","comments":12,"participants":7,"reactions":25,"createdAt":"2023-04-27T21:38:00.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3025,"title":"Self type","state":"OPEN","comments":12,"participants":7,"reactions":25,"createdAt":"2023-04-27T21:38:00.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3025,"title":"Self type","state":"OPEN","comments":12,"participants":7,"reactions":25,"createdAt":"2023-04-27T21:38:00.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2399,"title":"[breaking change] Remove implicit tearoff of `call` methods","state":"OPEN","comments":27,"participants":13,"reactions":25,"createdAt":"2022-08-10T15:13:07.000Z","labels":["breaking-change"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2399,"title":"[breaking change] Remove implicit tearoff of `call` methods","state":"OPEN","comments":27,"participants":13,"reactions":25,"createdAt":"2022-08-10T15:13:07.000Z","labels":["breaking-change"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2399,"title":"[breaking change] Remove implicit tearoff of `call` methods","state":"OPEN","comments":27,"participants":13,"reactions":25,"createdAt":"2022-08-10T15:13:07.000Z","labels":["breaking-change"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2222,"title":"User-Defined Constant Functions","state":"OPEN","comments":3,"participants":4,"reactions":25,"createdAt":"2022-04-29T17:30:14.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2222,"title":"User-Defined Constant Functions","state":"OPEN","comments":3,"participants":4,"reactions":25,"createdAt":"2022-04-29T17:30:14.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2222,"title":"User-Defined Constant Functions","state":"OPEN","comments":3,"participants":4,"reactions":25,"createdAt":"2022-04-29T17:30:14.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":823,"title":"Constant constructor call should be legal in another constant constructor definition.","state":"OPEN","comments":37,"participants":13,"reactions":25,"createdAt":"2014-09-16T11:25:33.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":823,"title":"Constant constructor call should be legal in another constant constructor definition.","state":"OPEN","comments":37,"participants":13,"reactions":25,"createdAt":"2014-09-16T11:25:33.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":823,"title":"Constant constructor call should be legal in another constant constructor definition.","state":"OPEN","comments":37,"participants":13,"reactions":25,"createdAt":"2014-09-16T11:25:33.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":823,"title":"Constant constructor call should be legal in another constant constructor definition.","state":"OPEN","comments":37,"participants":13,"reactions":25,"createdAt":"2014-09-16T11:25:33.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":171,"title":"Improved loop constructs and scoping.","state":"OPEN","comments":6,"participants":7,"reactions":25,"createdAt":"2019-01-10T13:25:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":171,"title":"Improved loop constructs and scoping.","state":"OPEN","comments":6,"participants":7,"reactions":25,"createdAt":"2019-01-10T13:25:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":171,"title":"Improved loop constructs and scoping.","state":"OPEN","comments":6,"participants":7,"reactions":25,"createdAt":"2019-01-10T13:25:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":117,"title":"Make it easy/efficient to create immutable collections via literals","state":"OPEN","comments":5,"participants":3,"reactions":25,"createdAt":"2018-11-29T16:40:10.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":117,"title":"Make it easy/efficient to create immutable collections via literals","state":"OPEN","comments":5,"participants":3,"reactions":25,"createdAt":"2018-11-29T16:40:10.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":117,"title":"Make it easy/efficient to create immutable collections via literals","state":"OPEN","comments":5,"participants":3,"reactions":25,"createdAt":"2018-11-29T16:40:10.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2709,"title":"Multiple upper bounds","state":"OPEN","comments":55,"participants":13,"reactions":24,"createdAt":"2022-12-10T03:24:24.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2709,"title":"Multiple upper bounds","state":"OPEN","comments":55,"participants":13,"reactions":24,"createdAt":"2022-12-10T03:24:24.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2709,"title":"Multiple upper bounds","state":"OPEN","comments":55,"participants":13,"reactions":24,"createdAt":"2022-12-10T03:24:24.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2537,"title":"A \"guard-let\"-like statement form","state":"OPEN","comments":46,"participants":15,"reactions":24,"createdAt":"2022-09-29T23:53:39.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2537,"title":"A \"guard-let\"-like statement form","state":"OPEN","comments":46,"participants":15,"reactions":24,"createdAt":"2022-09-29T23:53:39.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2537,"title":"A \"guard-let\"-like statement form","state":"OPEN","comments":46,"participants":15,"reactions":24,"createdAt":"2022-09-29T23:53:39.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2477,"title":"Non-growable list literal syntax","state":"OPEN","comments":37,"participants":13,"reactions":24,"createdAt":"2022-09-12T14:48:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2477,"title":"Non-growable list literal syntax","state":"OPEN","comments":37,"participants":13,"reactions":24,"createdAt":"2022-09-12T14:48:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2477,"title":"Non-growable list literal syntax","state":"OPEN","comments":37,"participants":13,"reactions":24,"createdAt":"2022-09-12T14:48:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1987,"title":"Add support for \"js tagged string like\" feature","state":"OPEN","comments":5,"participants":5,"reactions":24,"createdAt":"2017-08-27T10:13:57.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1987,"title":"Add support for \"js tagged string like\" feature","state":"OPEN","comments":5,"participants":5,"reactions":24,"createdAt":"2017-08-27T10:13:57.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1987,"title":"Add support for \"js tagged string like\" feature","state":"OPEN","comments":5,"participants":5,"reactions":24,"createdAt":"2017-08-27T10:13:57.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1136,"title":"Add variable observers willSet didSet","state":"OPEN","comments":2,"participants":3,"reactions":24,"createdAt":"2020-08-06T09:43:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1136,"title":"Add variable observers willSet didSet","state":"OPEN","comments":2,"participants":3,"reactions":24,"createdAt":"2020-08-06T09:43:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1136,"title":"Add variable observers willSet didSet","state":"OPEN","comments":2,"participants":3,"reactions":24,"createdAt":"2020-08-06T09:43:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4275,"title":"Allow punctuation based alternatives to keywords?","state":"OPEN","comments":15,"participants":10,"reactions":23,"createdAt":"2025-02-27T10:27:11.000Z","labels":["feature","enhanced-syntax","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4275,"title":"Allow punctuation based alternatives to keywords?","state":"OPEN","comments":15,"participants":10,"reactions":23,"createdAt":"2025-02-27T10:27:11.000Z","labels":["feature","enhanced-syntax","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4275,"title":"Allow punctuation based alternatives to keywords?","state":"OPEN","comments":15,"participants":10,"reactions":23,"createdAt":"2025-02-27T10:27:11.000Z","labels":["feature","enhanced-syntax","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3117,"title":"Allow Multi-Statement Bodies in Switch Expressions","state":"OPEN","comments":13,"participants":5,"reactions":23,"createdAt":"2023-05-29T01:29:24.000Z","labels":["state-duplicate","feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3117,"title":"Allow Multi-Statement Bodies in Switch Expressions","state":"OPEN","comments":13,"participants":5,"reactions":23,"createdAt":"2023-05-29T01:29:24.000Z","labels":["state-duplicate","feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3117,"title":"Allow Multi-Statement Bodies in Switch Expressions","state":"OPEN","comments":13,"participants":5,"reactions":23,"createdAt":"2023-05-29T01:29:24.000Z","labels":["state-duplicate","feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3065,"title":"Switch expressions with some cases that need a body","state":"OPEN","comments":55,"participants":9,"reactions":23,"createdAt":"2023-05-11T15:04:51.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3065,"title":"Switch expressions with some cases that need a body","state":"OPEN","comments":55,"participants":9,"reactions":23,"createdAt":"2023-05-11T15:04:51.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3065,"title":"Switch expressions with some cases that need a body","state":"OPEN","comments":55,"participants":9,"reactions":23,"createdAt":"2023-05-11T15:04:51.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2313,"title":"Conditional instance members and constructors","state":"OPEN","comments":11,"participants":3,"reactions":23,"createdAt":"2022-06-24T18:35:33.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2313,"title":"Conditional instance members and constructors","state":"OPEN","comments":11,"participants":3,"reactions":23,"createdAt":"2022-06-24T18:35:33.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2074,"title":"Support for Swift style if-let and guard-let constructs.","state":"OPEN","comments":22,"participants":5,"reactions":23,"createdAt":"2022-01-20T00:44:59.000Z","labels":["field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2074,"title":"Support for Swift style if-let and guard-let constructs.","state":"OPEN","comments":22,"participants":5,"reactions":23,"createdAt":"2022-01-20T00:44:59.000Z","labels":["field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2074,"title":"Support for Swift style if-let and guard-let constructs.","state":"OPEN","comments":22,"participants":5,"reactions":23,"createdAt":"2022-01-20T00:44:59.000Z","labels":["field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2033,"title":"Add \"asyncOr\", similar to \"async\", for FutureOr","state":"OPEN","comments":31,"participants":5,"reactions":23,"createdAt":"2021-12-20T14:18:15.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2033,"title":"Add \"asyncOr\", similar to \"async\", for FutureOr","state":"OPEN","comments":31,"participants":5,"reactions":23,"createdAt":"2021-12-20T14:18:15.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2033,"title":"Add \"asyncOr\", similar to \"async\", for FutureOr","state":"OPEN","comments":31,"participants":5,"reactions":23,"createdAt":"2021-12-20T14:18:15.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1988,"title":"Tagged strings","state":"OPEN","comments":19,"participants":11,"reactions":23,"createdAt":"2021-11-23T23:04:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1988,"title":"Tagged strings","state":"OPEN","comments":19,"participants":11,"reactions":23,"createdAt":"2021-11-23T23:04:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1988,"title":"Tagged strings","state":"OPEN","comments":19,"participants":11,"reactions":23,"createdAt":"2021-11-23T23:04:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":831,"title":"Optionally named parameters","state":"OPEN","comments":21,"participants":6,"reactions":23,"createdAt":"2020-02-10T17:30:40.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":831,"title":"Optionally named parameters","state":"OPEN","comments":21,"participants":6,"reactions":23,"createdAt":"2020-02-10T17:30:40.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":831,"title":"Optionally named parameters","state":"OPEN","comments":21,"participants":6,"reactions":23,"createdAt":"2020-02-10T17:30:40.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":50,"title":"Enums are too heavy for large-scale use, but are the only feature affording easy completion.","state":"OPEN","comments":18,"participants":11,"reactions":23,"createdAt":"2018-10-17T08:12:48.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":50,"title":"Enums are too heavy for large-scale use, but are the only feature affording easy completion.","state":"OPEN","comments":18,"participants":11,"reactions":23,"createdAt":"2018-10-17T08:12:48.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":50,"title":"Enums are too heavy for large-scale use, but are the only feature affording easy completion.","state":"OPEN","comments":18,"participants":11,"reactions":23,"createdAt":"2018-10-17T08:12:48.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4426,"title":"Simpler parameters","state":"OPEN","comments":21,"participants":9,"reactions":22,"createdAt":"2025-06-26T18:06:29.000Z","labels":["small-feature","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3964,"title":"Partial Record destructuring","state":"OPEN","comments":12,"participants":6,"reactions":22,"createdAt":"2024-07-05T13:49:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3964,"title":"Partial Record destructuring","state":"OPEN","comments":12,"participants":6,"reactions":22,"createdAt":"2024-07-05T13:49:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3964,"title":"Partial Record destructuring","state":"OPEN","comments":12,"participants":6,"reactions":22,"createdAt":"2024-07-05T13:49:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3842,"title":"No implicit `dynamic`","state":"OPEN","comments":8,"participants":4,"reactions":22,"createdAt":"2024-05-28T07:15:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3842,"title":"No implicit `dynamic`","state":"OPEN","comments":8,"participants":4,"reactions":22,"createdAt":"2024-05-28T07:15:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3842,"title":"No implicit `dynamic`","state":"OPEN","comments":8,"participants":4,"reactions":22,"createdAt":"2024-05-28T07:15:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2269,"title":"Provide explicit access to the default values of parameters","state":"OPEN","comments":21,"participants":9,"reactions":22,"createdAt":"2022-06-01T12:57:15.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2269,"title":"Provide explicit access to the default values of parameters","state":"OPEN","comments":21,"participants":9,"reactions":22,"createdAt":"2022-06-01T12:57:15.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2269,"title":"Provide explicit access to the default values of parameters","state":"OPEN","comments":21,"participants":9,"reactions":22,"createdAt":"2022-06-01T12:57:15.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1711,"title":"Allow static and instance members to have the same name.","state":"OPEN","comments":15,"participants":8,"reactions":22,"createdAt":"2021-06-28T06:12:25.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1711,"title":"Allow static and instance members to have the same name.","state":"OPEN","comments":15,"participants":8,"reactions":22,"createdAt":"2021-06-28T06:12:25.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1711,"title":"Allow static and instance members to have the same name.","state":"OPEN","comments":15,"participants":8,"reactions":22,"createdAt":"2021-06-28T06:12:25.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1709,"title":"Glob or RegExp import/export","state":"OPEN","comments":10,"participants":4,"reactions":22,"createdAt":"2021-06-26T10:58:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1709,"title":"Glob or RegExp import/export","state":"OPEN","comments":10,"participants":4,"reactions":22,"createdAt":"2021-06-26T10:58:22.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1397,"title":"Type promotion for `this`","state":"OPEN","comments":19,"participants":5,"reactions":22,"createdAt":"2021-01-07T14:08:12.000Z","labels":["small-feature","flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1397,"title":"Type promotion for `this`","state":"OPEN","comments":19,"participants":5,"reactions":22,"createdAt":"2021-01-07T14:08:12.000Z","labels":["small-feature","flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1397,"title":"Type promotion for `this`","state":"OPEN","comments":19,"participants":5,"reactions":22,"createdAt":"2021-01-07T14:08:12.000Z","labels":["small-feature","flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1264,"title":"Make '(' and ')' optional in statements, make ';' optional at the end of lines","state":"OPEN","comments":7,"participants":5,"reactions":22,"createdAt":"2020-10-22T19:14:38.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1264,"title":"Make '(' and ')' optional in statements, make ';' optional at the end of lines","state":"OPEN","comments":7,"participants":5,"reactions":22,"createdAt":"2020-10-22T19:14:38.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":678,"title":"Partial classes - feature proposal","state":"OPEN","comments":7,"participants":4,"reactions":22,"createdAt":"2019-11-11T23:47:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":678,"title":"Partial classes - feature proposal","state":"OPEN","comments":7,"participants":4,"reactions":22,"createdAt":"2019-11-11T23:47:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":678,"title":"Partial classes - feature proposal","state":"OPEN","comments":7,"participants":4,"reactions":22,"createdAt":"2019-11-11T23:47:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":260,"title":"Anonymous methods","state":"OPEN","comments":32,"participants":7,"reactions":22,"createdAt":"2019-03-08T17:19:25.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":260,"title":"Anonymous methods","state":"OPEN","comments":32,"participants":7,"reactions":22,"createdAt":"2019-03-08T17:19:25.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":260,"title":"Anonymous methods","state":"OPEN","comments":32,"participants":7,"reactions":22,"createdAt":"2019-03-08T17:19:25.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4205,"title":"Inline catching","state":"OPEN","comments":15,"participants":7,"reactions":21,"createdAt":"2024-12-13T03:24:43.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4205,"title":"Inline catching","state":"OPEN","comments":15,"participants":7,"reactions":21,"createdAt":"2024-12-13T03:24:43.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4205,"title":"Inline catching","state":"OPEN","comments":15,"participants":7,"reactions":21,"createdAt":"2024-12-13T03:24:43.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3834,"title":"Parameter default scopes","state":"OPEN","comments":152,"participants":12,"reactions":21,"createdAt":"2024-05-24T09:44:49.000Z","labels":["feature","dot-shorthands","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3834,"title":"Parameter default scopes","state":"OPEN","comments":152,"participants":12,"reactions":21,"createdAt":"2024-05-24T09:44:49.000Z","labels":["feature","dot-shorthands","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3680,"title":"Late parameters, late-init-query operator, parameter element","state":"OPEN","comments":24,"participants":10,"reactions":21,"createdAt":"2024-03-29T10:45:29.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3680,"title":"Late parameters, late-init-query operator, parameter element","state":"OPEN","comments":24,"participants":10,"reactions":21,"createdAt":"2024-03-29T10:45:29.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3680,"title":"Late parameters, late-init-query operator, parameter element","state":"OPEN","comments":24,"participants":10,"reactions":21,"createdAt":"2024-03-29T10:45:29.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3356,"title":"Allow constant factory constructors to return a (potentially) constant value.","state":"OPEN","comments":9,"participants":4,"reactions":21,"createdAt":"2023-09-18T09:12:28.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3356,"title":"Allow constant factory constructors to return a (potentially) constant value.","state":"OPEN","comments":9,"participants":4,"reactions":21,"createdAt":"2023-09-18T09:12:28.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3356,"title":"Allow constant factory constructors to return a (potentially) constant value.","state":"OPEN","comments":9,"participants":4,"reactions":21,"createdAt":"2023-09-18T09:12:28.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2393,"title":"Remove type literals from the language.","state":"OPEN","comments":2,"participants":3,"reactions":21,"createdAt":"2022-08-08T08:34:18.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2393,"title":"Remove type literals from the language.","state":"OPEN","comments":2,"participants":3,"reactions":21,"createdAt":"2022-08-08T08:34:18.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2393,"title":"Remove type literals from the language.","state":"OPEN","comments":2,"participants":3,"reactions":21,"createdAt":"2022-08-08T08:34:18.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1398,"title":"Infer Future<void> for await Future.delayed()","state":"OPEN","comments":5,"participants":5,"reactions":21,"createdAt":"2021-01-12T01:03:36.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1398,"title":"Infer Future<void> for await Future.delayed()","state":"OPEN","comments":5,"participants":5,"reactions":21,"createdAt":"2021-01-12T01:03:36.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1398,"title":"Infer Future<void> for await Future.delayed()","state":"OPEN","comments":5,"participants":5,"reactions":21,"createdAt":"2021-01-12T01:03:36.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":607,"title":"Support for defining a new operator","state":"OPEN","comments":2,"participants":2,"reactions":21,"createdAt":"2019-10-07T05:00:39.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":607,"title":"Support for defining a new operator","state":"OPEN","comments":2,"participants":2,"reactions":21,"createdAt":"2019-10-07T05:00:39.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":607,"title":"Support for defining a new operator","state":"OPEN","comments":2,"participants":2,"reactions":21,"createdAt":"2019-10-07T05:00:39.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":395,"title":"Dart thinks getter and function return dynamic unless return type specified","state":"OPEN","comments":13,"participants":11,"reactions":21,"createdAt":"2019-06-07T15:25:39.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":395,"title":"Dart thinks getter and function return dynamic unless return type specified","state":"OPEN","comments":13,"participants":11,"reactions":21,"createdAt":"2019-06-07T15:25:39.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":395,"title":"Dart thinks getter and function return dynamic unless return type specified","state":"OPEN","comments":13,"participants":11,"reactions":21,"createdAt":"2019-06-07T15:25:39.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":190,"title":"operators to replace \"== null\" and \"!= null\"","state":"OPEN","comments":31,"participants":14,"reactions":21,"createdAt":"2019-01-23T09:42:08.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":190,"title":"operators to replace \"== null\" and \"!= null\"","state":"OPEN","comments":31,"participants":14,"reactions":21,"createdAt":"2019-01-23T09:42:08.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3132,"title":"Inferred record types + optional fields for record expressions?","state":"OPEN","comments":8,"participants":5,"reactions":20,"createdAt":"2023-06-06T16:09:51.000Z","labels":["feature","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3132,"title":"Inferred record types + optional fields for record expressions?","state":"OPEN","comments":8,"participants":5,"reactions":20,"createdAt":"2023-06-06T16:09:51.000Z","labels":["feature","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3132,"title":"Inferred record types + optional fields for record expressions?","state":"OPEN","comments":8,"participants":5,"reactions":20,"createdAt":"2023-06-06T16:09:51.000Z","labels":["feature","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3062,"title":"Boolean pattern matches","state":"OPEN","comments":7,"participants":5,"reactions":20,"createdAt":"2023-05-11T04:34:16.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3062,"title":"Boolean pattern matches","state":"OPEN","comments":7,"participants":5,"reactions":20,"createdAt":"2023-05-11T04:34:16.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3062,"title":"Boolean pattern matches","state":"OPEN","comments":7,"participants":5,"reactions":20,"createdAt":"2023-05-11T04:34:16.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2194,"title":"Dart typeclasses","state":"OPEN","comments":1,"participants":2,"reactions":20,"createdAt":"2022-04-07T11:55:02.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2194,"title":"Dart typeclasses","state":"OPEN","comments":1,"participants":2,"reactions":20,"createdAt":"2022-04-07T11:55:02.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2194,"title":"Dart typeclasses","state":"OPEN","comments":1,"participants":2,"reactions":20,"createdAt":"2022-04-07T11:55:02.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1684,"title":"Constant parameters","state":"OPEN","comments":8,"participants":6,"reactions":20,"createdAt":"2021-06-16T14:50:19.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1684,"title":"Constant parameters","state":"OPEN","comments":8,"participants":6,"reactions":20,"createdAt":"2021-06-16T14:50:19.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1684,"title":"Constant parameters","state":"OPEN","comments":8,"participants":6,"reactions":20,"createdAt":"2021-06-16T14:50:19.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":360,"title":"Request: calling a function only when a parameter is not null.","state":"OPEN","comments":14,"participants":8,"reactions":20,"createdAt":"2019-05-17T17:55:08.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":360,"title":"Request: calling a function only when a parameter is not null.","state":"OPEN","comments":14,"participants":8,"reactions":20,"createdAt":"2019-05-17T17:55:08.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":360,"title":"Request: calling a function only when a parameter is not null.","state":"OPEN","comments":14,"participants":8,"reactions":20,"createdAt":"2019-05-17T17:55:08.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4321,"title":"Introduce throws keyword (like Swift) for marking throwable functions","state":"OPEN","comments":16,"participants":11,"reactions":19,"createdAt":"2025-04-09T00:04:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4321,"title":"Introduce throws keyword (like Swift) for marking throwable functions","state":"OPEN","comments":16,"participants":11,"reactions":19,"createdAt":"2025-04-09T00:04:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4321,"title":"Introduce throws keyword (like Swift) for marking throwable functions","state":"OPEN","comments":16,"participants":11,"reactions":19,"createdAt":"2025-04-09T00:04:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4057,"title":"Reusable Pattern Matching","state":"OPEN","comments":17,"participants":4,"reactions":19,"createdAt":"2024-08-25T16:16:11.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4057,"title":"Reusable Pattern Matching","state":"OPEN","comments":17,"participants":4,"reactions":19,"createdAt":"2024-08-25T16:16:11.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4057,"title":"Reusable Pattern Matching","state":"OPEN","comments":17,"participants":4,"reactions":19,"createdAt":"2024-08-25T16:16:11.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3322,"title":"Allow shadowing local final variables","state":"OPEN","comments":19,"participants":9,"reactions":19,"createdAt":"2023-09-04T16:42:26.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3322,"title":"Allow shadowing local final variables","state":"OPEN","comments":19,"participants":9,"reactions":19,"createdAt":"2023-09-04T16:42:26.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3322,"title":"Allow shadowing local final variables","state":"OPEN","comments":19,"participants":9,"reactions":19,"createdAt":"2023-09-04T16:42:26.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2401,"title":"Deprecate `new` keyword WRT `new SomeClass`","state":"OPEN","comments":12,"participants":9,"reactions":19,"createdAt":"2022-08-10T19:27:05.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2401,"title":"Deprecate `new` keyword WRT `new SomeClass`","state":"OPEN","comments":12,"participants":9,"reactions":19,"createdAt":"2022-08-10T19:27:05.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2401,"title":"Deprecate `new` keyword WRT `new SomeClass`","state":"OPEN","comments":12,"participants":9,"reactions":19,"createdAt":"2022-08-10T19:27:05.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2316,"title":"Allow `collection if` in argument lists","state":"OPEN","comments":15,"participants":5,"reactions":19,"createdAt":"2022-06-27T17:00:20.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2316,"title":"Allow `collection if` in argument lists","state":"OPEN","comments":15,"participants":5,"reactions":19,"createdAt":"2022-06-27T17:00:20.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2316,"title":"Allow `collection if` in argument lists","state":"OPEN","comments":15,"participants":5,"reactions":19,"createdAt":"2022-06-27T17:00:20.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":886,"title":"Add syntax for character code constants.","state":"OPEN","comments":19,"participants":8,"reactions":19,"createdAt":"2012-08-08T12:55:59.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":886,"title":"Add syntax for character code constants.","state":"OPEN","comments":19,"participants":8,"reactions":19,"createdAt":"2012-08-08T12:55:59.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":886,"title":"Add syntax for character code constants.","state":"OPEN","comments":19,"participants":8,"reactions":19,"createdAt":"2012-08-08T12:55:59.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":359,"title":"Allow referencing type parameters in static fields","state":"OPEN","comments":19,"participants":10,"reactions":19,"createdAt":"2019-05-16T23:50:13.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":359,"title":"Allow referencing type parameters in static fields","state":"OPEN","comments":19,"participants":10,"reactions":19,"createdAt":"2019-05-16T23:50:13.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":359,"title":"Allow referencing type parameters in static fields","state":"OPEN","comments":19,"participants":10,"reactions":19,"createdAt":"2019-05-16T23:50:13.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":345,"title":"Consider adding RAII","state":"OPEN","comments":13,"participants":5,"reactions":19,"createdAt":"2019-05-08T17:43:25.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":345,"title":"Consider adding RAII","state":"OPEN","comments":13,"participants":5,"reactions":19,"createdAt":"2019-05-08T17:43:25.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4154,"title":"Augmentations","state":"OPEN","comments":2,"participants":2,"reactions":18,"createdAt":"2024-11-06T15:56:08.000Z","labels":["feature","augmentations"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4154,"title":"Augmentations","state":"OPEN","comments":2,"participants":2,"reactions":18,"createdAt":"2024-11-06T15:56:08.000Z","labels":["feature","augmentations"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4154,"title":"Augmentations","state":"OPEN","comments":2,"participants":2,"reactions":18,"createdAt":"2024-11-06T15:56:08.000Z","labels":["feature","augmentations"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3312,"title":"Allow `default` in a switch expression (as an alias for `_`)","state":"OPEN","comments":16,"participants":8,"reactions":18,"createdAt":"2023-08-30T15:34:15.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3306,"title":"Support ??= as default value operator","state":"OPEN","comments":8,"participants":4,"reactions":18,"createdAt":"2023-08-28T14:47:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3306,"title":"Support ??= as default value operator","state":"OPEN","comments":8,"participants":4,"reactions":18,"createdAt":"2023-08-28T14:47:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3306,"title":"Support ??= as default value operator","state":"OPEN","comments":8,"participants":4,"reactions":18,"createdAt":"2023-08-28T14:47:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2517,"title":"Discontinue old-style typedef.","state":"OPEN","comments":4,"participants":4,"reactions":18,"createdAt":"2022-09-23T17:02:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2517,"title":"Discontinue old-style typedef.","state":"OPEN","comments":4,"participants":4,"reactions":18,"createdAt":"2022-09-23T17:02:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1774,"title":"Variadic Generics","state":"OPEN","comments":15,"participants":7,"reactions":18,"createdAt":"2021-08-01T12:49:24.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1774,"title":"Variadic Generics","state":"OPEN","comments":15,"participants":7,"reactions":18,"createdAt":"2021-08-01T12:49:24.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1774,"title":"Variadic Generics","state":"OPEN","comments":15,"participants":7,"reactions":18,"createdAt":"2021-08-01T12:49:24.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1559,"title":"\"not\" instead of \"!\" for negation / add new keyword \"not\"","state":"OPEN","comments":6,"participants":6,"reactions":18,"createdAt":"2021-04-04T16:09:35.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1559,"title":"\"not\" instead of \"!\" for negation / add new keyword \"not\"","state":"OPEN","comments":6,"participants":6,"reactions":18,"createdAt":"2021-04-04T16:09:35.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1559,"title":"\"not\" instead of \"!\" for negation / add new keyword \"not\"","state":"OPEN","comments":6,"participants":6,"reactions":18,"createdAt":"2021-04-04T16:09:35.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1478,"title":"String interpolation elements","state":"OPEN","comments":5,"participants":1,"reactions":18,"createdAt":"2021-02-26T09:09:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1478,"title":"String interpolation elements","state":"OPEN","comments":5,"participants":1,"reactions":18,"createdAt":"2021-02-26T09:09:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1478,"title":"String interpolation elements","state":"OPEN","comments":5,"participants":1,"reactions":18,"createdAt":"2021-02-26T09:09:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1402,"title":"Allow trailing commas in constructor initializer lists and generic type lists","state":"OPEN","comments":5,"participants":4,"reactions":18,"createdAt":"2021-01-15T09:01:58.000Z","labels":["feature","enhanced-syntax"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1402,"title":"Allow trailing commas in constructor initializer lists and generic type lists","state":"OPEN","comments":5,"participants":4,"reactions":18,"createdAt":"2021-01-15T09:01:58.000Z","labels":["feature","enhanced-syntax"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1402,"title":"Allow trailing commas in constructor initializer lists and generic type lists","state":"OPEN","comments":5,"participants":4,"reactions":18,"createdAt":"2021-01-15T09:01:58.000Z","labels":["feature","enhanced-syntax"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":416,"title":"Proposal: guards","state":"OPEN","comments":13,"participants":8,"reactions":18,"createdAt":"2019-06-21T18:05:32.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":416,"title":"Proposal: guards","state":"OPEN","comments":13,"participants":8,"reactions":18,"createdAt":"2019-06-21T18:05:32.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":416,"title":"Proposal: guards","state":"OPEN","comments":13,"participants":8,"reactions":18,"createdAt":"2019-06-21T18:05:32.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4246,"title":"Enhanced Constructors","state":"OPEN","comments":3,"participants":3,"reactions":17,"createdAt":"2025-01-31T19:14:47.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4246,"title":"Enhanced Constructors","state":"OPEN","comments":3,"participants":3,"reactions":17,"createdAt":"2025-01-31T19:14:47.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4124,"title":"Allow the type of an object pattern to be inferred when specified as `_`","state":"OPEN","comments":47,"participants":9,"reactions":17,"createdAt":"2024-10-08T14:21:29.000Z","labels":["small-feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4124,"title":"Allow the type of an object pattern to be inferred when specified as `_`","state":"OPEN","comments":47,"participants":9,"reactions":17,"createdAt":"2024-10-08T14:21:29.000Z","labels":["small-feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4124,"title":"Allow the type of an object pattern to be inferred when specified as `_`","state":"OPEN","comments":47,"participants":9,"reactions":17,"createdAt":"2024-10-08T14:21:29.000Z","labels":["small-feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3673,"title":"Allow pattern matching on error handling","state":"OPEN","comments":0,"participants":1,"reactions":17,"createdAt":"2024-03-26T12:45:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3673,"title":"Allow pattern matching on error handling","state":"OPEN","comments":0,"participants":1,"reactions":17,"createdAt":"2024-03-26T12:45:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3673,"title":"Allow pattern matching on error handling","state":"OPEN","comments":0,"participants":1,"reactions":17,"createdAt":"2024-03-26T12:45:34.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3296,"title":"Set patterns","state":"OPEN","comments":8,"participants":4,"reactions":17,"createdAt":"2023-08-21T08:43:01.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3296,"title":"Set patterns","state":"OPEN","comments":8,"participants":4,"reactions":17,"createdAt":"2023-08-21T08:43:01.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3296,"title":"Set patterns","state":"OPEN","comments":8,"participants":4,"reactions":17,"createdAt":"2023-08-21T08:43:01.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3102,"title":"Pattern-esque syntax for terser named arguments/record fields","state":"OPEN","comments":4,"participants":4,"reactions":17,"createdAt":"2023-05-23T01:28:42.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3102,"title":"Pattern-esque syntax for terser named arguments/record fields","state":"OPEN","comments":4,"participants":4,"reactions":17,"createdAt":"2023-05-23T01:28:42.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3102,"title":"Pattern-esque syntax for terser named arguments/record fields","state":"OPEN","comments":4,"participants":4,"reactions":17,"createdAt":"2023-05-23T01:28:42.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2567,"title":"Algebraic Effect handlers","state":"OPEN","comments":16,"participants":7,"reactions":17,"createdAt":"2022-10-10T03:47:43.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2567,"title":"Algebraic Effect handlers","state":"OPEN","comments":16,"participants":7,"reactions":17,"createdAt":"2022-10-10T03:47:43.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":884,"title":"Interface default methods","state":"OPEN","comments":20,"participants":8,"reactions":17,"createdAt":"2020-03-16T08:32:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":884,"title":"Interface default methods","state":"OPEN","comments":20,"participants":8,"reactions":17,"createdAt":"2020-03-16T08:32:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":884,"title":"Interface default methods","state":"OPEN","comments":20,"participants":8,"reactions":17,"createdAt":"2020-03-16T08:32:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":137,"title":"Problem: It is impossible to implement a Kotlin like copy method in Dart if you have \"nullable\" variables","state":"OPEN","comments":13,"participants":9,"reactions":17,"createdAt":"2018-12-17T09:45:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":137,"title":"Problem: It is impossible to implement a Kotlin like copy method in Dart if you have \"nullable\" variables","state":"OPEN","comments":13,"participants":9,"reactions":17,"createdAt":"2018-12-17T09:45:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":137,"title":"Problem: It is impossible to implement a Kotlin like copy method in Dart if you have \"nullable\" variables","state":"OPEN","comments":13,"participants":9,"reactions":17,"createdAt":"2018-12-17T09:45:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":58,"title":"Abbreviated formal parameter lists using kwargs","state":"OPEN","comments":9,"participants":7,"reactions":17,"createdAt":"2018-10-24T09:21:19.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":58,"title":"Abbreviated formal parameter lists using kwargs","state":"OPEN","comments":9,"participants":7,"reactions":17,"createdAt":"2018-10-24T09:21:19.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":58,"title":"Abbreviated formal parameter lists using kwargs","state":"OPEN","comments":9,"participants":7,"reactions":17,"createdAt":"2018-10-24T09:21:19.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":43,"title":"Pipeline-operator for inline invocation of static functions.","state":"OPEN","comments":7,"participants":6,"reactions":17,"createdAt":"2018-10-11T09:50:03.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":43,"title":"Pipeline-operator for inline invocation of static functions.","state":"OPEN","comments":7,"participants":6,"reactions":17,"createdAt":"2018-10-11T09:50:03.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":43,"title":"Pipeline-operator for inline invocation of static functions.","state":"OPEN","comments":7,"participants":6,"reactions":17,"createdAt":"2018-10-11T09:50:03.000Z","labels":["feature","state-backlog"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2776,"title":"const parameters / type parameters","state":"OPEN","comments":16,"participants":6,"reactions":16,"createdAt":"2023-01-17T09:54:35.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2776,"title":"const parameters / type parameters","state":"OPEN","comments":16,"participants":6,"reactions":16,"createdAt":"2023-01-17T09:54:35.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2776,"title":"const parameters / type parameters","state":"OPEN","comments":16,"participants":6,"reactions":16,"createdAt":"2023-01-17T09:54:35.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2291,"title":"Variable tear off using setters","state":"OPEN","comments":10,"participants":7,"reactions":16,"createdAt":"2022-06-12T12:18:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2291,"title":"Variable tear off using setters","state":"OPEN","comments":10,"participants":7,"reactions":16,"createdAt":"2022-06-12T12:18:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4437,"title":"Feature Request: Support object shorthand syntax in Dart","state":"OPEN","comments":8,"participants":6,"reactions":15,"createdAt":"2025-07-03T18:16:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4437,"title":"Feature Request: Support object shorthand syntax in Dart","state":"OPEN","comments":8,"participants":6,"reactions":15,"createdAt":"2025-07-03T18:16:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4437,"title":"Feature Request: Support object shorthand syntax in Dart","state":"OPEN","comments":8,"participants":6,"reactions":15,"createdAt":"2025-07-03T18:16:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4403,"title":"Allow instance and metaobject members in one declaration?","state":"OPEN","comments":7,"participants":6,"reactions":15,"createdAt":"2025-06-10T02:22:31.000Z","labels":["meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4403,"title":"Allow instance and metaobject members in one declaration?","state":"OPEN","comments":7,"participants":6,"reactions":15,"createdAt":"2025-06-10T02:22:31.000Z","labels":["meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4403,"title":"Allow instance and metaobject members in one declaration?","state":"OPEN","comments":7,"participants":6,"reactions":15,"createdAt":"2025-06-10T02:22:31.000Z","labels":["meta-classes"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4383,"title":"Feature request: `defer` statement","state":"OPEN","comments":12,"participants":5,"reactions":15,"createdAt":"2025-05-17T05:10:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4383,"title":"Feature request: `defer` statement","state":"OPEN","comments":12,"participants":5,"reactions":15,"createdAt":"2025-05-17T05:10:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4298,"title":"Easier loop for maps","state":"OPEN","comments":26,"participants":7,"reactions":15,"createdAt":"2025-03-19T10:56:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4298,"title":"Easier loop for maps","state":"OPEN","comments":26,"participants":7,"reactions":15,"createdAt":"2025-03-19T10:56:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4298,"title":"Easier loop for maps","state":"OPEN","comments":26,"participants":7,"reactions":15,"createdAt":"2025-03-19T10:56:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2774,"title":"Destructuring assignment in initializer lists.","state":"OPEN","comments":1,"participants":2,"reactions":15,"createdAt":"2023-01-15T22:18:31.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2774,"title":"Destructuring assignment in initializer lists.","state":"OPEN","comments":1,"participants":2,"reactions":15,"createdAt":"2023-01-15T22:18:31.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2774,"title":"Destructuring assignment in initializer lists.","state":"OPEN","comments":1,"participants":2,"reactions":15,"createdAt":"2023-01-15T22:18:31.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2124,"title":"Switch elements - switches in collections, like `if` and `for`","state":"OPEN","comments":7,"participants":4,"reactions":15,"createdAt":"2022-02-22T10:44:09.000Z","labels":["patterns","feature-completeness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2124,"title":"Switch elements - switches in collections, like `if` and `for`","state":"OPEN","comments":7,"participants":4,"reactions":15,"createdAt":"2022-02-22T10:44:09.000Z","labels":["patterns","feature-completeness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2124,"title":"Switch elements - switches in collections, like `if` and `for`","state":"OPEN","comments":7,"participants":4,"reactions":15,"createdAt":"2022-02-22T10:44:09.000Z","labels":["patterns","feature-completeness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1911,"title":"Reference parameters","state":"OPEN","comments":9,"participants":4,"reactions":15,"createdAt":"2021-10-18T11:58:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1911,"title":"Reference parameters","state":"OPEN","comments":9,"participants":4,"reactions":15,"createdAt":"2021-10-18T11:58:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":729,"title":"unify the syntax of if-statements, collection ifs and the ternary operator","state":"OPEN","comments":13,"participants":5,"reactions":15,"createdAt":"2019-12-07T10:12:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":351,"title":"Language suggestion: partial application for functions","state":"OPEN","comments":5,"participants":5,"reactions":15,"createdAt":"2019-05-12T10:29:06.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":351,"title":"Language suggestion: partial application for functions","state":"OPEN","comments":5,"participants":5,"reactions":15,"createdAt":"2019-05-12T10:29:06.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":351,"title":"Language suggestion: partial application for functions","state":"OPEN","comments":5,"participants":5,"reactions":15,"createdAt":"2019-05-12T10:29:06.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":299,"title":"Infer final fields as const for const constructors","state":"OPEN","comments":26,"participants":5,"reactions":15,"createdAt":"2019-04-02T09:11:50.000Z","labels":["enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":299,"title":"Infer final fields as const for const constructors","state":"OPEN","comments":26,"participants":5,"reactions":15,"createdAt":"2019-04-02T09:11:50.000Z","labels":["enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":299,"title":"Infer final fields as const for const constructors","state":"OPEN","comments":26,"participants":5,"reactions":15,"createdAt":"2019-04-02T09:11:50.000Z","labels":["enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":122,"title":"Dart should support `&&=` and `||=` operators.","state":"OPEN","comments":4,"participants":4,"reactions":15,"createdAt":"2018-12-03T13:14:09.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":122,"title":"Dart should support `&&=` and `||=` operators.","state":"OPEN","comments":4,"participants":4,"reactions":15,"createdAt":"2018-12-03T13:14:09.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":122,"title":"Dart should support `&&=` and `||=` operators.","state":"OPEN","comments":4,"participants":4,"reactions":15,"createdAt":"2018-12-03T13:14:09.000Z","labels":["feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4455,"title":"Make the getter of a final instance variable in a constant receiver a constant expression","state":"OPEN","comments":3,"participants":2,"reactions":14,"createdAt":"2025-07-08T10:35:53.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4455,"title":"Make the getter of a final instance variable in a constant receiver a constant expression","state":"OPEN","comments":3,"participants":2,"reactions":14,"createdAt":"2025-07-08T10:35:53.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4373,"title":"Function mixins","state":"OPEN","comments":4,"participants":5,"reactions":14,"createdAt":"2025-05-12T20:17:37.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4373,"title":"Function mixins","state":"OPEN","comments":4,"participants":5,"reactions":14,"createdAt":"2025-05-12T20:17:37.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4317,"title":"Optionally imported libraries.","state":"OPEN","comments":7,"participants":5,"reactions":14,"createdAt":"2025-04-03T14:31:47.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4317,"title":"Optionally imported libraries.","state":"OPEN","comments":7,"participants":5,"reactions":14,"createdAt":"2025-04-03T14:31:47.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4317,"title":"Optionally imported libraries.","state":"OPEN","comments":7,"participants":5,"reactions":14,"createdAt":"2025-04-03T14:31:47.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4117,"title":"Variable declaration to be 'final' by default ","state":"OPEN","comments":17,"participants":7,"reactions":14,"createdAt":"2024-10-02T21:07:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4117,"title":"Variable declaration to be 'final' by default ","state":"OPEN","comments":17,"participants":7,"reactions":14,"createdAt":"2024-10-02T21:07:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4030,"title":"Better error handling - add try expression or if exception operator","state":"OPEN","comments":21,"participants":4,"reactions":14,"createdAt":"2024-08-13T18:27:01.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4030,"title":"Better error handling - add try expression or if exception operator","state":"OPEN","comments":21,"participants":4,"reactions":14,"createdAt":"2024-08-13T18:27:01.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3058,"title":"Rename for initializing formals (and similar parameters)","state":"OPEN","comments":5,"participants":5,"reactions":14,"createdAt":"2023-05-10T17:47:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3058,"title":"Rename for initializing formals (and similar parameters)","state":"OPEN","comments":5,"participants":5,"reactions":14,"createdAt":"2023-05-10T17:47:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3058,"title":"Rename for initializing formals (and similar parameters)","state":"OPEN","comments":5,"participants":5,"reactions":14,"createdAt":"2023-05-10T17:47:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2943,"title":"Allow using \"Never\" expressions in map litteral \"if/else\" clauses","state":"OPEN","comments":3,"participants":3,"reactions":14,"createdAt":"2023-03-23T14:23:24.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2943,"title":"Allow using \"Never\" expressions in map litteral \"if/else\" clauses","state":"OPEN","comments":3,"participants":3,"reactions":14,"createdAt":"2023-03-23T14:23:24.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2943,"title":"Allow using \"Never\" expressions in map litteral \"if/else\" clauses","state":"OPEN","comments":3,"participants":3,"reactions":14,"createdAt":"2023-03-23T14:23:24.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2850,"title":"add a cheaper way to get the current source location","state":"OPEN","comments":15,"participants":4,"reactions":14,"createdAt":"2023-02-16T01:34:16.000Z","labels":["feature","customer-google3"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2850,"title":"add a cheaper way to get the current source location","state":"OPEN","comments":15,"participants":4,"reactions":14,"createdAt":"2023-02-16T01:34:16.000Z","labels":["feature","customer-google3"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2850,"title":"add a cheaper way to get the current source location","state":"OPEN","comments":15,"participants":4,"reactions":14,"createdAt":"2023-02-16T01:34:16.000Z","labels":["feature","customer-google3"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2656,"title":"A null-aware exception catching expression.","state":"OPEN","comments":7,"participants":4,"reactions":14,"createdAt":"2022-11-24T13:37:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2656,"title":"A null-aware exception catching expression.","state":"OPEN","comments":7,"participants":4,"reactions":14,"createdAt":"2022-11-24T13:37:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2656,"title":"A null-aware exception catching expression.","state":"OPEN","comments":7,"participants":4,"reactions":14,"createdAt":"2022-11-24T13:37:57.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2305,"title":"Loop counters","state":"OPEN","comments":2,"participants":3,"reactions":14,"createdAt":"2022-06-23T07:33:40.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2305,"title":"Loop counters","state":"OPEN","comments":2,"participants":3,"reactions":14,"createdAt":"2022-06-23T07:33:40.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1899,"title":"Allow constructors to restrict type arguments to class.","state":"OPEN","comments":4,"participants":4,"reactions":14,"createdAt":"2021-10-11T13:07:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1899,"title":"Allow constructors to restrict type arguments to class.","state":"OPEN","comments":4,"participants":4,"reactions":14,"createdAt":"2021-10-11T13:07:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1899,"title":"Allow constructors to restrict type arguments to class.","state":"OPEN","comments":4,"participants":4,"reactions":14,"createdAt":"2021-10-11T13:07:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":352,"title":"Language suggestion: make IF and TRY/CATCH expressions (like Kotlin)","state":"OPEN","comments":5,"participants":4,"reactions":14,"createdAt":"2019-05-15T03:18:32.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":352,"title":"Language suggestion: make IF and TRY/CATCH expressions (like Kotlin)","state":"OPEN","comments":5,"participants":4,"reactions":14,"createdAt":"2019-05-15T03:18:32.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":352,"title":"Language suggestion: make IF and TRY/CATCH expressions (like Kotlin)","state":"OPEN","comments":5,"participants":4,"reactions":14,"createdAt":"2019-05-15T03:18:32.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4324,"title":"Namespaces, nested static declarations and nested scope imports.","state":"OPEN","comments":5,"participants":5,"reactions":13,"createdAt":"2025-04-11T08:59:13.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4324,"title":"Namespaces, nested static declarations and nested scope imports.","state":"OPEN","comments":5,"participants":5,"reactions":13,"createdAt":"2025-04-11T08:59:13.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4324,"title":"Namespaces, nested static declarations and nested scope imports.","state":"OPEN","comments":5,"participants":5,"reactions":13,"createdAt":"2025-04-11T08:59:13.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4141,"title":"Case expressions and return patterns","state":"OPEN","comments":38,"participants":4,"reactions":13,"createdAt":"2024-10-24T14:19:37.000Z","labels":["feature","patterns","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4141,"title":"Case expressions and return patterns","state":"OPEN","comments":38,"participants":4,"reactions":13,"createdAt":"2024-10-24T14:19:37.000Z","labels":["feature","patterns","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3441,"title":"Should we deprecate and remove support for switch case labels?","state":"OPEN","comments":10,"participants":7,"reactions":13,"createdAt":"2023-11-01T23:42:15.000Z","labels":["question","breaking-change"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3441,"title":"Should we deprecate and remove support for switch case labels?","state":"OPEN","comments":10,"participants":7,"reactions":13,"createdAt":"2023-11-01T23:42:15.000Z","labels":["question","breaking-change"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3399,"title":"const-by-default constructors","state":"OPEN","comments":5,"participants":5,"reactions":13,"createdAt":"2023-10-12T23:20:07.000Z","labels":["enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3399,"title":"const-by-default constructors","state":"OPEN","comments":5,"participants":5,"reactions":13,"createdAt":"2023-10-12T23:20:07.000Z","labels":["enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3366,"title":"Range syntax","state":"OPEN","comments":16,"participants":6,"reactions":13,"createdAt":"2023-09-25T15:47:33.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3366,"title":"Range syntax","state":"OPEN","comments":16,"participants":6,"reactions":13,"createdAt":"2023-09-25T15:47:33.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1210,"title":"Binding expressions","state":"OPEN","comments":85,"participants":7,"reactions":13,"createdAt":"2020-09-09T12:07:27.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1210,"title":"Binding expressions","state":"OPEN","comments":85,"participants":7,"reactions":13,"createdAt":"2020-09-09T12:07:27.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1044,"title":"type parameter in operator overloading","state":"OPEN","comments":9,"participants":8,"reactions":13,"createdAt":"2020-06-23T10:05:41.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1044,"title":"type parameter in operator overloading","state":"OPEN","comments":9,"participants":8,"reactions":13,"createdAt":"2020-06-23T10:05:41.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1044,"title":"type parameter in operator overloading","state":"OPEN","comments":9,"participants":8,"reactions":13,"createdAt":"2020-06-23T10:05:41.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":541,"title":"Mixin Composition Syntax","state":"OPEN","comments":14,"participants":6,"reactions":13,"createdAt":"2019-08-23T08:15:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":541,"title":"Mixin Composition Syntax","state":"OPEN","comments":14,"participants":6,"reactions":13,"createdAt":"2019-08-23T08:15:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":541,"title":"Mixin Composition Syntax","state":"OPEN","comments":14,"participants":6,"reactions":13,"createdAt":"2019-08-23T08:15:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":519,"title":"Allow imports in part files","state":"OPEN","comments":4,"participants":5,"reactions":13,"createdAt":"2019-08-12T18:22:37.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":519,"title":"Allow imports in part files","state":"OPEN","comments":4,"participants":5,"reactions":13,"createdAt":"2019-08-12T18:22:37.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":519,"title":"Allow imports in part files","state":"OPEN","comments":4,"participants":5,"reactions":13,"createdAt":"2019-08-12T18:22:37.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3972,"title":"Support for Rust like #[cfg()] attributes","state":"OPEN","comments":10,"participants":6,"reactions":12,"createdAt":"2024-07-09T19:16:00.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3972,"title":"Support for Rust like #[cfg()] attributes","state":"OPEN","comments":10,"participants":6,"reactions":12,"createdAt":"2024-07-09T19:16:00.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3963,"title":"Let a wildcard as an actual type argument indicate a request for inference","state":"OPEN","comments":7,"participants":5,"reactions":12,"createdAt":"2024-07-05T13:32:28.000Z","labels":["feature","type-inference"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3963,"title":"Let a wildcard as an actual type argument indicate a request for inference","state":"OPEN","comments":7,"participants":5,"reactions":12,"createdAt":"2024-07-05T13:32:28.000Z","labels":["feature","type-inference"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3825,"title":"Protected instance members","state":"OPEN","comments":14,"participants":4,"reactions":12,"createdAt":"2024-05-22T08:56:12.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3825,"title":"Protected instance members","state":"OPEN","comments":14,"participants":4,"reactions":12,"createdAt":"2024-05-22T08:56:12.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3704,"title":"Implicit coercion through implicit constructors.","state":"OPEN","comments":0,"participants":1,"reactions":12,"createdAt":"2024-04-14T10:04:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3704,"title":"Implicit coercion through implicit constructors.","state":"OPEN","comments":0,"participants":1,"reactions":12,"createdAt":"2024-04-14T10:04:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3430,"title":"Safe list destructuring","state":"OPEN","comments":3,"participants":3,"reactions":12,"createdAt":"2023-10-25T01:44:53.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3430,"title":"Safe list destructuring","state":"OPEN","comments":3,"participants":3,"reactions":12,"createdAt":"2023-10-25T01:44:53.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3245,"title":"Record named field shorthand","state":"OPEN","comments":0,"participants":2,"reactions":12,"createdAt":"2023-07-30T18:42:22.000Z","labels":["feature","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3245,"title":"Record named field shorthand","state":"OPEN","comments":0,"participants":2,"reactions":12,"createdAt":"2023-07-30T18:42:22.000Z","labels":["feature","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3050,"title":"[Field Promotion] Promotion of fields on final classes","state":"OPEN","comments":4,"participants":5,"reactions":12,"createdAt":"2023-05-08T21:11:45.000Z","labels":["field-promotion","class-modifiers"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3050,"title":"[Field Promotion] Promotion of fields on final classes","state":"OPEN","comments":4,"participants":5,"reactions":12,"createdAt":"2023-05-08T21:11:45.000Z","labels":["field-promotion","class-modifiers"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2603,"title":"[inline classes] Support simple union types?","state":"OPEN","comments":10,"participants":4,"reactions":12,"createdAt":"2022-11-01T17:54:16.000Z","labels":["question","extension-types-later"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2506,"title":"[extension-types] Automatically provide access to some members of the representation interface","state":"OPEN","comments":11,"participants":3,"reactions":12,"createdAt":"2022-09-21T13:37:50.000Z","labels":["feature","extension-types-later"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2506,"title":"[extension-types] Automatically provide access to some members of the representation interface","state":"OPEN","comments":11,"participants":3,"reactions":12,"createdAt":"2022-09-21T13:37:50.000Z","labels":["feature","extension-types-later"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1639,"title":"In a function, non-nullable optional parameters with default value should allow to be called with nullable values","state":"OPEN","comments":22,"participants":7,"reactions":12,"createdAt":"2021-05-19T13:08:38.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1639,"title":"In a function, non-nullable optional parameters with default value should allow to be called with nullable values","state":"OPEN","comments":22,"participants":7,"reactions":12,"createdAt":"2021-05-19T13:08:38.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1479,"title":"Generalized string interpolation","state":"OPEN","comments":22,"participants":7,"reactions":12,"createdAt":"2021-02-26T09:20:20.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1479,"title":"Generalized string interpolation","state":"OPEN","comments":22,"participants":7,"reactions":12,"createdAt":"2021-02-26T09:20:20.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":622,"title":"Provide access to previous constructor initializers from later ones","state":"OPEN","comments":2,"participants":2,"reactions":12,"createdAt":"2019-10-11T22:45:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":622,"title":"Provide access to previous constructor initializers from later ones","state":"OPEN","comments":2,"participants":2,"reactions":12,"createdAt":"2019-10-11T22:45:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":622,"title":"Provide access to previous constructor initializers from later ones","state":"OPEN","comments":2,"participants":2,"reactions":12,"createdAt":"2019-10-11T22:45:07.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":404,"title":"Allow null-aware invocations.","state":"OPEN","comments":2,"participants":3,"reactions":12,"createdAt":"2019-06-17T07:54:27.000Z","labels":["state-backlog","nnbd"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":404,"title":"Allow null-aware invocations.","state":"OPEN","comments":2,"participants":3,"reactions":12,"createdAt":"2019-06-17T07:54:27.000Z","labels":["state-backlog","nnbd"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":102,"title":"allow more compact definition of generic classes with type parameters that extend other generic classes","state":"OPEN","comments":5,"participants":5,"reactions":12,"createdAt":"2018-11-16T16:07:07.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":102,"title":"allow more compact definition of generic classes with type parameters that extend other generic classes","state":"OPEN","comments":5,"participants":5,"reactions":12,"createdAt":"2018-11-16T16:07:07.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":102,"title":"allow more compact definition of generic classes with type parameters that extend other generic classes","state":"OPEN","comments":5,"participants":5,"reactions":12,"createdAt":"2018-11-16T16:07:07.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":15,"title":"Syntax for optional parameters and required named parameters is verbose and unfamiliar","state":"OPEN","comments":50,"participants":16,"reactions":12,"createdAt":"2018-08-16T08:12:28.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":15,"title":"Syntax for optional parameters and required named parameters is verbose and unfamiliar","state":"OPEN","comments":50,"participants":16,"reactions":12,"createdAt":"2018-08-16T08:12:28.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":15,"title":"Syntax for optional parameters and required named parameters is verbose and unfamiliar","state":"OPEN","comments":50,"participants":16,"reactions":12,"createdAt":"2018-08-16T08:12:28.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4280,"title":"Support inferring the return value of functions","state":"OPEN","comments":7,"participants":6,"reactions":11,"createdAt":"2025-03-03T10:05:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4280,"title":"Support inferring the return value of functions","state":"OPEN","comments":7,"participants":6,"reactions":11,"createdAt":"2025-03-03T10:05:09.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4128,"title":"Pattern matching operator","state":"OPEN","comments":2,"participants":3,"reactions":11,"createdAt":"2024-10-11T08:51:19.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3287,"title":"Inferring required named parameters without making function types a pitfall","state":"OPEN","comments":11,"participants":7,"reactions":11,"createdAt":"2023-08-17T21:26:44.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3210,"title":"Allow functions to be used directly as metadata annotations","state":"OPEN","comments":5,"participants":6,"reactions":11,"createdAt":"2023-07-10T14:58:19.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3210,"title":"Allow functions to be used directly as metadata annotations","state":"OPEN","comments":5,"participants":6,"reactions":11,"createdAt":"2023-07-10T14:58:19.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3106,"title":"Allow explicitly exposing a final/base class implementation for testing","state":"OPEN","comments":33,"participants":8,"reactions":11,"createdAt":"2023-05-23T20:03:22.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3106,"title":"Allow explicitly exposing a final/base class implementation for testing","state":"OPEN","comments":33,"participants":8,"reactions":11,"createdAt":"2023-05-23T20:03:22.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2664,"title":"Allow patterns matching in conditional expression condition.","state":"OPEN","comments":3,"participants":3,"reactions":11,"createdAt":"2022-11-29T13:31:44.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2664,"title":"Allow patterns matching in conditional expression condition.","state":"OPEN","comments":3,"participants":3,"reactions":11,"createdAt":"2022-11-29T13:31:44.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2430,"title":"Add support for optional trailing commas in type argument and type parameter lists.","state":"OPEN","comments":19,"participants":5,"reactions":11,"createdAt":"2022-08-23T23:15:40.000Z","labels":["feature","enhanced-syntax"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2430,"title":"Add support for optional trailing commas in type argument and type parameter lists.","state":"OPEN","comments":19,"participants":5,"reactions":11,"createdAt":"2022-08-23T23:15:40.000Z","labels":["feature","enhanced-syntax"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2166,"title":"Extend existing class to use mixin?","state":"OPEN","comments":13,"participants":7,"reactions":11,"createdAt":"2022-03-23T14:42:18.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2166,"title":"Extend existing class to use mixin?","state":"OPEN","comments":13,"participants":7,"reactions":11,"createdAt":"2022-03-23T14:42:18.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2142,"title":"Support nullableCallable?() for nullable/optional callbacks consistently to nullableCallable!()","state":"OPEN","comments":4,"participants":3,"reactions":11,"createdAt":"2022-03-06T12:22:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2142,"title":"Support nullableCallable?() for nullable/optional callbacks consistently to nullableCallable!()","state":"OPEN","comments":4,"participants":3,"reactions":11,"createdAt":"2022-03-06T12:22:07.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2133,"title":"Platform (iOS, Android, etc.) should be a useable condition for conditional imports","state":"OPEN","comments":15,"participants":6,"reactions":11,"createdAt":"2022-03-01T02:16:34.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2133,"title":"Platform (iOS, Android, etc.) should be a useable condition for conditional imports","state":"OPEN","comments":15,"participants":6,"reactions":11,"createdAt":"2022-03-01T02:16:34.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2119,"title":"Improve support for nested exceptions with stacktraces","state":"OPEN","comments":3,"participants":3,"reactions":11,"createdAt":"2022-02-16T20:56:11.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2119,"title":"Improve support for nested exceptions with stacktraces","state":"OPEN","comments":3,"participants":3,"reactions":11,"createdAt":"2022-02-16T20:56:11.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2077,"title":"Adding more null aware operators: ?+ , ?- , ?/ , ?*","state":"OPEN","comments":1,"participants":2,"reactions":11,"createdAt":"2022-01-26T10:44:48.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2077,"title":"Adding more null aware operators: ?+ , ?- , ?/ , ?*","state":"OPEN","comments":1,"participants":2,"reactions":11,"createdAt":"2022-01-26T10:44:48.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1950,"title":"Light-weight concurrency","state":"OPEN","comments":1,"participants":1,"reactions":11,"createdAt":"2021-11-01T04:49:00.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1950,"title":"Light-weight concurrency","state":"OPEN","comments":1,"participants":1,"reactions":11,"createdAt":"2021-11-01T04:49:00.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1536,"title":"[NNBD] Type promotion fails for variable uses in anonymous functions","state":"OPEN","comments":11,"participants":6,"reactions":11,"createdAt":"2021-03-17T03:46:19.000Z","labels":["flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1536,"title":"[NNBD] Type promotion fails for variable uses in anonymous functions","state":"OPEN","comments":11,"participants":6,"reactions":11,"createdAt":"2021-03-17T03:46:19.000Z","labels":["flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1387,"title":"Optional Generics?","state":"OPEN","comments":7,"participants":6,"reactions":11,"createdAt":"2020-12-27T01:27:05.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1387,"title":"Optional Generics?","state":"OPEN","comments":7,"participants":6,"reactions":11,"createdAt":"2020-12-27T01:27:05.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":993,"title":"implicit-dynamic: false, anonymous functions, and explicitly dynamic types require gratuitous verbosity in code","state":"OPEN","comments":4,"participants":3,"reactions":11,"createdAt":"2020-05-28T20:09:05.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":993,"title":"implicit-dynamic: false, anonymous functions, and explicitly dynamic types require gratuitous verbosity in code","state":"OPEN","comments":4,"participants":3,"reactions":11,"createdAt":"2020-05-28T20:09:05.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":704,"title":"Non-interface class declarations.","state":"OPEN","comments":13,"participants":7,"reactions":11,"createdAt":"2019-11-25T15:47:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":704,"title":"Non-interface class declarations.","state":"OPEN","comments":13,"participants":7,"reactions":11,"createdAt":"2019-11-25T15:47:55.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":157,"title":"Problem: Wrapping functions and forwarding arguments is noisy","state":"OPEN","comments":13,"participants":7,"reactions":11,"createdAt":"2018-12-28T20:43:12.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":157,"title":"Problem: Wrapping functions and forwarding arguments is noisy","state":"OPEN","comments":13,"participants":7,"reactions":11,"createdAt":"2018-12-28T20:43:12.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":107,"title":"Make it easy to use type B in place of type A when there is an obvious/explicit conversion from B -> A","state":"OPEN","comments":1,"participants":2,"reactions":11,"createdAt":"2018-11-27T22:35:10.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":107,"title":"Make it easy to use type B in place of type A when there is an obvious/explicit conversion from B -> A","state":"OPEN","comments":1,"participants":2,"reactions":11,"createdAt":"2018-11-27T22:35:10.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4286,"title":"Generalize exhaustiveness checking for non-trivial generics","state":"OPEN","comments":6,"participants":4,"reactions":10,"createdAt":"2025-03-06T09:59:11.000Z","labels":["request","exhaustiveness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4286,"title":"Generalize exhaustiveness checking for non-trivial generics","state":"OPEN","comments":6,"participants":4,"reactions":10,"createdAt":"2025-03-06T09:59:11.000Z","labels":["request","exhaustiveness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4150,"title":"Method-to-function conversion","state":"OPEN","comments":11,"participants":6,"reactions":10,"createdAt":"2024-11-04T13:50:55.000Z","labels":["feature","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4144,"title":"Allow constructors with a dotted name to omit the class name","state":"OPEN","comments":5,"participants":4,"reactions":10,"createdAt":"2024-10-29T11:40:20.000Z","labels":["small-feature","enhanced-syntax","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4144,"title":"Allow constructors with a dotted name to omit the class name","state":"OPEN","comments":5,"participants":4,"reactions":10,"createdAt":"2024-10-29T11:40:20.000Z","labels":["small-feature","enhanced-syntax","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4087,"title":"Type parameters with default value for classes","state":"OPEN","comments":7,"participants":4,"reactions":10,"createdAt":"2024-09-06T13:47:37.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4087,"title":"Type parameters with default value for classes","state":"OPEN","comments":7,"participants":4,"reactions":10,"createdAt":"2024-09-06T13:47:37.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4021,"title":"Allow use switch expression to init a const variable","state":"OPEN","comments":2,"participants":3,"reactions":10,"createdAt":"2024-08-07T02:13:13.000Z","labels":["request","patterns","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4021,"title":"Allow use switch expression to init a const variable","state":"OPEN","comments":2,"participants":3,"reactions":10,"createdAt":"2024-08-07T02:13:13.000Z","labels":["request","patterns","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3298,"title":"Add value types & value semantics for deep immutability (w/ compile-time enforcement)","state":"OPEN","comments":1,"participants":1,"reactions":10,"createdAt":"2023-08-21T23:45:11.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3197,"title":"Better int type support in Dart, now that targeting wasm is (nearly) possible","state":"OPEN","comments":10,"participants":5,"reactions":10,"createdAt":"2023-07-06T09:02:51.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3197,"title":"Better int type support in Dart, now that targeting wasm is (nearly) possible","state":"OPEN","comments":10,"participants":5,"reactions":10,"createdAt":"2023-07-06T09:02:51.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3004,"title":"Allow a `const` record entry to be assignable to a `const`","state":"OPEN","comments":5,"participants":6,"reactions":10,"createdAt":"2023-04-17T21:53:32.000Z","labels":["request","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3004,"title":"Allow a `const` record entry to be assignable to a `const`","state":"OPEN","comments":5,"participants":6,"reactions":10,"createdAt":"2023-04-17T21:53:32.000Z","labels":["request","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2574,"title":"Alternative for \"required\" keyword ","state":"OPEN","comments":12,"participants":7,"reactions":10,"createdAt":"2022-10-16T21:26:08.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2536,"title":"\"while-case\" and \"do-while-case\"","state":"OPEN","comments":4,"participants":3,"reactions":10,"createdAt":"2022-09-29T23:41:57.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2536,"title":"\"while-case\" and \"do-while-case\"","state":"OPEN","comments":4,"participants":3,"reactions":10,"createdAt":"2022-09-29T23:41:57.000Z","labels":["patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2456,"title":"Support operator (parameter) overloading","state":"OPEN","comments":12,"participants":5,"reactions":10,"createdAt":"2022-09-02T08:29:45.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2433,"title":"Allow extractor patterns to use full selector chains.","state":"OPEN","comments":9,"participants":5,"reactions":10,"createdAt":"2022-08-24T11:34:12.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2433,"title":"Allow extractor patterns to use full selector chains.","state":"OPEN","comments":9,"participants":5,"reactions":10,"createdAt":"2022-08-24T11:34:12.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2412,"title":"Parallel asynchronous context operator","state":"OPEN","comments":1,"participants":2,"reactions":10,"createdAt":"2022-08-18T11:52:12.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2412,"title":"Parallel asynchronous context operator","state":"OPEN","comments":1,"participants":2,"reactions":10,"createdAt":"2022-08-18T11:52:12.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2348,"title":"Add a `parse` static member to each enumerated type","state":"OPEN","comments":18,"participants":9,"reactions":10,"createdAt":"2022-07-19T08:00:49.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2348,"title":"Add a `parse` static member to each enumerated type","state":"OPEN","comments":18,"participants":9,"reactions":10,"createdAt":"2022-07-19T08:00:49.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2219,"title":"Introduce additional primitive members","state":"OPEN","comments":9,"participants":4,"reactions":10,"createdAt":"2022-04-28T07:55:52.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2219,"title":"Introduce additional primitive members","state":"OPEN","comments":9,"participants":4,"reactions":10,"createdAt":"2022-04-28T07:55:52.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1825,"title":"Allow `finally` keyword on `if` constructions","state":"OPEN","comments":6,"participants":7,"reactions":10,"createdAt":"2021-08-29T18:38:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1813,"title":"Implicitly add missing parameters to anonymous functions","state":"OPEN","comments":22,"participants":8,"reactions":10,"createdAt":"2021-08-23T19:16:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1813,"title":"Implicitly add missing parameters to anonymous functions","state":"OPEN","comments":22,"participants":8,"reactions":10,"createdAt":"2021-08-23T19:16:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1674,"title":"Allow lower bounds on type parameters of functions","state":"OPEN","comments":8,"participants":5,"reactions":10,"createdAt":"2021-06-09T10:35:17.000Z","labels":["variance","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1674,"title":"Allow lower bounds on type parameters of functions","state":"OPEN","comments":8,"participants":5,"reactions":10,"createdAt":"2021-06-09T10:35:17.000Z","labels":["variance","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1592,"title":"Evaluate to null if condition is met","state":"OPEN","comments":7,"participants":5,"reactions":10,"createdAt":"2021-04-19T01:07:52.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1592,"title":"Evaluate to null if condition is met","state":"OPEN","comments":7,"participants":5,"reactions":10,"createdAt":"2021-04-19T01:07:52.000Z","labels":["feature","null-aware-expressions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1154,"title":"Smart cast fails without explicit generics","state":"OPEN","comments":1,"participants":2,"reactions":10,"createdAt":"2020-08-15T16:24:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1154,"title":"Smart cast fails without explicit generics","state":"OPEN","comments":1,"participants":2,"reactions":10,"createdAt":"2020-08-15T16:24:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":23,"title":"Logical compound assignment operators &&= and ||=","state":"OPEN","comments":5,"participants":4,"reactions":10,"createdAt":"2018-09-07T17:03:35.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":23,"title":"Logical compound assignment operators &&= and ||=","state":"OPEN","comments":5,"participants":4,"reactions":10,"createdAt":"2018-09-07T17:03:35.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4485,"title":"Shorter constructor declarations","state":"OPEN","comments":5,"participants":3,"reactions":9,"createdAt":"2025-08-06T18:14:06.000Z","labels":["feature","small-feature","primary-constructors","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4213,"title":"Generic and conditional constructors","state":"OPEN","comments":4,"participants":4,"reactions":9,"createdAt":"2024-12-20T15:58:17.000Z","labels":["feature","static-extensions"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4155,"title":"Enhanced parts","state":"OPEN","comments":5,"participants":4,"reactions":9,"createdAt":"2024-11-06T16:00:05.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4155,"title":"Enhanced parts","state":"OPEN","comments":5,"participants":4,"reactions":9,"createdAt":"2024-11-06T16:00:05.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4135,"title":"For brevity, allow redirecting factory constructors to omit the formal parameter list","state":"OPEN","comments":4,"participants":4,"reactions":9,"createdAt":"2024-10-22T14:35:43.000Z","labels":["small-feature","enhanced-syntax","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4135,"title":"For brevity, allow redirecting factory constructors to omit the formal parameter list","state":"OPEN","comments":4,"participants":4,"reactions":9,"createdAt":"2024-10-22T14:35:43.000Z","labels":["small-feature","enhanced-syntax","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4135,"title":"For brevity, allow redirecting factory constructors to omit the formal parameter list","state":"OPEN","comments":4,"participants":4,"reactions":9,"createdAt":"2024-10-22T14:35:43.000Z","labels":["small-feature","enhanced-syntax","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3995,"title":"More strict handling of exceptions","state":"OPEN","comments":1,"participants":2,"reactions":9,"createdAt":"2024-07-26T08:40:39.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3995,"title":"More strict handling of exceptions","state":"OPEN","comments":1,"participants":2,"reactions":9,"createdAt":"2024-07-26T08:40:39.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3818,"title":"Feature Request: Add comptime Functionality Similar to ZigLang to Dart","state":"OPEN","comments":5,"participants":4,"reactions":9,"createdAt":"2024-05-17T16:00:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3487,"title":"Replace record fields (`$1`, `$2`, etc.) with named fields if type contains field names (eg. `(int a, int b)`)","state":"OPEN","comments":28,"participants":10,"reactions":9,"createdAt":"2023-11-29T11:46:12.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3381,"title":"Allow extension types to declare abstract instance members.","state":"OPEN","comments":8,"participants":5,"reactions":9,"createdAt":"2023-10-04T10:28:54.000Z","labels":["request","extension-types","extension-types-later"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3381,"title":"Allow extension types to declare abstract instance members.","state":"OPEN","comments":8,"participants":5,"reactions":9,"createdAt":"2023-10-04T10:28:54.000Z","labels":["request","extension-types","extension-types-later"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3037,"title":"Allow constant sets to have duplicate values","state":"OPEN","comments":2,"participants":2,"reactions":9,"createdAt":"2023-05-03T13:04:30.000Z","labels":["feature","feature-completeness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3037,"title":"Allow constant sets to have duplicate values","state":"OPEN","comments":2,"participants":2,"reactions":9,"createdAt":"2023-05-03T13:04:30.000Z","labels":["feature","feature-completeness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2901,"title":"Deprecate function formal parameters and function type aliases.","state":"OPEN","comments":4,"participants":3,"reactions":9,"createdAt":"2023-03-11T14:07:32.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2581,"title":"Allow run-time-only assertion checking in constant constructors","state":"OPEN","comments":29,"participants":8,"reactions":9,"createdAt":"2022-10-20T16:22:54.000Z","labels":["small-feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2581,"title":"Allow run-time-only assertion checking in constant constructors","state":"OPEN","comments":29,"participants":8,"reactions":9,"createdAt":"2022-10-20T16:22:54.000Z","labels":["small-feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2234,"title":"Using constructor and function parameter lists as implicit parameter groups","state":"OPEN","comments":13,"participants":6,"reactions":9,"createdAt":"2022-05-12T10:32:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2234,"title":"Using constructor and function parameter lists as implicit parameter groups","state":"OPEN","comments":13,"participants":6,"reactions":9,"createdAt":"2022-05-12T10:32:10.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1982,"title":"Deprecate and remove adjacent strings","state":"OPEN","comments":16,"participants":10,"reactions":9,"createdAt":"2021-11-22T22:40:20.000Z","labels":["technical-debt"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1982,"title":"Deprecate and remove adjacent strings","state":"OPEN","comments":16,"participants":10,"reactions":9,"createdAt":"2021-11-22T22:40:20.000Z","labels":["technical-debt"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1563,"title":"Adding EnumMaps into Dart","state":"OPEN","comments":13,"participants":5,"reactions":9,"createdAt":"2021-04-07T15:27:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1563,"title":"Adding EnumMaps into Dart","state":"OPEN","comments":13,"participants":5,"reactions":9,"createdAt":"2021-04-07T15:27:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1533,"title":"Consider making inference treat raw types in contexts as non-constraining.","state":"OPEN","comments":1,"participants":3,"reactions":9,"createdAt":"2021-03-20T00:42:41.000Z","labels":["type-inference"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1533,"title":"Consider making inference treat raw types in contexts as non-constraining.","state":"OPEN","comments":1,"participants":3,"reactions":9,"createdAt":"2021-03-20T00:42:41.000Z","labels":["type-inference"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1467,"title":"Protected extension types or proper \"Value types\"","state":"OPEN","comments":9,"participants":5,"reactions":9,"createdAt":"2021-02-20T10:12:01.000Z","labels":["feature","extension-types-later"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1467,"title":"Protected extension types or proper \"Value types\"","state":"OPEN","comments":9,"participants":5,"reactions":9,"createdAt":"2021-02-20T10:12:01.000Z","labels":["feature","extension-types-later"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1299,"title":"Completer.complete() signature is not null-safe-friendly","state":"OPEN","comments":25,"participants":8,"reactions":9,"createdAt":"2020-11-10T17:38:14.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1299,"title":"Completer.complete() signature is not null-safe-friendly","state":"OPEN","comments":25,"participants":8,"reactions":9,"createdAt":"2020-11-10T17:38:14.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1238,"title":"short form to declare a local variable with an initializer as nullable","state":"OPEN","comments":3,"participants":4,"reactions":9,"createdAt":"2020-09-25T17:29:46.000Z","labels":["feature","nnbd"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1238,"title":"short form to declare a local variable with an initializer as nullable","state":"OPEN","comments":3,"participants":4,"reactions":9,"createdAt":"2020-09-25T17:29:46.000Z","labels":["feature","nnbd"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1123,"title":"Arguments shorthand","state":"OPEN","comments":16,"participants":8,"reactions":9,"createdAt":"2020-07-30T03:56:38.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":889,"title":"Add Decimal type","state":"OPEN","comments":14,"participants":4,"reactions":9,"createdAt":"2020-03-19T12:40:03.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":889,"title":"Add Decimal type","state":"OPEN","comments":14,"participants":4,"reactions":9,"createdAt":"2020-03-19T12:40:03.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":329,"title":"StatefulWidget syntax in Flutter requires 2 classes","state":"OPEN","comments":38,"participants":11,"reactions":9,"createdAt":"2019-04-24T17:28:26.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":329,"title":"StatefulWidget syntax in Flutter requires 2 classes","state":"OPEN","comments":38,"participants":11,"reactions":9,"createdAt":"2019-04-24T17:28:26.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":132,"title":"hope for do expression","state":"OPEN","comments":11,"participants":8,"reactions":9,"createdAt":"2018-12-13T04:41:44.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4430,"title":"simplified parameters: default value means optional","state":"OPEN","comments":16,"participants":4,"reactions":8,"createdAt":"2025-06-28T18:55:46.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4406,"title":"Could metaobjects support implicit interfaces/structural typing?","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2025-06-11T16:38:35.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4378,"title":"Make implicit double literal detection be promoted variable aware.","state":"OPEN","comments":1,"participants":1,"reactions":8,"createdAt":"2025-05-16T12:48:12.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4281,"title":"Support cloning functions","state":"OPEN","comments":9,"participants":5,"reactions":8,"createdAt":"2025-03-03T14:16:12.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4252,"title":"Nullifying Conditional Operator","state":"OPEN","comments":29,"participants":5,"reactions":8,"createdAt":"2025-02-03T12:59:50.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4207,"title":"Test Blocks In Src","state":"OPEN","comments":3,"participants":2,"reactions":8,"createdAt":"2024-12-15T05:04:31.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4177,"title":"Soft covariance modifier","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2024-11-26T02:28:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3714,"title":"Allow recursive typedef","state":"OPEN","comments":7,"participants":4,"reactions":8,"createdAt":"2024-04-19T00:30:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3714,"title":"Allow recursive typedef","state":"OPEN","comments":7,"participants":4,"reactions":8,"createdAt":"2024-04-19T00:30:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3505,"title":"Type Promotion For If-Case Statements","state":"OPEN","comments":3,"participants":4,"reactions":8,"createdAt":"2023-12-08T23:50:39.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3505,"title":"Type Promotion For If-Case Statements","state":"OPEN","comments":3,"participants":4,"reactions":8,"createdAt":"2023-12-08T23:50:39.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3449,"title":"Object Spread operator","state":"OPEN","comments":3,"participants":2,"reactions":8,"createdAt":"2023-11-07T19:29:54.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3444,"title":"Forwarding functions","state":"OPEN","comments":42,"participants":7,"reactions":8,"createdAt":"2023-11-03T21:17:58.000Z","labels":["request","feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3332,"title":"Value fields","state":"OPEN","comments":22,"participants":6,"reactions":8,"createdAt":"2023-09-08T18:13:47.000Z","labels":["field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3332,"title":"Value fields","state":"OPEN","comments":22,"participants":6,"reactions":8,"createdAt":"2023-09-08T18:13:47.000Z","labels":["field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3103,"title":"`base mixin` that implements a `sealed class` counts towards exhaustiveness. Maybe allow `sealed mixin`.","state":"OPEN","comments":8,"participants":4,"reactions":8,"createdAt":"2023-05-20T21:07:28.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3103,"title":"`base mixin` that implements a `sealed class` counts towards exhaustiveness. Maybe allow `sealed mixin`.","state":"OPEN","comments":8,"participants":4,"reactions":8,"createdAt":"2023-05-20T21:07:28.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2601,"title":"Disallow identity-escapes in string literals.","state":"OPEN","comments":2,"participants":2,"reactions":8,"createdAt":"2022-11-01T10:27:22.000Z","labels":["feature","breaking-change"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2601,"title":"Disallow identity-escapes in string literals.","state":"OPEN","comments":2,"participants":2,"reactions":8,"createdAt":"2022-11-01T10:27:22.000Z","labels":["feature","breaking-change"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2576,"title":"Allow user-defined classes to use `++` and `--` syntax.","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2022-10-18T09:25:55.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2576,"title":"Allow user-defined classes to use `++` and `--` syntax.","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2022-10-18T09:25:55.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2509,"title":"Clarify the treatment of named parameters whose name starts with `_`","state":"OPEN","comments":37,"participants":7,"reactions":8,"createdAt":"2022-09-22T10:00:14.000Z","labels":["technical-debt","primary-constructors"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2476,"title":"Make unit tests a first class citizen","state":"OPEN","comments":7,"participants":4,"reactions":8,"createdAt":"2022-09-11T02:27:05.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1870,"title":"Further extending the meaning of `?` to check for nulls","state":"OPEN","comments":5,"participants":4,"reactions":8,"createdAt":"2021-09-24T16:27:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1851,"title":"Items from const literals should be able to be const as well","state":"OPEN","comments":9,"participants":8,"reactions":8,"createdAt":"2021-09-10T07:05:52.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1759,"title":"`async*` methods should start synchronously when their streams are listened to.","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2018-07-11T10:13:57.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1759,"title":"`async*` methods should start synchronously when their streams are listened to.","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2018-07-11T10:13:57.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1708,"title":"Add show as to import stmt.","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2021-06-26T09:18:25.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1708,"title":"Add show as to import stmt.","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2021-06-26T09:18:25.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1627,"title":"Cannot hide individual extension methods.","state":"OPEN","comments":6,"participants":6,"reactions":8,"createdAt":"2021-05-11T09:32:13.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1611,"title":"Allow classes to have `self` references similar to `super`.","state":"OPEN","comments":12,"participants":5,"reactions":8,"createdAt":"2021-05-03T10:41:17.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1547,"title":"Provide a safer-for-nullability version of `as`","state":"OPEN","comments":20,"participants":7,"reactions":8,"createdAt":"2021-03-25T19:23:56.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1292,"title":"Should there be a way to update a tuple?","state":"OPEN","comments":27,"participants":11,"reactions":8,"createdAt":"2020-11-06T17:10:23.000Z","labels":["question","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1292,"title":"Should there be a way to update a tuple?","state":"OPEN","comments":27,"participants":11,"reactions":8,"createdAt":"2020-11-06T17:10:23.000Z","labels":["question","records"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1187,"title":"Provide a \"forced promotion\" operator with runtime checking.","state":"OPEN","comments":32,"participants":10,"reactions":8,"createdAt":"2020-08-28T05:22:59.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1187,"title":"Provide a \"forced promotion\" operator with runtime checking.","state":"OPEN","comments":32,"participants":10,"reactions":8,"createdAt":"2020-08-28T05:22:59.000Z","labels":["feature","nnbd","field-promotion"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":844,"title":"Sugar for simulated higher-kinded types through type defunctionalization.","state":"OPEN","comments":1,"participants":1,"reactions":8,"createdAt":"2020-02-18T21:44:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":844,"title":"Sugar for simulated higher-kinded types through type defunctionalization.","state":"OPEN","comments":1,"participants":1,"reactions":8,"createdAt":"2020-02-18T21:44:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":663,"title":"Constant from extension method?","state":"OPEN","comments":6,"participants":5,"reactions":8,"createdAt":"2019-11-05T01:15:33.000Z","labels":["feature","enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":367,"title":"[Proposal] Create a Dart class convenience constructor for optional parameters.","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2019-05-21T20:53:22.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":367,"title":"[Proposal] Create a Dart class convenience constructor for optional parameters.","state":"OPEN","comments":1,"participants":2,"reactions":8,"createdAt":"2019-05-21T20:53:22.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":229,"title":"Use-site Invariance","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2019-02-20T14:05:30.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":229,"title":"Use-site Invariance","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2019-02-20T14:05:30.000Z","labels":["feature","variance"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":217,"title":"Proposal: allow field formal parameters in setters","state":"OPEN","comments":4,"participants":4,"reactions":8,"createdAt":"2019-02-11T14:43:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":217,"title":"Proposal: allow field formal parameters in setters","state":"OPEN","comments":4,"participants":4,"reactions":8,"createdAt":"2019-02-11T14:43:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":205,"title":"Enhanced Object Literals","state":"OPEN","comments":5,"participants":4,"reactions":8,"createdAt":"2019-02-04T21:39:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":205,"title":"Enhanced Object Literals","state":"OPEN","comments":5,"participants":4,"reactions":8,"createdAt":"2019-02-04T21:39:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":194,"title":"Lazy evaluation of function arguments","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2019-01-24T12:48:43.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":194,"title":"Lazy evaluation of function arguments","state":"OPEN","comments":4,"participants":3,"reactions":8,"createdAt":"2019-01-24T12:48:43.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4458,"title":"Allow constructor initializers to access fields initialized from previous initializers","state":"OPEN","comments":4,"participants":4,"reactions":7,"createdAt":"2025-07-09T21:17:20.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4364,"title":"Type promotion for variables typed as a sealed class based on control flow","state":"OPEN","comments":6,"participants":5,"reactions":7,"createdAt":"2025-05-08T20:59:59.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4358,"title":"Support Parts/augments with an \"external\" (generated) path","state":"OPEN","comments":7,"participants":4,"reactions":7,"createdAt":"2025-05-06T18:20:08.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4331,"title":"Lazy initialization functionality of 'late' keyword should be split into a dedicated 'lazy' keyword","state":"OPEN","comments":6,"participants":4,"reactions":7,"createdAt":"2025-04-17T00:53:59.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4277,"title":"Implement type classes","state":"OPEN","comments":0,"participants":1,"reactions":7,"createdAt":"2025-02-28T23:42:27.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4153,"title":"Allow factory constructors to specify a return type","state":"OPEN","comments":3,"participants":3,"reactions":7,"createdAt":"2024-11-05T10:24:59.000Z","labels":["feature","enhanced-const","brevity"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3780,"title":"`enum`s extending other types","state":"OPEN","comments":5,"participants":3,"reactions":7,"createdAt":"2024-05-04T21:16:29.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3614,"title":"[extension types] Let `T` be assignable to an `open` extension type with representation type `T`","state":"OPEN","comments":16,"participants":4,"reactions":7,"createdAt":"2024-02-14T10:49:56.000Z","labels":["small-feature","extension-types-later"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3329,"title":"Don't use 'iff'","state":"OPEN","comments":1,"participants":2,"reactions":7,"createdAt":"2023-09-07T11:38:10.000Z","labels":["specification"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3222,"title":"Infer the return type of a cycle-free arrow getter","state":"OPEN","comments":12,"participants":4,"reactions":7,"createdAt":"2023-07-18T15:48:06.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3097,"title":"Can't `rethrow` in switch expression","state":"OPEN","comments":6,"participants":5,"reactions":7,"createdAt":"2023-05-22T15:11:49.000Z","labels":["request","feature","small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3002,"title":"Generalized generative constructor initializer code.","state":"OPEN","comments":9,"participants":5,"reactions":7,"createdAt":"2023-04-17T11:38:53.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2410,"title":"Do we need a 'process if present' construct?","state":"OPEN","comments":3,"participants":3,"reactions":7,"createdAt":"2022-08-16T16:10:51.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1880,"title":"Forwarding function expressions and declarations","state":"OPEN","comments":18,"participants":2,"reactions":7,"createdAt":"2021-09-30T11:34:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1488,"title":"Allow asserts in redirecting generative constructors.","state":"OPEN","comments":0,"participants":1,"reactions":7,"createdAt":"2021-03-03T13:05:02.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1488,"title":"Allow asserts in redirecting generative constructors.","state":"OPEN","comments":0,"participants":1,"reactions":7,"createdAt":"2021-03-03T13:05:02.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1441,"title":"await for ... on ... catch syntax","state":"OPEN","comments":4,"participants":3,"reactions":7,"createdAt":"2021-02-07T15:58:20.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1439,"title":"type inference needlessly guesses nullable type","state":"OPEN","comments":2,"participants":4,"reactions":7,"createdAt":"2021-02-07T07:28:11.000Z","labels":["nnbd","type-inference"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1399,"title":"Promoting type variables.","state":"OPEN","comments":0,"participants":1,"reactions":7,"createdAt":"2021-01-13T11:34:17.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1377,"title":"Flow analysis - keep non-nullability on join","state":"OPEN","comments":4,"participants":4,"reactions":7,"createdAt":"2020-12-18T03:43:03.000Z","labels":["request","feature","nnbd","flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1363,"title":"Provide a way to group or compose annotations","state":"OPEN","comments":1,"participants":2,"reactions":7,"createdAt":"2020-12-10T23:37:14.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1357,"title":"Explicit reflection support","state":"OPEN","comments":0,"participants":1,"reactions":7,"createdAt":"2020-12-08T06:45:25.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1007,"title":"Expose interfaces for enums and enum items for generic programming","state":"OPEN","comments":10,"participants":5,"reactions":7,"createdAt":"2020-06-04T13:00:05.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":920,"title":"Non-local returns","state":"OPEN","comments":6,"participants":4,"reactions":7,"createdAt":"2020-04-08T18:43:36.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":820,"title":"if - assignment operator","state":"OPEN","comments":7,"participants":4,"reactions":7,"createdAt":"2020-02-06T13:54:26.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":625,"title":"Const asserts","state":"OPEN","comments":2,"participants":3,"reactions":7,"createdAt":"2019-10-15T18:03:39.000Z","labels":["enhanced-const"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":466,"title":"Compiler support for implicit caller name","state":"OPEN","comments":3,"participants":4,"reactions":7,"createdAt":"2019-07-22T10:31:08.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":462,"title":"Create Auto Properties in Dart","state":"OPEN","comments":9,"participants":5,"reactions":7,"createdAt":"2019-07-21T19:01:39.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":308,"title":"Static classes, enabling compile-time elimination of objects","state":"OPEN","comments":5,"participants":4,"reactions":7,"createdAt":"2019-04-10T13:15:44.000Z","labels":[]}
{"date":"2025-08-20","repository":"dart-lang/language","id":148,"title":"Case functions","state":"OPEN","comments":15,"participants":9,"reactions":7,"createdAt":"2018-12-18T18:21:18.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4431,"title":"How should primary constructors call the superclass constructor?","state":"OPEN","comments":21,"participants":7,"reactions":6,"createdAt":"2025-06-30T23:03:49.000Z","labels":["primary-constructors"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4411,"title":"Type spreads","state":"OPEN","comments":4,"participants":3,"reactions":6,"createdAt":"2025-06-12T11:53:36.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4261,"title":"Potentially constant statements and bodies.","state":"OPEN","comments":0,"participants":1,"reactions":6,"createdAt":"2025-02-11T13:47:42.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4139,"title":"Support `continue` inside collection `for` expressions","state":"OPEN","comments":12,"participants":6,"reactions":6,"createdAt":"2024-10-24T12:51:35.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3970,"title":"Infer the type of an optional parameter from the default value","state":"OPEN","comments":1,"participants":2,"reactions":6,"createdAt":"2024-07-09T14:37:43.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3795,"title":"Strict bounds","state":"OPEN","comments":3,"participants":2,"reactions":6,"createdAt":"2024-05-13T09:58:08.000Z","labels":["small-feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3786,"title":"Implicitly create static methods as wrappers for instance methods","state":"OPEN","comments":7,"participants":5,"reactions":6,"createdAt":"2024-05-08T03:31:19.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3722,"title":"const extensions / `constexpr` in Dart","state":"OPEN","comments":1,"participants":2,"reactions":6,"createdAt":"2024-04-24T11:40:05.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3471,"title":"Require the static type of all expressions to be a subtype of their context; push coercions down to satisfy this.","state":"OPEN","comments":5,"participants":4,"reactions":6,"createdAt":"2023-11-16T04:59:16.000Z","labels":["feature","type-inference"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3179,"title":"`try <pattern>`","state":"OPEN","comments":4,"participants":2,"reactions":6,"createdAt":"2023-06-30T00:33:36.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2977,"title":"When flow analysis can't figure out that a switch is exhaustive, user experience is poor","state":"OPEN","comments":13,"participants":5,"reactions":6,"createdAt":"2023-04-03T19:12:38.000Z","labels":["request","patterns","flow-analysis","exhaustiveness"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2534,"title":"Allow multiple arguments to index operators","state":"OPEN","comments":6,"participants":3,"reactions":6,"createdAt":"2022-09-29T23:27:55.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2156,"title":"[proposal] Enable `default` outside switch case","state":"OPEN","comments":4,"participants":4,"reactions":6,"createdAt":"2022-03-13T02:10:11.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":2053,"title":"Interpolation is letting a null string bypass null safety feature","state":"OPEN","comments":52,"participants":15,"reactions":6,"createdAt":"2022-01-07T22:22:04.000Z","labels":["state-backlog","nnbd"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1845,"title":"Flow analysis feature request: on join, promote to LUB","state":"OPEN","comments":1,"participants":2,"reactions":6,"createdAt":"2021-09-07T13:55:45.000Z","labels":["feature","flow-analysis"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1605,"title":"Allow final fields in mixins that get filled in classes using the mixin with Constructor(this.field) notation","state":"OPEN","comments":13,"participants":7,"reactions":6,"createdAt":"2021-04-27T12:23:51.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1539,"title":"switch is exhaustive and default is redundant","state":"OPEN","comments":5,"participants":4,"reactions":6,"createdAt":"2021-03-23T17:58:08.000Z","labels":["bug"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1458,"title":"Review increasing number of code generation use cases to understand potential missing capabilities of the language","state":"OPEN","comments":12,"participants":5,"reactions":6,"createdAt":"2021-02-17T13:40:30.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1353,"title":"Property mixins","state":"OPEN","comments":8,"participants":4,"reactions":6,"createdAt":"2020-12-07T02:47:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1321,"title":"Proposal: implicit return should return the value of the last expression","state":"OPEN","comments":7,"participants":7,"reactions":6,"createdAt":"2020-11-19T06:49:56.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1293,"title":"Should tuples be equivalent to argument lists?","state":"OPEN","comments":4,"participants":3,"reactions":6,"createdAt":"2020-11-07T12:05:41.000Z","labels":["question","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":1052,"title":"Add an expression-local declaration (let-expression).","state":"OPEN","comments":3,"participants":3,"reactions":6,"createdAt":"2015-12-16T15:02:46.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":926,"title":"Consider supporting type promotion for `this`.","state":"OPEN","comments":0,"participants":1,"reactions":6,"createdAt":"2020-04-15T03:23:04.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":631,"title":"Automatically generating missing methods","state":"OPEN","comments":18,"participants":4,"reactions":6,"createdAt":"2019-10-18T17:47:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":371,"title":"Link time sets and maps","state":"OPEN","comments":6,"participants":4,"reactions":6,"createdAt":"2019-05-23T09:55:39.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":169,"title":"Type decomposition","state":"OPEN","comments":2,"participants":2,"reactions":6,"createdAt":"2019-01-10T08:27:42.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":67,"title":"It's inconvenient to have to define typedefs at top-level if you only need them locally.","state":"OPEN","comments":6,"participants":4,"reactions":6,"createdAt":"2018-10-31T13:49:33.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":16,"title":"Solution: Make a parameter optional by giving it a default value","state":"OPEN","comments":10,"participants":5,"reactions":6,"createdAt":"2018-08-16T08:22:21.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4479,"title":"Private named parameter should apply to positional parameters too.","state":"OPEN","comments":11,"participants":4,"reactions":5,"createdAt":"2025-07-28T12:15:58.000Z","labels":["private-named-parameters"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4353,"title":"Support Intersection Types in Dart (e.g., T extends A & B, typedef AB = A & B)","state":"OPEN","comments":1,"participants":2,"reactions":5,"createdAt":"2025-05-03T19:34:03.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4251,"title":"Allow private names as named record field and parameter names.","state":"OPEN","comments":1,"participants":2,"reactions":5,"createdAt":"2025-02-02T13:33:16.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4197,"title":"Be more strict on inferred types with no constraints?","state":"OPEN","comments":7,"participants":3,"reactions":5,"createdAt":"2024-12-06T09:45:49.000Z","labels":["question","type-inference"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4159,"title":"Allow `Function` getters to be overriden as actual functions","state":"OPEN","comments":9,"participants":3,"reactions":5,"createdAt":"2024-11-12T12:39:01.000Z","labels":["feature"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":4040,"title":"Allow refutable patterns in assignment patterns.","state":"OPEN","comments":2,"participants":3,"reactions":5,"createdAt":"2024-08-16T13:42:52.000Z","labels":["feature","patterns"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3628,"title":"Support Abstract Type Members","state":"OPEN","comments":1,"participants":2,"reactions":5,"createdAt":"2024-02-24T19:58:18.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3625,"title":"FutureOr, access value synchronously if possible.","state":"OPEN","comments":51,"participants":8,"reactions":5,"createdAt":"2024-02-23T16:45:58.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3165,"title":"Better static checking of erroneous API results","state":"OPEN","comments":5,"participants":3,"reactions":5,"createdAt":"2023-06-25T18:33:15.000Z","labels":["request"]}
{"date":"2025-08-20","repository":"dart-lang/language","id":3075,"title":"Static classes","state":"OPEN","comments":5,"participants":3,"reactions":5,"createdAt":"2023-05-15T14:40:37.000Z","labels":["feature"]}
